
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  000011e6  0000127a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800172  00800172  000012ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000131c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ad2  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6d  00000000  00000000  00002f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fbb  00000000  00000000  00003a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  00004a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000661  00000000  00000000  00004dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000104f  00000000  00000000  00005435  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00006484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	c9 c1       	rjmp	.+914    	; 0x398 <__vector_1>
       6:	00 00       	nop
       8:	da c1       	rjmp	.+948    	; 0x3be <__vector_2>
       a:	00 00       	nop
       c:	eb c1       	rjmp	.+982    	; 0x3e4 <__vector_3>
       e:	00 00       	nop
      10:	fc c1       	rjmp	.+1016   	; 0x40a <__vector_4>
      12:	00 00       	nop
      14:	0d c2       	rjmp	.+1050   	; 0x430 <__vector_5>
      16:	00 00       	nop
      18:	1e c2       	rjmp	.+1084   	; 0x456 <__vector_6>
      1a:	00 00       	nop
      1c:	2f c2       	rjmp	.+1118   	; 0x47c <__vector_7>
      1e:	00 00       	nop
      20:	40 c2       	rjmp	.+1152   	; 0x4a2 <__vector_8>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d8 c0       	rjmp	.+432    	; 0x1e2 <__vector_12>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2d c1       	rjmp	.+602    	; 0x2c4 <__vector_26>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 ee       	ldi	r30, 0xE6	; 230
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 37       	cpi	r26, 0x72	; 114
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a2 e7       	ldi	r26, 0x72	; 114
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a7 39       	cpi	r26, 0x97	; 151
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	e9 d3       	rcall	.+2002   	; 0x896 <main>
      c4:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <checkbusy>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ca:	8f e8       	ldi	r24, 0x8F	; 143
      cc:	91 e0       	ldi	r25, 0x01	; 1
      ce:	01 97       	sbiw	r24, 0x01	; 1
      d0:	f1 f7       	brne	.-4      	; 0xce <checkbusy+0x4>
      d2:	00 c0       	rjmp	.+0      	; 0xd4 <checkbusy+0xa>
      d4:	00 00       	nop
      d6:	08 95       	ret

000000d8 <write_data>:
      d8:	1f 93       	push	r17
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
      de:	18 2f       	mov	r17, r24
      e0:	c0 e0       	ldi	r28, 0x00	; 0
      e2:	d1 e2       	ldi	r29, 0x21	; 33
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	88 83       	st	Y, r24
      e8:	f0 df       	rcall	.-32     	; 0xca <checkbusy>
      ea:	10 93 00 20 	sts	0x2000, r17	; 0x802000 <__bss_end+0x1e69>
      ee:	82 e0       	ldi	r24, 0x02	; 2
      f0:	88 83       	st	Y, r24
      f2:	87 ec       	ldi	r24, 0xC7	; 199
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	01 97       	sbiw	r24, 0x01	; 1
      f8:	f1 f7       	brne	.-4      	; 0xf6 <write_data+0x1e>
      fa:	00 c0       	rjmp	.+0      	; 0xfc <write_data+0x24>
      fc:	00 00       	nop
      fe:	df 91       	pop	r29
     100:	cf 91       	pop	r28
     102:	1f 91       	pop	r17
     104:	08 95       	ret

00000106 <MCU_Init>:
     106:	80 e8       	ldi	r24, 0x80	; 128
     108:	85 bf       	out	0x35, r24	; 53
     10a:	94 e4       	ldi	r25, 0x44	; 68
     10c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     110:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
     114:	10 92 00 21 	sts	0x2100, r1	; 0x802100 <__bss_end+0x1f69>
     118:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__bss_end+0x1e69>
     11c:	08 95       	ret

0000011e <LCDCommand>:
     11e:	0f 93       	push	r16
     120:	1f 93       	push	r17
     122:	cf 93       	push	r28
     124:	c8 2f       	mov	r28, r24
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	11 e2       	ldi	r17, 0x21	; 33
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	f8 01       	movw	r30, r16
     12e:	80 83       	st	Z, r24
     130:	cc df       	rcall	.-104    	; 0xca <checkbusy>
     132:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__bss_end+0x1e69>
     136:	f8 01       	movw	r30, r16
     138:	10 82       	st	Z, r1
     13a:	c1 50       	subi	r28, 0x01	; 1
     13c:	c2 30       	cpi	r28, 0x02	; 2
     13e:	30 f4       	brcc	.+12     	; 0x14c <LCDCommand+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     140:	8f e3       	ldi	r24, 0x3F	; 63
     142:	9f e1       	ldi	r25, 0x1F	; 31
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <LCDCommand+0x26>
     148:	00 c0       	rjmp	.+0      	; 0x14a <LCDCommand+0x2c>
     14a:	00 00       	nop
     14c:	cf 91       	pop	r28
     14e:	1f 91       	pop	r17
     150:	0f 91       	pop	r16
     152:	08 95       	ret

00000154 <LCDInit>:
     154:	82 e0       	ldi	r24, 0x02	; 2
     156:	80 93 00 21 	sts	0x2100, r24	; 0x802100 <__bss_end+0x1f69>
     15a:	8f e3       	ldi	r24, 0x3F	; 63
     15c:	9f e1       	ldi	r25, 0x1F	; 31
     15e:	01 97       	sbiw	r24, 0x01	; 1
     160:	f1 f7       	brne	.-4      	; 0x15e <LCDInit+0xa>
     162:	00 c0       	rjmp	.+0      	; 0x164 <LCDInit+0x10>
     164:	00 00       	nop
     166:	8f e5       	ldi	r24, 0x5F	; 95
     168:	9a ee       	ldi	r25, 0xEA	; 234
     16a:	01 97       	sbiw	r24, 0x01	; 1
     16c:	f1 f7       	brne	.-4      	; 0x16a <LCDInit+0x16>
     16e:	00 c0       	rjmp	.+0      	; 0x170 <LCDInit+0x1c>
     170:	00 00       	nop
     172:	80 e3       	ldi	r24, 0x30	; 48
     174:	d4 df       	rcall	.-88     	; 0x11e <LCDCommand>
     176:	8f e1       	ldi	r24, 0x1F	; 31
     178:	9e e4       	ldi	r25, 0x4E	; 78
     17a:	01 97       	sbiw	r24, 0x01	; 1
     17c:	f1 f7       	brne	.-4      	; 0x17a <LCDInit+0x26>
     17e:	00 c0       	rjmp	.+0      	; 0x180 <LCDInit+0x2c>
     180:	00 00       	nop
     182:	80 e3       	ldi	r24, 0x30	; 48
     184:	cc df       	rcall	.-104    	; 0x11e <LCDCommand>
     186:	8f e9       	ldi	r24, 0x9F	; 159
     188:	9f e0       	ldi	r25, 0x0F	; 15
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	f1 f7       	brne	.-4      	; 0x18a <LCDInit+0x36>
     18e:	00 c0       	rjmp	.+0      	; 0x190 <LCDInit+0x3c>
     190:	00 00       	nop
     192:	82 e3       	ldi	r24, 0x32	; 50
     194:	c4 df       	rcall	.-120    	; 0x11e <LCDCommand>
     196:	88 e3       	ldi	r24, 0x38	; 56
     198:	c2 df       	rcall	.-124    	; 0x11e <LCDCommand>
     19a:	88 e0       	ldi	r24, 0x08	; 8
     19c:	c0 df       	rcall	.-128    	; 0x11e <LCDCommand>
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	be df       	rcall	.-132    	; 0x11e <LCDCommand>
     1a2:	86 e0       	ldi	r24, 0x06	; 6
     1a4:	bc df       	rcall	.-136    	; 0x11e <LCDCommand>
     1a6:	8c e0       	ldi	r24, 0x0C	; 12
     1a8:	ba cf       	rjmp	.-140    	; 0x11e <LCDCommand>
     1aa:	08 95       	ret

000001ac <LCDPutchar>:
     1ac:	cf 93       	push	r28
     1ae:	c8 2f       	mov	r28, r24
     1b0:	8c df       	rcall	.-232    	; 0xca <checkbusy>
     1b2:	8c 2f       	mov	r24, r28
     1b4:	91 df       	rcall	.-222    	; 0xd8 <write_data>
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <LCDPuts>:
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	ec 01       	movw	r28, r24
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <LCDPuts+0xc>
     1c2:	f4 df       	rcall	.-24     	; 0x1ac <LCDPutchar>
     1c4:	21 96       	adiw	r28, 0x01	; 1
     1c6:	88 81       	ld	r24, Y
     1c8:	81 11       	cpse	r24, r1
     1ca:	fb cf       	rjmp	.-10     	; 0x1c2 <LCDPuts+0x8>
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	08 95       	ret

000001d2 <LCDMove>:
     1d2:	90 e4       	ldi	r25, 0x40	; 64
     1d4:	89 9f       	mul	r24, r25
     1d6:	60 0d       	add	r22, r0
     1d8:	11 24       	eor	r1, r1
     1da:	86 2f       	mov	r24, r22
     1dc:	80 68       	ori	r24, 0x80	; 128
     1de:	9f cf       	rjmp	.-194    	; 0x11e <LCDCommand>
     1e0:	08 95       	ret

000001e2 <__vector_12>:
unsigned char average[7] = {0};
unsigned char av = 0; 
unsigned char measurement;
// sensor
unsigned char check = 0;
ISR(TIMER1_COMPA_vect) {
     1e2:	1f 92       	push	r1
     1e4:	0f 92       	push	r0
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
     1ec:	0b b6       	in	r0, 0x3b	; 59
     1ee:	0f 92       	push	r0
     1f0:	2f 93       	push	r18
     1f2:	3f 93       	push	r19
     1f4:	4f 93       	push	r20
     1f6:	5f 93       	push	r21
     1f8:	6f 93       	push	r22
     1fa:	7f 93       	push	r23
     1fc:	8f 93       	push	r24
     1fe:	9f 93       	push	r25
     200:	ef 93       	push	r30
     202:	ff 93       	push	r31
	unsigned char temp = time_average[count];
     204:	70 91 8a 01 	lds	r23, 0x018A	; 0x80018a <count>
     208:	e7 2f       	mov	r30, r23
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	e3 57       	subi	r30, 0x73	; 115
     20e:	fe 4f       	sbci	r31, 0xFE	; 254
     210:	90 81       	ld	r25, Z
	time_average[count] = check;
     212:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <check>
     216:	60 83       	st	Z, r22
	for (av = 0; av < 8; av++) {
     218:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <av>
     21c:	27 c0       	rjmp	.+78     	; 0x26c <__vector_12+0x8a>
		if (((temp ^ time_average[count]) >> av) & 0x01) {
     21e:	29 2f       	mov	r18, r25
     220:	26 27       	eor	r18, r22
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	48 2f       	mov	r20, r24
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	08 2e       	mov	r0, r24
     22a:	02 c0       	rjmp	.+4      	; 0x230 <__vector_12+0x4e>
     22c:	35 95       	asr	r19
     22e:	27 95       	ror	r18
     230:	0a 94       	dec	r0
     232:	e2 f7       	brpl	.-8      	; 0x22c <__vector_12+0x4a>
     234:	20 ff       	sbrs	r18, 0
     236:	17 c0       	rjmp	.+46     	; 0x266 <__vector_12+0x84>
			if ((temp >> av) & 0x01) {
     238:	29 2f       	mov	r18, r25
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	08 2e       	mov	r0, r24
     23e:	02 c0       	rjmp	.+4      	; 0x244 <__vector_12+0x62>
     240:	35 95       	asr	r19
     242:	27 95       	ror	r18
     244:	0a 94       	dec	r0
     246:	e2 f7       	brpl	.-8      	; 0x240 <__vector_12+0x5e>
     248:	20 ff       	sbrs	r18, 0
     24a:	07 c0       	rjmp	.+14     	; 0x25a <__vector_12+0x78>
				average[av] --;
     24c:	fa 01       	movw	r30, r20
     24e:	ed 57       	subi	r30, 0x7D	; 125
     250:	fe 4f       	sbci	r31, 0xFE	; 254
     252:	20 81       	ld	r18, Z
     254:	21 50       	subi	r18, 0x01	; 1
     256:	20 83       	st	Z, r18
     258:	06 c0       	rjmp	.+12     	; 0x266 <__vector_12+0x84>
			}
			else {
				average[av] ++;
     25a:	fa 01       	movw	r30, r20
     25c:	ed 57       	subi	r30, 0x7D	; 125
     25e:	fe 4f       	sbci	r31, 0xFE	; 254
     260:	20 81       	ld	r18, Z
     262:	2f 5f       	subi	r18, 0xFF	; 255
     264:	20 83       	st	Z, r18
// sensor
unsigned char check = 0;
ISR(TIMER1_COMPA_vect) {
	unsigned char temp = time_average[count];
	time_average[count] = check;
	for (av = 0; av < 8; av++) {
     266:	8f 5f       	subi	r24, 0xFF	; 255
     268:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <av>
     26c:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <av>
     270:	88 30       	cpi	r24, 0x08	; 8
     272:	a8 f2       	brcs	.-86     	; 0x21e <__vector_12+0x3c>
				average[av] ++;
			}
		}
	}
	
	count ++;
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	87 0f       	add	r24, r23
     278:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <count>
	if (count == average_count) {
     27c:	8a 30       	cpi	r24, 0x0A	; 10
     27e:	11 f4       	brne	.+4      	; 0x284 <__vector_12+0xa2>
		count = 0;
     280:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <count>
	}
	measurement = 1;
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <measurement>
}
     28a:	ff 91       	pop	r31
     28c:	ef 91       	pop	r30
     28e:	9f 91       	pop	r25
     290:	8f 91       	pop	r24
     292:	7f 91       	pop	r23
     294:	6f 91       	pop	r22
     296:	5f 91       	pop	r21
     298:	4f 91       	pop	r20
     29a:	3f 91       	pop	r19
     29c:	2f 91       	pop	r18
     29e:	0f 90       	pop	r0
     2a0:	0b be       	out	0x3b, r0	; 59
     2a2:	0f 90       	pop	r0
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	0f 90       	pop	r0
     2a8:	1f 90       	pop	r1
     2aa:	18 95       	reti

000002ac <measurement_time_Init>:
void measurement_time_Init() {						// 초음파 계측 주기 타이머
	TCCR1A = (0<<WGM11) | (0<<WGM10);
     2ac:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
     2ae:	8d e0       	ldi	r24, 0x0D	; 13
     2b0:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
     2b2:	87 b7       	in	r24, 0x37	; 55
     2b4:	80 61       	ori	r24, 0x10	; 16
     2b6:	87 bf       	out	0x37, r24	; 55
	OCR1A = 15624 * measurement_time;
     2b8:	84 e3       	ldi	r24, 0x34	; 52
     2ba:	9c e0       	ldi	r25, 0x0C	; 12
     2bc:	9b bd       	out	0x2b, r25	; 43
     2be:	8a bd       	out	0x2a, r24	; 42
	sei();
     2c0:	78 94       	sei
     2c2:	08 95       	ret

000002c4 <__vector_26>:
}

unsigned char h = 12, m = 30, s = 30, l;
unsigned int front[7] = {0};
ISR(TIMER3_COMPA_vect) {
     2c4:	1f 92       	push	r1
     2c6:	0f 92       	push	r0
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	0f 92       	push	r0
     2cc:	11 24       	eor	r1, r1
     2ce:	0b b6       	in	r0, 0x3b	; 59
     2d0:	0f 92       	push	r0
     2d2:	2f 93       	push	r18
     2d4:	3f 93       	push	r19
     2d6:	8f 93       	push	r24
     2d8:	9f 93       	push	r25
     2da:	ef 93       	push	r30
     2dc:	ff 93       	push	r31
	// 시계
	s++;
     2de:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <s>
     2e2:	8f 5f       	subi	r24, 0xFF	; 255
     2e4:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <s>
	if (s > 59) {m++, s = 0;}
     2e8:	8c 33       	cpi	r24, 0x3C	; 60
     2ea:	38 f0       	brcs	.+14     	; 0x2fa <__vector_26+0x36>
     2ec:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <m>
     2f0:	8f 5f       	subi	r24, 0xFF	; 255
     2f2:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <m>
     2f6:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <s>
	if (m > 59) {h++, m = 0;}
     2fa:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <m>
     2fe:	8c 33       	cpi	r24, 0x3C	; 60
     300:	38 f0       	brcs	.+14     	; 0x310 <__vector_26+0x4c>
     302:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <h>
     306:	8f 5f       	subi	r24, 0xFF	; 255
     308:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <h>
     30c:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <m>
	if (h > 23) {h = 0;}
     310:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <h>
     314:	88 31       	cpi	r24, 0x18	; 24
     316:	10 f0       	brcs	.+4      	; 0x31c <__vector_26+0x58>
     318:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <h>
	sei();
}

unsigned char h = 12, m = 30, s = 30, l;
unsigned int front[7] = {0};
ISR(TIMER3_COMPA_vect) {
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	1b c0       	rjmp	.+54     	; 0x356 <__vector_26+0x92>
	if (m > 59) {h++, m = 0;}
	if (h > 23) {h = 0;}

	// 경과 시간 측정
	for (char a = 0 ; a < 7 ; a++) {
		if (average[a] <= (average_count * standard / 100)) {
     320:	82 2f       	mov	r24, r18
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	fc 01       	movw	r30, r24
     326:	ed 57       	subi	r30, 0x7D	; 125
     328:	fe 4f       	sbci	r31, 0xFE	; 254
     32a:	30 81       	ld	r19, Z
     32c:	36 30       	cpi	r19, 0x06	; 6
     32e:	58 f4       	brcc	.+22     	; 0x346 <__vector_26+0x82>
			front[a]++;
     330:	88 0f       	add	r24, r24
     332:	99 1f       	adc	r25, r25
     334:	fc 01       	movw	r30, r24
     336:	ed 58       	subi	r30, 0x8D	; 141
     338:	fe 4f       	sbci	r31, 0xFE	; 254
     33a:	80 81       	ld	r24, Z
     33c:	91 81       	ldd	r25, Z+1	; 0x01
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	91 83       	std	Z+1, r25	; 0x01
     342:	80 83       	st	Z, r24
     344:	07 c0       	rjmp	.+14     	; 0x354 <__vector_26+0x90>
		}
		else {
			front[a] = 0;
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	fc 01       	movw	r30, r24
     34c:	ed 58       	subi	r30, 0x8D	; 141
     34e:	fe 4f       	sbci	r31, 0xFE	; 254
     350:	11 82       	std	Z+1, r1	; 0x01
     352:	10 82       	st	Z, r1
	if (s > 59) {m++, s = 0;}
	if (m > 59) {h++, m = 0;}
	if (h > 23) {h = 0;}

	// 경과 시간 측정
	for (char a = 0 ; a < 7 ; a++) {
     354:	2f 5f       	subi	r18, 0xFF	; 255
     356:	27 30       	cpi	r18, 0x07	; 7
     358:	18 f3       	brcs	.-58     	; 0x320 <__vector_26+0x5c>
		}
		else {
			front[a] = 0;
		}
	}
}
     35a:	ff 91       	pop	r31
     35c:	ef 91       	pop	r30
     35e:	9f 91       	pop	r25
     360:	8f 91       	pop	r24
     362:	3f 91       	pop	r19
     364:	2f 91       	pop	r18
     366:	0f 90       	pop	r0
     368:	0b be       	out	0x3b, r0	; 59
     36a:	0f 90       	pop	r0
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	0f 90       	pop	r0
     370:	1f 90       	pop	r1
     372:	18 95       	reti

00000374 <time_Init>:
void time_Init() {									// 시간 타이머
	TCCR3A = (0<<WGM11) | (0<<WGM10);
     374:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
     378:	8d e0       	ldi	r24, 0x0D	; 13
     37a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	ETIMSK |= (1 << OCIE3A);
     37e:	ed e7       	ldi	r30, 0x7D	; 125
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	80 81       	ld	r24, Z
     384:	80 61       	ori	r24, 0x10	; 16
     386:	80 83       	st	Z, r24
	OCR3A = 5000;//15624;
     388:	88 e8       	ldi	r24, 0x88	; 136
     38a:	93 e1       	ldi	r25, 0x13	; 19
     38c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     390:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	sei();
     394:	78 94       	sei
     396:	08 95       	ret

00000398 <__vector_1>:
}


// 후면 감지
char ckd = 0;
ISR(INT0_vect) {
     398:	1f 92       	push	r1
     39a:	0f 92       	push	r0
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	0f 92       	push	r0
     3a0:	11 24       	eor	r1, r1
     3a2:	8f 93       	push	r24
	if (ckd == 0) {ckd = 5;}
     3a4:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     3a8:	81 11       	cpse	r24, r1
     3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <__vector_1+0x1a>
     3ac:	85 e0       	ldi	r24, 0x05	; 5
     3ae:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
}
     3b2:	8f 91       	pop	r24
     3b4:	0f 90       	pop	r0
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	0f 90       	pop	r0
     3ba:	1f 90       	pop	r1
     3bc:	18 95       	reti

000003be <__vector_2>:
ISR(INT1_vect) {
     3be:	1f 92       	push	r1
     3c0:	0f 92       	push	r0
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	8f 93       	push	r24
	if (ckd == 0) {ckd = 6;}
     3ca:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     3ce:	81 11       	cpse	r24, r1
     3d0:	03 c0       	rjmp	.+6      	; 0x3d8 <__vector_2+0x1a>
     3d2:	86 e0       	ldi	r24, 0x06	; 6
     3d4:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
}
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_3>:
ISR(INT2_vect) {
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
	if (ckd == 0) {ckd = 3;} // 사용 x
     3f0:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     3f4:	81 11       	cpse	r24, r1
     3f6:	03 c0       	rjmp	.+6      	; 0x3fe <__vector_3+0x1a>
     3f8:	83 e0       	ldi	r24, 0x03	; 3
     3fa:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
}
     3fe:	8f 91       	pop	r24
     400:	0f 90       	pop	r0
     402:	0f be       	out	0x3f, r0	; 63
     404:	0f 90       	pop	r0
     406:	1f 90       	pop	r1
     408:	18 95       	reti

0000040a <__vector_4>:
ISR(INT3_vect) {
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	0f 92       	push	r0
     412:	11 24       	eor	r1, r1
     414:	8f 93       	push	r24
	if (ckd == 0) {ckd = 7;}
     416:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     41a:	81 11       	cpse	r24, r1
     41c:	03 c0       	rjmp	.+6      	; 0x424 <__vector_4+0x1a>
     41e:	87 e0       	ldi	r24, 0x07	; 7
     420:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
}
     424:	8f 91       	pop	r24
     426:	0f 90       	pop	r0
     428:	0f be       	out	0x3f, r0	; 63
     42a:	0f 90       	pop	r0
     42c:	1f 90       	pop	r1
     42e:	18 95       	reti

00000430 <__vector_5>:
ISR(INT4_vect) {
     430:	1f 92       	push	r1
     432:	0f 92       	push	r0
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	0f 92       	push	r0
     438:	11 24       	eor	r1, r1
     43a:	8f 93       	push	r24
	if (ckd == 0) {ckd = 1;}
     43c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     440:	81 11       	cpse	r24, r1
     442:	03 c0       	rjmp	.+6      	; 0x44a <__vector_5+0x1a>
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
}
     44a:	8f 91       	pop	r24
     44c:	0f 90       	pop	r0
     44e:	0f be       	out	0x3f, r0	; 63
     450:	0f 90       	pop	r0
     452:	1f 90       	pop	r1
     454:	18 95       	reti

00000456 <__vector_6>:
ISR(INT5_vect) {
     456:	1f 92       	push	r1
     458:	0f 92       	push	r0
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	0f 92       	push	r0
     45e:	11 24       	eor	r1, r1
     460:	8f 93       	push	r24
	if (ckd == 0) {ckd = 2;}
     462:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     466:	81 11       	cpse	r24, r1
     468:	03 c0       	rjmp	.+6      	; 0x470 <__vector_6+0x1a>
     46a:	82 e0       	ldi	r24, 0x02	; 2
     46c:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
}
     470:	8f 91       	pop	r24
     472:	0f 90       	pop	r0
     474:	0f be       	out	0x3f, r0	; 63
     476:	0f 90       	pop	r0
     478:	1f 90       	pop	r1
     47a:	18 95       	reti

0000047c <__vector_7>:
ISR(INT6_vect) {
     47c:	1f 92       	push	r1
     47e:	0f 92       	push	r0
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	0f 92       	push	r0
     484:	11 24       	eor	r1, r1
     486:	8f 93       	push	r24
	if (ckd == 0) {ckd = 3;}
     488:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     48c:	81 11       	cpse	r24, r1
     48e:	03 c0       	rjmp	.+6      	; 0x496 <__vector_7+0x1a>
     490:	83 e0       	ldi	r24, 0x03	; 3
     492:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
}
     496:	8f 91       	pop	r24
     498:	0f 90       	pop	r0
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	0f 90       	pop	r0
     49e:	1f 90       	pop	r1
     4a0:	18 95       	reti

000004a2 <__vector_8>:
ISR(INT7_vect) {
     4a2:	1f 92       	push	r1
     4a4:	0f 92       	push	r0
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	0f 92       	push	r0
     4aa:	11 24       	eor	r1, r1
     4ac:	8f 93       	push	r24
	if (ckd == 0) {ckd = 4;}
     4ae:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     4b2:	81 11       	cpse	r24, r1
     4b4:	03 c0       	rjmp	.+6      	; 0x4bc <__vector_8+0x1a>
     4b6:	84 e0       	ldi	r24, 0x04	; 4
     4b8:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
}
     4bc:	8f 91       	pop	r24
     4be:	0f 90       	pop	r0
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	0f 90       	pop	r0
     4c4:	1f 90       	pop	r1
     4c6:	18 95       	reti

000004c8 <INTR_Init>:

void INTR_Init() {
	DDRD = 0x00;
     4c8:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xff;
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	82 bb       	out	0x12, r24	; 18
	
	EICRA = 0xff;		//하강엣지 트리거
     4ce:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = 0xff;
     4d2:	8a bf       	out	0x3a, r24	; 58
	EIMSK = 0xff;
     4d4:	89 bf       	out	0x39, r24	; 57
	
	DDRE = 0x08;
     4d6:	88 e0       	ldi	r24, 0x08	; 8
     4d8:	82 b9       	out	0x02, r24	; 2
	PORTE = 0xf7;
     4da:	87 ef       	ldi	r24, 0xF7	; 247
     4dc:	83 b9       	out	0x03, r24	; 3
	sei();
     4de:	78 94       	sei
     4e0:	08 95       	ret

000004e2 <tNum2>:
}


int tNum2(unsigned int NUM) {
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <tNum2+0x6>
     4e8:	1f 92       	push	r1
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	ac 01       	movw	r20, r24
	unsigned char Buff[3] = "0";
     4f0:	1b 82       	std	Y+3, r1	; 0x03
	Buff[0] = '0'+((NUM %100)/10);
     4f2:	9c 01       	movw	r18, r24
     4f4:	36 95       	lsr	r19
     4f6:	27 95       	ror	r18
     4f8:	36 95       	lsr	r19
     4fa:	27 95       	ror	r18
     4fc:	ab e7       	ldi	r26, 0x7B	; 123
     4fe:	b4 e1       	ldi	r27, 0x14	; 20
     500:	4d d6       	rcall	.+3226   	; 0x119c <__umulhisi3>
     502:	9c 01       	movw	r18, r24
     504:	36 95       	lsr	r19
     506:	27 95       	ror	r18
     508:	64 e6       	ldi	r22, 0x64	; 100
     50a:	62 9f       	mul	r22, r18
     50c:	c0 01       	movw	r24, r0
     50e:	63 9f       	mul	r22, r19
     510:	90 0d       	add	r25, r0
     512:	11 24       	eor	r1, r1
     514:	9a 01       	movw	r18, r20
     516:	28 1b       	sub	r18, r24
     518:	39 0b       	sbc	r19, r25
     51a:	ad ec       	ldi	r26, 0xCD	; 205
     51c:	bc ec       	ldi	r27, 0xCC	; 204
     51e:	3e d6       	rcall	.+3196   	; 0x119c <__umulhisi3>
     520:	96 95       	lsr	r25
     522:	87 95       	ror	r24
     524:	96 95       	lsr	r25
     526:	87 95       	ror	r24
     528:	96 95       	lsr	r25
     52a:	87 95       	ror	r24
     52c:	80 5d       	subi	r24, 0xD0	; 208
     52e:	89 83       	std	Y+1, r24	; 0x01
	Buff[1] = '0'+(NUM %10);
     530:	9a 01       	movw	r18, r20
     532:	34 d6       	rcall	.+3176   	; 0x119c <__umulhisi3>
     534:	96 95       	lsr	r25
     536:	87 95       	ror	r24
     538:	96 95       	lsr	r25
     53a:	87 95       	ror	r24
     53c:	96 95       	lsr	r25
     53e:	87 95       	ror	r24
     540:	9c 01       	movw	r18, r24
     542:	22 0f       	add	r18, r18
     544:	33 1f       	adc	r19, r19
     546:	88 0f       	add	r24, r24
     548:	99 1f       	adc	r25, r25
     54a:	88 0f       	add	r24, r24
     54c:	99 1f       	adc	r25, r25
     54e:	88 0f       	add	r24, r24
     550:	99 1f       	adc	r25, r25
     552:	82 0f       	add	r24, r18
     554:	93 1f       	adc	r25, r19
     556:	9a 01       	movw	r18, r20
     558:	28 1b       	sub	r18, r24
     55a:	39 0b       	sbc	r19, r25
     55c:	c9 01       	movw	r24, r18
     55e:	80 5d       	subi	r24, 0xD0	; 208
     560:	8a 83       	std	Y+2, r24	; 0x02
	LCDPuts(Buff);
     562:	ce 01       	movw	r24, r28
     564:	01 96       	adiw	r24, 0x01	; 1
     566:	29 de       	rcall	.-942    	; 0x1ba <LCDPuts>
     568:	0f 90       	pop	r0
}
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	08 95       	ret

00000574 <tNum3>:
     574:	cf 93       	push	r28
int tNum3(unsigned int NUM) {
     576:	df 93       	push	r29
     578:	00 d0       	rcall	.+0      	; 0x57a <tNum3+0x6>
     57a:	00 d0       	rcall	.+0      	; 0x57c <tNum3+0x8>
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	ac 01       	movw	r20, r24
	unsigned char Buff[4] = "0";
     582:	1c 82       	std	Y+4, r1	; 0x04
     584:	1b 82       	std	Y+3, r1	; 0x03
	Buff[0] = '0'+((NUM %1000)/100);
     586:	9c 01       	movw	r18, r24
     588:	36 95       	lsr	r19
     58a:	27 95       	ror	r18
     58c:	36 95       	lsr	r19
     58e:	27 95       	ror	r18
     590:	36 95       	lsr	r19
     592:	27 95       	ror	r18
     594:	a5 ec       	ldi	r26, 0xC5	; 197
     596:	b0 e2       	ldi	r27, 0x20	; 32
     598:	01 d6       	rcall	.+3074   	; 0x119c <__umulhisi3>
     59a:	92 95       	swap	r25
     59c:	82 95       	swap	r24
     59e:	8f 70       	andi	r24, 0x0F	; 15
     5a0:	89 27       	eor	r24, r25
     5a2:	9f 70       	andi	r25, 0x0F	; 15
     5a4:	89 27       	eor	r24, r25
     5a6:	68 ee       	ldi	r22, 0xE8	; 232
     5a8:	73 e0       	ldi	r23, 0x03	; 3
     5aa:	86 9f       	mul	r24, r22
     5ac:	90 01       	movw	r18, r0
     5ae:	87 9f       	mul	r24, r23
     5b0:	30 0d       	add	r19, r0
     5b2:	96 9f       	mul	r25, r22
     5b4:	30 0d       	add	r19, r0
     5b6:	11 24       	eor	r1, r1
     5b8:	ca 01       	movw	r24, r20
     5ba:	82 1b       	sub	r24, r18
     5bc:	93 0b       	sbc	r25, r19
     5be:	9c 01       	movw	r18, r24
     5c0:	36 95       	lsr	r19
     5c2:	27 95       	ror	r18
     5c4:	36 95       	lsr	r19
     5c6:	27 95       	ror	r18
     5c8:	ab e7       	ldi	r26, 0x7B	; 123
     5ca:	b4 e1       	ldi	r27, 0x14	; 20
     5cc:	e7 d5       	rcall	.+3022   	; 0x119c <__umulhisi3>
     5ce:	96 95       	lsr	r25
     5d0:	87 95       	ror	r24
     5d2:	80 5d       	subi	r24, 0xD0	; 208
     5d4:	89 83       	std	Y+1, r24	; 0x01
	Buff[1] = '0'+((NUM %100)/10);
     5d6:	9a 01       	movw	r18, r20
     5d8:	36 95       	lsr	r19
     5da:	27 95       	ror	r18
     5dc:	36 95       	lsr	r19
     5de:	27 95       	ror	r18
     5e0:	dd d5       	rcall	.+3002   	; 0x119c <__umulhisi3>
     5e2:	9c 01       	movw	r18, r24
     5e4:	36 95       	lsr	r19
     5e6:	27 95       	ror	r18
     5e8:	64 e6       	ldi	r22, 0x64	; 100
     5ea:	62 9f       	mul	r22, r18
     5ec:	c0 01       	movw	r24, r0
     5ee:	63 9f       	mul	r22, r19
     5f0:	90 0d       	add	r25, r0
     5f2:	11 24       	eor	r1, r1
     5f4:	9a 01       	movw	r18, r20
     5f6:	28 1b       	sub	r18, r24
     5f8:	39 0b       	sbc	r19, r25
     5fa:	ad ec       	ldi	r26, 0xCD	; 205
     5fc:	bc ec       	ldi	r27, 0xCC	; 204
     5fe:	ce d5       	rcall	.+2972   	; 0x119c <__umulhisi3>
     600:	96 95       	lsr	r25
     602:	87 95       	ror	r24
     604:	96 95       	lsr	r25
     606:	87 95       	ror	r24
     608:	96 95       	lsr	r25
     60a:	87 95       	ror	r24
     60c:	80 5d       	subi	r24, 0xD0	; 208
	Buff[2] = '0'+(NUM %10);
     60e:	8a 83       	std	Y+2, r24	; 0x02
     610:	9a 01       	movw	r18, r20
     612:	c4 d5       	rcall	.+2952   	; 0x119c <__umulhisi3>
     614:	96 95       	lsr	r25
     616:	87 95       	ror	r24
     618:	96 95       	lsr	r25
     61a:	87 95       	ror	r24
     61c:	96 95       	lsr	r25
     61e:	87 95       	ror	r24
     620:	9c 01       	movw	r18, r24
     622:	22 0f       	add	r18, r18
     624:	33 1f       	adc	r19, r19
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	88 0f       	add	r24, r24
     630:	99 1f       	adc	r25, r25
     632:	82 0f       	add	r24, r18
     634:	93 1f       	adc	r25, r19
     636:	9a 01       	movw	r18, r20
     638:	28 1b       	sub	r18, r24
     63a:	39 0b       	sbc	r19, r25
     63c:	c9 01       	movw	r24, r18
     63e:	80 5d       	subi	r24, 0xD0	; 208
	LCDPuts(Buff);
     640:	8b 83       	std	Y+3, r24	; 0x03
     642:	ce 01       	movw	r24, r28
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	b9 dd       	rcall	.-1166   	; 0x1ba <LCDPuts>
}
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <Watch>:
int Watch(unsigned int y) {
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	cd b7       	in	r28, 0x3d	; 61
     65c:	de b7       	in	r29, 0x3e	; 62
     65e:	2d 97       	sbiw	r28, 0x0d	; 13
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	f8 94       	cli
     664:	de bf       	out	0x3e, r29	; 62
     666:	0f be       	out	0x3f, r0	; 63
     668:	cd bf       	out	0x3d, r28	; 61
	LCDMove(y,0);
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	b2 dd       	rcall	.-1180   	; 0x1d2 <LCDMove>
	unsigned char wc[13] = "0";
     66e:	fe 01       	movw	r30, r28
     670:	33 96       	adiw	r30, 0x03	; 3
     672:	8b e0       	ldi	r24, 0x0B	; 11
     674:	df 01       	movw	r26, r30
     676:	1d 92       	st	X+, r1
     678:	8a 95       	dec	r24
     67a:	e9 f7       	brne	.-6      	; 0x676 <Watch+0x20>
	wc[0] = '0'+((h %100)/10);
     67c:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <h>
     680:	29 e2       	ldi	r18, 0x29	; 41
     682:	92 9f       	mul	r25, r18
     684:	81 2d       	mov	r24, r1
     686:	11 24       	eor	r1, r1
     688:	82 95       	swap	r24
     68a:	8f 70       	andi	r24, 0x0F	; 15
     68c:	44 e6       	ldi	r20, 0x64	; 100
     68e:	39 2f       	mov	r19, r25
     690:	84 9f       	mul	r24, r20
     692:	30 19       	sub	r19, r0
     694:	11 24       	eor	r1, r1
     696:	8d ec       	ldi	r24, 0xCD	; 205
     698:	38 9f       	mul	r19, r24
     69a:	31 2d       	mov	r19, r1
     69c:	11 24       	eor	r1, r1
     69e:	36 95       	lsr	r19
     6a0:	36 95       	lsr	r19
     6a2:	36 95       	lsr	r19
     6a4:	30 5d       	subi	r19, 0xD0	; 208
     6a6:	39 83       	std	Y+1, r19	; 0x01
	wc[1] = '0'+(h %10);
     6a8:	98 9f       	mul	r25, r24
     6aa:	31 2d       	mov	r19, r1
     6ac:	11 24       	eor	r1, r1
     6ae:	36 95       	lsr	r19
     6b0:	36 95       	lsr	r19
     6b2:	36 95       	lsr	r19
     6b4:	33 0f       	add	r19, r19
     6b6:	53 2f       	mov	r21, r19
     6b8:	55 0f       	add	r21, r21
     6ba:	55 0f       	add	r21, r21
     6bc:	35 0f       	add	r19, r21
     6be:	93 1b       	sub	r25, r19
     6c0:	90 5d       	subi	r25, 0xD0	; 208
     6c2:	9a 83       	std	Y+2, r25	; 0x02
	wc[2] = 'h';
     6c4:	98 e6       	ldi	r25, 0x68	; 104
     6c6:	9b 83       	std	Y+3, r25	; 0x03
	wc[3] = ' ';
     6c8:	60 e2       	ldi	r22, 0x20	; 32
     6ca:	6c 83       	std	Y+4, r22	; 0x04
	
	wc[4] = '0'+((m %100)/10);
     6cc:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <m>
     6d0:	92 9f       	mul	r25, r18
     6d2:	31 2d       	mov	r19, r1
     6d4:	11 24       	eor	r1, r1
     6d6:	32 95       	swap	r19
     6d8:	3f 70       	andi	r19, 0x0F	; 15
     6da:	b9 2f       	mov	r27, r25
     6dc:	34 9f       	mul	r19, r20
     6de:	b0 19       	sub	r27, r0
     6e0:	11 24       	eor	r1, r1
     6e2:	b8 9f       	mul	r27, r24
     6e4:	31 2d       	mov	r19, r1
     6e6:	11 24       	eor	r1, r1
     6e8:	36 95       	lsr	r19
     6ea:	36 95       	lsr	r19
     6ec:	36 95       	lsr	r19
     6ee:	30 5d       	subi	r19, 0xD0	; 208
     6f0:	3d 83       	std	Y+5, r19	; 0x05
	wc[5] = '0'+(m %10);
     6f2:	98 9f       	mul	r25, r24
     6f4:	31 2d       	mov	r19, r1
     6f6:	11 24       	eor	r1, r1
     6f8:	36 95       	lsr	r19
     6fa:	36 95       	lsr	r19
     6fc:	36 95       	lsr	r19
     6fe:	33 0f       	add	r19, r19
     700:	53 2f       	mov	r21, r19
     702:	55 0f       	add	r21, r21
     704:	55 0f       	add	r21, r21
     706:	35 0f       	add	r19, r21
     708:	93 1b       	sub	r25, r19
     70a:	90 5d       	subi	r25, 0xD0	; 208
     70c:	9e 83       	std	Y+6, r25	; 0x06
	wc[6] = 'm';
     70e:	9d e6       	ldi	r25, 0x6D	; 109
     710:	9f 83       	std	Y+7, r25	; 0x07
	wc[7] = ' ';
     712:	68 87       	std	Y+8, r22	; 0x08
	
	wc[8] = '0'+((s %100)/10);
     714:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <s>
     718:	92 9f       	mul	r25, r18
     71a:	21 2d       	mov	r18, r1
     71c:	11 24       	eor	r1, r1
     71e:	22 95       	swap	r18
     720:	2f 70       	andi	r18, 0x0F	; 15
     722:	39 2f       	mov	r19, r25
     724:	24 9f       	mul	r18, r20
     726:	30 19       	sub	r19, r0
     728:	11 24       	eor	r1, r1
     72a:	38 9f       	mul	r19, r24
     72c:	21 2d       	mov	r18, r1
     72e:	11 24       	eor	r1, r1
     730:	26 95       	lsr	r18
     732:	26 95       	lsr	r18
     734:	26 95       	lsr	r18
     736:	20 5d       	subi	r18, 0xD0	; 208
     738:	29 87       	std	Y+9, r18	; 0x09
	wc[9] = '0'+(s %10);
     73a:	98 9f       	mul	r25, r24
     73c:	81 2d       	mov	r24, r1
     73e:	11 24       	eor	r1, r1
     740:	86 95       	lsr	r24
     742:	86 95       	lsr	r24
     744:	86 95       	lsr	r24
     746:	88 0f       	add	r24, r24
     748:	28 2f       	mov	r18, r24
     74a:	22 0f       	add	r18, r18
     74c:	22 0f       	add	r18, r18
     74e:	82 0f       	add	r24, r18
     750:	98 1b       	sub	r25, r24
     752:	90 5d       	subi	r25, 0xD0	; 208
     754:	9a 87       	std	Y+10, r25	; 0x0a
	wc[10] = 's';
     756:	83 e7       	ldi	r24, 0x73	; 115
     758:	8b 87       	std	Y+11, r24	; 0x0b
	LCDPuts(wc);
     75a:	ce 01       	movw	r24, r28
     75c:	01 96       	adiw	r24, 0x01	; 1
     75e:	2d dd       	rcall	.-1446   	; 0x1ba <LCDPuts>
}
     760:	2d 96       	adiw	r28, 0x0d	; 13
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	de bf       	out	0x3e, r29	; 62
     768:	0f be       	out	0x3f, r0	; 63
     76a:	cd bf       	out	0x3d, r28	; 61
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <bz>:

int bz(unsigned int a, unsigned int b) {
     772:	8f 92       	push	r8
     774:	9f 92       	push	r9
     776:	af 92       	push	r10
     778:	bf 92       	push	r11
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	eb 01       	movw	r28, r22
	PORTG |= (1<<PG3);
     788:	e5 e6       	ldi	r30, 0x65	; 101
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	20 81       	ld	r18, Z
     78e:	28 60       	ori	r18, 0x08	; 8
     790:	20 83       	st	Z, r18
	_delay_ms(a);
     792:	bc 01       	movw	r22, r24
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	d5 d3       	rcall	.+1962   	; 0xf44 <__floatunsisf>
     79a:	4b 01       	movw	r8, r22
     79c:	5c 01       	movw	r10, r24

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	4a e7       	ldi	r20, 0x7A	; 122
     7a4:	55 e4       	ldi	r21, 0x45	; 69
     7a6:	5c d4       	rcall	.+2232   	; 0x1060 <__mulsf3>
     7a8:	6b 01       	movw	r12, r22
     7aa:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	40 e8       	ldi	r20, 0x80	; 128
     7b2:	5f e3       	ldi	r21, 0x3F	; 63
     7b4:	97 d3       	rcall	.+1838   	; 0xee4 <__cmpsf2>
     7b6:	88 23       	and	r24, r24
     7b8:	04 f1       	brlt	.+64     	; 0x7fa <bz+0x88>
		__ticks = 1;
	else if (__tmp > 65535)
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	3f ef       	ldi	r19, 0xFF	; 255
     7be:	4f e7       	ldi	r20, 0x7F	; 127
     7c0:	57 e4       	ldi	r21, 0x47	; 71
     7c2:	c7 01       	movw	r24, r14
     7c4:	b6 01       	movw	r22, r12
     7c6:	48 d4       	rcall	.+2192   	; 0x1058 <__gesf2>
     7c8:	18 16       	cp	r1, r24
     7ca:	9c f4       	brge	.+38     	; 0x7f2 <bz+0x80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	40 e2       	ldi	r20, 0x20	; 32
     7d2:	51 e4       	ldi	r21, 0x41	; 65
     7d4:	c5 01       	movw	r24, r10
     7d6:	b4 01       	movw	r22, r8
     7d8:	43 d4       	rcall	.+2182   	; 0x1060 <__mulsf3>
     7da:	88 d3       	rcall	.+1808   	; 0xeec <__fixunssfsi>
     7dc:	06 c0       	rjmp	.+12     	; 0x7ea <bz+0x78>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7de:	80 e9       	ldi	r24, 0x90	; 144
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	01 97       	sbiw	r24, 0x01	; 1
     7e4:	f1 f7       	brne	.-4      	; 0x7e2 <bz+0x70>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7e6:	61 50       	subi	r22, 0x01	; 1
     7e8:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7ea:	61 15       	cp	r22, r1
     7ec:	71 05       	cpc	r23, r1
     7ee:	b9 f7       	brne	.-18     	; 0x7de <bz+0x6c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7f0:	09 c0       	rjmp	.+18     	; 0x804 <bz+0x92>
     7f2:	c7 01       	movw	r24, r14
     7f4:	b6 01       	movw	r22, r12
     7f6:	7a d3       	rcall	.+1780   	; 0xeec <__fixunssfsi>
     7f8:	02 c0       	rjmp	.+4      	; 0x7fe <bz+0x8c>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     7fa:	61 e0       	ldi	r22, 0x01	; 1
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	cb 01       	movw	r24, r22
     800:	01 97       	sbiw	r24, 0x01	; 1
     802:	f1 f7       	brne	.-4      	; 0x800 <bz+0x8e>
	PORTG &= ~(1<<PG3);
     804:	e5 e6       	ldi	r30, 0x65	; 101
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	80 81       	ld	r24, Z
     80a:	87 7f       	andi	r24, 0xF7	; 247
	_delay_ms(b);
     80c:	80 83       	st	Z, r24
     80e:	be 01       	movw	r22, r28
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	97 d3       	rcall	.+1838   	; 0xf44 <__floatunsisf>
     816:	4b 01       	movw	r8, r22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     818:	5c 01       	movw	r10, r24
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	4a e7       	ldi	r20, 0x7A	; 122
     820:	55 e4       	ldi	r21, 0x45	; 69
     822:	1e d4       	rcall	.+2108   	; 0x1060 <__mulsf3>
     824:	6b 01       	movw	r12, r22
	if (__tmp < 1.0)
     826:	7c 01       	movw	r14, r24
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	40 e8       	ldi	r20, 0x80	; 128
     82e:	5f e3       	ldi	r21, 0x3F	; 63
     830:	59 d3       	rcall	.+1714   	; 0xee4 <__cmpsf2>
     832:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
     834:	04 f1       	brlt	.+64     	; 0x876 <bz+0x104>
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	3f ef       	ldi	r19, 0xFF	; 255
     83a:	4f e7       	ldi	r20, 0x7F	; 127
     83c:	57 e4       	ldi	r21, 0x47	; 71
     83e:	c7 01       	movw	r24, r14
     840:	b6 01       	movw	r22, r12
     842:	0a d4       	rcall	.+2068   	; 0x1058 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     844:	18 16       	cp	r1, r24
     846:	9c f4       	brge	.+38     	; 0x86e <bz+0xfc>
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	40 e2       	ldi	r20, 0x20	; 32
     84e:	51 e4       	ldi	r21, 0x41	; 65
     850:	c5 01       	movw	r24, r10
     852:	b4 01       	movw	r22, r8
     854:	05 d4       	rcall	.+2058   	; 0x1060 <__mulsf3>
     856:	4a d3       	rcall	.+1684   	; 0xeec <__fixunssfsi>
     858:	06 c0       	rjmp	.+12     	; 0x866 <bz+0xf4>
     85a:	80 e9       	ldi	r24, 0x90	; 144
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     860:	f1 f7       	brne	.-4      	; 0x85e <bz+0xec>
     862:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     864:	71 09       	sbc	r23, r1
     866:	61 15       	cp	r22, r1
     868:	71 05       	cpc	r23, r1
     86a:	b9 f7       	brne	.-18     	; 0x85a <bz+0xe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     86c:	09 c0       	rjmp	.+18     	; 0x880 <bz+0x10e>
     86e:	c7 01       	movw	r24, r14
     870:	b6 01       	movw	r22, r12
     872:	3c d3       	rcall	.+1656   	; 0xeec <__fixunssfsi>
     874:	02 c0       	rjmp	.+4      	; 0x87a <bz+0x108>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	cb 01       	movw	r24, r22
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	f1 f7       	brne	.-4      	; 0x87c <bz+0x10a>
}
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	df 90       	pop	r13
     88a:	cf 90       	pop	r12
     88c:	bf 90       	pop	r11
     88e:	af 90       	pop	r10
     890:	9f 90       	pop	r9
     892:	8f 90       	pop	r8
     894:	08 95       	ret

00000896 <main>:

int main(void){
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
     89e:	2e 97       	sbiw	r28, 0x0e	; 14
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xf0;
     8aa:	80 ef       	ldi	r24, 0xF0	; 240
     8ac:	87 bb       	out	0x17, r24	; 23
	DDRG |= (1<<PG3);
     8ae:	e4 e6       	ldi	r30, 0x64	; 100
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	80 81       	ld	r24, Z
     8b4:	88 60       	ori	r24, 0x08	; 8
     8b6:	80 83       	st	Z, r24
	MCU_Init();
     8b8:	26 dc       	rcall	.-1972   	; 0x106 <MCU_Init>
	LCDInit();
     8ba:	4c dc       	rcall	.-1896   	; 0x154 <LCDInit>
     8bc:	15 e0       	ldi	r17, 0x05	; 5
	
	// 시간 설정
	static char string1[]="set location";
	static char string8[]="set Watch       ";
	
	unsigned char next = 5;
     8be:	15 30       	cpi	r17, 0x05	; 5
	while (1) {
		// 화면
		if (next == 5) {
     8c0:	71 f4       	brne	.+28     	; 0x8de <main+0x48>
     8c2:	60 e0       	ldi	r22, 0x00	; 0
			LCDMove(0,0);
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	85 dc       	rcall	.-1782   	; 0x1d2 <LCDMove>
     8c8:	83 e5       	ldi	r24, 0x53	; 83
			LCDPuts(string1);
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	76 dc       	rcall	.-1812   	; 0x1ba <LCDPuts>
     8ce:	60 e0       	ldi	r22, 0x00	; 0
			LCDMove(1,0);
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	7f dc       	rcall	.-1794   	; 0x1d2 <LCDMove>
     8d4:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <l>
			tNum3(l);
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	4c de       	rcall	.-872    	; 0x574 <tNum3>
     8dc:	31 c0       	rjmp	.+98     	; 0x940 <main+0xaa>
     8de:	60 e0       	ldi	r22, 0x00	; 0
		}
		else {
			LCDMove(0,0);
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	77 dc       	rcall	.-1810   	; 0x1d2 <LCDMove>
     8e4:	12 30       	cpi	r17, 0x02	; 2
     8e6:	48 f4       	brcc	.+18     	; 0x8fa <main+0x64>
			if (next > 1) {
     8e8:	1b c0       	rjmp	.+54     	; 0x920 <main+0x8a>
     8ea:	e8 2f       	mov	r30, r24
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
				for (char a = 12 ; a < 15 ; a++) {string8[a] = ' ';}
     8ee:	ee 5b       	subi	r30, 0xBE	; 190
     8f0:	fe 4f       	sbci	r31, 0xFE	; 254
     8f2:	90 e2       	ldi	r25, 0x20	; 32
     8f4:	90 83       	st	Z, r25
     8f6:	8f 5f       	subi	r24, 0xFF	; 255
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <main+0x66>
     8fa:	8c e0       	ldi	r24, 0x0C	; 12
     8fc:	8f 30       	cpi	r24, 0x0F	; 15
     8fe:	a8 f3       	brcs	.-22     	; 0x8ea <main+0x54>
     900:	14 30       	cpi	r17, 0x04	; 4
     902:	21 f4       	brne	.+8      	; 0x90c <main+0x76>
				if (next == 4) {string8[15] = 'h';}
     904:	88 e6       	ldi	r24, 0x68	; 104
     906:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <string8.1839+0xf>
     90a:	14 c0       	rjmp	.+40     	; 0x934 <main+0x9e>
     90c:	13 30       	cpi	r17, 0x03	; 3
     90e:	21 f4       	brne	.+8      	; 0x918 <main+0x82>
				else if (next == 3) {string8[15] = 'm';}
     910:	8d e6       	ldi	r24, 0x6D	; 109
     912:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <string8.1839+0xf>
     916:	0e c0       	rjmp	.+28     	; 0x934 <main+0x9e>
     918:	83 e7       	ldi	r24, 0x73	; 115
     91a:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <string8.1839+0xf>
				else {string8[15] = 's';}
     91e:	0a c0       	rjmp	.+20     	; 0x934 <main+0x9e>
     920:	e2 e4       	ldi	r30, 0x42	; 66
     922:	f1 e0       	ldi	r31, 0x01	; 1
			}
			else {
				string8[12] = 'n';
     924:	8e e6       	ldi	r24, 0x6E	; 110
     926:	84 87       	std	Z+12, r24	; 0x0c
     928:	85 e6       	ldi	r24, 0x65	; 101
     92a:	85 87       	std	Z+13, r24	; 0x0d
				string8[13] = 'e';
     92c:	88 e7       	ldi	r24, 0x78	; 120
				string8[14] = 'x';
     92e:	86 87       	std	Z+14, r24	; 0x0e
     930:	84 e7       	ldi	r24, 0x74	; 116
				string8[15] = 't';
     932:	87 87       	std	Z+15, r24	; 0x0f
			}
			LCDPuts(string8);
     934:	82 e4       	ldi	r24, 0x42	; 66
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	40 dc       	rcall	.-1920   	; 0x1ba <LCDPuts>
     93a:	81 e0       	ldi	r24, 0x01	; 1
			Watch(1);
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	8b de       	rcall	.-746    	; 0x656 <Watch>
     940:	86 b3       	in	r24, 0x16	; 22
     942:	8e 30       	cpi	r24, 0x0E	; 14
		}
		
		// 버튼
		if (PINB == 14) {
     944:	71 f5       	brne	.+92     	; 0x9a2 <main+0x10c>
     946:	15 30       	cpi	r17, 0x05	; 5
     948:	39 f4       	brne	.+14     	; 0x958 <main+0xc2>
			if (next == 5 && l != 0) {l--;}
     94a:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <l>
     94e:	88 23       	and	r24, r24
     950:	19 f0       	breq	.+6      	; 0x958 <main+0xc2>
     952:	81 50       	subi	r24, 0x01	; 1
     954:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <l>
     958:	14 30       	cpi	r17, 0x04	; 4
     95a:	39 f4       	brne	.+14     	; 0x96a <main+0xd4>
			if (next == 4 && h != 0) {h--;}
     95c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <h>
     960:	88 23       	and	r24, r24
     962:	19 f0       	breq	.+6      	; 0x96a <main+0xd4>
     964:	81 50       	subi	r24, 0x01	; 1
     966:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <h>
     96a:	13 30       	cpi	r17, 0x03	; 3
     96c:	39 f4       	brne	.+14     	; 0x97c <main+0xe6>
			if (next == 3 && m != 0) {m--;}
     96e:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <m>
     972:	88 23       	and	r24, r24
     974:	19 f0       	breq	.+6      	; 0x97c <main+0xe6>
     976:	81 50       	subi	r24, 0x01	; 1
     978:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <m>
     97c:	12 30       	cpi	r17, 0x02	; 2
     97e:	39 f4       	brne	.+14     	; 0x98e <main+0xf8>
			if (next == 2 && s != 0) {s--;}
     980:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <s>
     984:	88 23       	and	r24, r24
     986:	19 f0       	breq	.+6      	; 0x98e <main+0xf8>
     988:	81 50       	subi	r24, 0x01	; 1
     98a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <s>
     98e:	80 ed       	ldi	r24, 0xD0	; 208
     990:	97 e0       	ldi	r25, 0x07	; 7
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     992:	05 c0       	rjmp	.+10     	; 0x99e <main+0x108>
     994:	e0 e9       	ldi	r30, 0x90	; 144
     996:	f1 e0       	ldi	r31, 0x01	; 1
     998:	31 97       	sbiw	r30, 0x01	; 1
     99a:	f1 f7       	brne	.-4      	; 0x998 <main+0x102>
     99c:	01 97       	sbiw	r24, 0x01	; 1
     99e:	00 97       	sbiw	r24, 0x00	; 0
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9a0:	c9 f7       	brne	.-14     	; 0x994 <main+0xfe>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9a2:	86 b3       	in	r24, 0x16	; 22
     9a4:	8d 30       	cpi	r24, 0x0D	; 13
			_delay_ms(200);
		}
		if (PINB == 13) {
     9a6:	71 f5       	brne	.+92     	; 0xa04 <main+0x16e>
     9a8:	15 30       	cpi	r17, 0x05	; 5
     9aa:	39 f4       	brne	.+14     	; 0x9ba <main+0x124>
			if (next == 5 && l != 255) {l++;}
     9ac:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <l>
     9b0:	8f 3f       	cpi	r24, 0xFF	; 255
     9b2:	19 f0       	breq	.+6      	; 0x9ba <main+0x124>
     9b4:	8f 5f       	subi	r24, 0xFF	; 255
     9b6:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <l>
     9ba:	14 30       	cpi	r17, 0x04	; 4
     9bc:	39 f4       	brne	.+14     	; 0x9cc <main+0x136>
			if (next == 4 && h != 23) {h++;}
     9be:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <h>
     9c2:	87 31       	cpi	r24, 0x17	; 23
     9c4:	19 f0       	breq	.+6      	; 0x9cc <main+0x136>
     9c6:	8f 5f       	subi	r24, 0xFF	; 255
     9c8:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <h>
     9cc:	13 30       	cpi	r17, 0x03	; 3
     9ce:	39 f4       	brne	.+14     	; 0x9de <main+0x148>
			if (next == 3 && m != 59) {m++;}
     9d0:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <m>
     9d4:	8b 33       	cpi	r24, 0x3B	; 59
     9d6:	19 f0       	breq	.+6      	; 0x9de <main+0x148>
     9d8:	8f 5f       	subi	r24, 0xFF	; 255
     9da:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <m>
     9de:	12 30       	cpi	r17, 0x02	; 2
     9e0:	39 f4       	brne	.+14     	; 0x9f0 <main+0x15a>
			if (next == 2 && s != 59) {s++;}
     9e2:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <s>
     9e6:	8b 33       	cpi	r24, 0x3B	; 59
     9e8:	19 f0       	breq	.+6      	; 0x9f0 <main+0x15a>
     9ea:	8f 5f       	subi	r24, 0xFF	; 255
     9ec:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <s>
     9f0:	80 ed       	ldi	r24, 0xD0	; 208
     9f2:	97 e0       	ldi	r25, 0x07	; 7
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9f4:	05 c0       	rjmp	.+10     	; 0xa00 <main+0x16a>
     9f6:	e0 e9       	ldi	r30, 0x90	; 144
     9f8:	f1 e0       	ldi	r31, 0x01	; 1
     9fa:	31 97       	sbiw	r30, 0x01	; 1
     9fc:	f1 f7       	brne	.-4      	; 0x9fa <main+0x164>
     9fe:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a00:	00 97       	sbiw	r24, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a02:	c9 f7       	brne	.-14     	; 0x9f6 <main+0x160>
     a04:	86 b3       	in	r24, 0x16	; 22
			_delay_ms(200);
		}
		if (PINB == 11 && next != 5) {
     a06:	8b 30       	cpi	r24, 0x0B	; 11
     a08:	71 f4       	brne	.+28     	; 0xa26 <main+0x190>
     a0a:	15 30       	cpi	r17, 0x05	; 5
     a0c:	61 f0       	breq	.+24     	; 0xa26 <main+0x190>
     a0e:	a2 db       	rcall	.-2236   	; 0x154 <LCDInit>
			LCDInit();
     a10:	1f 5f       	subi	r17, 0xFF	; 255
     a12:	80 ed       	ldi	r24, 0xD0	; 208
			next ++;
     a14:	97 e0       	ldi	r25, 0x07	; 7
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a16:	05 c0       	rjmp	.+10     	; 0xa22 <main+0x18c>
     a18:	e0 e9       	ldi	r30, 0x90	; 144
     a1a:	f1 e0       	ldi	r31, 0x01	; 1
     a1c:	31 97       	sbiw	r30, 0x01	; 1
     a1e:	f1 f7       	brne	.-4      	; 0xa1c <main+0x186>
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	00 97       	sbiw	r24, 0x00	; 0
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a24:	c9 f7       	brne	.-14     	; 0xa18 <main+0x182>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a26:	86 b3       	in	r24, 0x16	; 22
     a28:	87 30       	cpi	r24, 0x07	; 7
			_delay_ms(200);
		}
		if (PINB == 7) {
     a2a:	09 f0       	breq	.+2      	; 0xa2e <main+0x198>
     a2c:	48 cf       	rjmp	.-368    	; 0x8be <main+0x28>
     a2e:	11 50       	subi	r17, 0x01	; 1
     a30:	59 f0       	breq	.+22     	; 0xa48 <main+0x1b2>
			next --;
     a32:	80 ed       	ldi	r24, 0xD0	; 208
			if(next == 0){
     a34:	97 e0       	ldi	r25, 0x07	; 7
     a36:	05 c0       	rjmp	.+10     	; 0xa42 <main+0x1ac>
     a38:	e0 e9       	ldi	r30, 0x90	; 144
     a3a:	f1 e0       	ldi	r31, 0x01	; 1
     a3c:	31 97       	sbiw	r30, 0x01	; 1
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <main+0x1a6>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	00 97       	sbiw	r24, 0x00	; 0
     a44:	c9 f7       	brne	.-14     	; 0xa38 <main+0x1a2>
				break;
			}
			_delay_ms(200);
		}
	}
	time_Init();
     a46:	3b cf       	rjmp	.-394    	; 0x8be <main+0x28>
	measurement_time_Init();
     a48:	95 dc       	rcall	.-1750   	; 0x374 <time_Init>
	INTR_Init();
     a4a:	30 dc       	rcall	.-1952   	; 0x2ac <measurement_time_Init>
     a4c:	3d dd       	rcall	.-1414   	; 0x4c8 <INTR_Init>
	LCDInit();
     a4e:	82 db       	rcall	.-2300   	; 0x154 <LCDInit>
     a50:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <l>
	
	static char string2[]="location : 000  ";
	string2[11] = '0'+((l %1000)/100);
     a54:	82 2f       	mov	r24, r18
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	68 ee       	ldi	r22, 0xE8	; 232
     a5a:	73 e0       	ldi	r23, 0x03	; 3
     a5c:	8c d3       	rcall	.+1816   	; 0x1176 <__divmodhi4>
     a5e:	64 e6       	ldi	r22, 0x64	; 100
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	89 d3       	rcall	.+1810   	; 0x1176 <__divmodhi4>
     a64:	e1 e3       	ldi	r30, 0x31	; 49
     a66:	f1 e0       	ldi	r31, 0x01	; 1
     a68:	80 e3       	ldi	r24, 0x30	; 48
     a6a:	86 0f       	add	r24, r22
     a6c:	83 87       	std	Z+11, r24	; 0x0b
     a6e:	89 e2       	ldi	r24, 0x29	; 41
     a70:	28 9f       	mul	r18, r24
     a72:	81 2d       	mov	r24, r1
	string2[12] = '0'+((l %100)/10);
     a74:	11 24       	eor	r1, r1
     a76:	82 95       	swap	r24
     a78:	8f 70       	andi	r24, 0x0F	; 15
     a7a:	92 2f       	mov	r25, r18
     a7c:	34 e6       	ldi	r19, 0x64	; 100
     a7e:	83 9f       	mul	r24, r19
     a80:	90 19       	sub	r25, r0
     a82:	11 24       	eor	r1, r1
     a84:	8d ec       	ldi	r24, 0xCD	; 205
     a86:	98 9f       	mul	r25, r24
     a88:	91 2d       	mov	r25, r1
     a8a:	11 24       	eor	r1, r1
     a8c:	96 95       	lsr	r25
     a8e:	96 95       	lsr	r25
     a90:	96 95       	lsr	r25
     a92:	90 5d       	subi	r25, 0xD0	; 208
     a94:	94 87       	std	Z+12, r25	; 0x0c
     a96:	28 9f       	mul	r18, r24
     a98:	81 2d       	mov	r24, r1
     a9a:	11 24       	eor	r1, r1
	string2[13] = '0'+(l %10);
     a9c:	86 95       	lsr	r24
     a9e:	86 95       	lsr	r24
     aa0:	86 95       	lsr	r24
     aa2:	88 0f       	add	r24, r24
     aa4:	98 2f       	mov	r25, r24
     aa6:	99 0f       	add	r25, r25
     aa8:	99 0f       	add	r25, r25
     aaa:	89 0f       	add	r24, r25
     aac:	28 1b       	sub	r18, r24
     aae:	82 2f       	mov	r24, r18
     ab0:	80 5d       	subi	r24, 0xD0	; 208
     ab2:	85 87       	std	Z+13, r24	; 0x0d
     ab4:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__data_end>
     ab8:	00 e0       	ldi	r16, 0x00	; 0
	ckd = 0;
     aba:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <measurement>
	
	// main
	unsigned char disp = 0;
     abe:	81 30       	cpi	r24, 0x01	; 1
	while(1){
		// 초음파 측정
		if (measurement == 1) {
     ac0:	09 f0       	breq	.+2      	; 0xac4 <main+0x22e>
     ac2:	75 c0       	rjmp	.+234    	; 0xbae <main+0x318>
     ac4:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <check>
     ac8:	87 e0       	ldi	r24, 0x07	; 7
			check = 0;
     aca:	83 bf       	out	0x33, r24	; 51
     acc:	83 b1       	in	r24, 0x03	; 3
			TCCR0 = 7;
     ace:	88 60       	ori	r24, 0x08	; 8
     ad0:	83 b9       	out	0x03, r24	; 3
			
			PORTE |= (1<<TRIG);
     ad2:	85 e3       	ldi	r24, 0x35	; 53
     ad4:	8a 95       	dec	r24
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <main+0x23e>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ad8:	83 b1       	in	r24, 0x03	; 3
     ada:	87 7f       	andi	r24, 0xF7	; 247
     adc:	83 b9       	out	0x03, r24	; 3
			_delay_us(10);
			PORTE &= ~(1<<TRIG);
     ade:	08 9b       	sbis	0x01, 0	; 1
     ae0:	fe cf       	rjmp	.-4      	; 0xade <main+0x248>
     ae2:	12 be       	out	0x32, r1	; 50
			
			while (!(PINE & (1<<0))) {}
     ae4:	54 c0       	rjmp	.+168    	; 0xb8e <main+0x2f8>
     ae6:	81 b1       	in	r24, 0x01	; 1
			TCNT0 = 0;
			
			while (TCNT0 < ((interval + 50) / 10.88)){
     ae8:	90 e0       	ldi	r25, 0x00	; 0
				for (char a = 0 ; a < 3; a++) {
					if (PINE & (1<<a)) {
     aea:	01 2e       	mov	r0, r17
     aec:	02 c0       	rjmp	.+4      	; 0xaf2 <main+0x25c>
     aee:	95 95       	asr	r25
     af0:	87 95       	ror	r24
     af2:	0a 94       	dec	r0
     af4:	e2 f7       	brpl	.-8      	; 0xaee <main+0x258>
     af6:	80 ff       	sbrs	r24, 0
     af8:	19 c0       	rjmp	.+50     	; 0xb2c <main+0x296>
     afa:	62 b7       	in	r22, 0x32	; 50
						if (TCNT0 > ((interval) / 10.88)) {
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	22 d2       	rcall	.+1092   	; 0xf48 <__floatsisf>
     b04:	2d e2       	ldi	r18, 0x2D	; 45
     b06:	3d ea       	ldi	r19, 0xAD	; 173
     b08:	40 e8       	ldi	r20, 0x80	; 128
     b0a:	52 e4       	ldi	r21, 0x42	; 66
     b0c:	a5 d2       	rcall	.+1354   	; 0x1058 <__gesf2>
     b0e:	18 16       	cp	r1, r24
     b10:	6c f4       	brge	.+26     	; 0xb2c <main+0x296>
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	01 2e       	mov	r0, r17
							check |= (1 << a);
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <main+0x288>
     b1a:	88 0f       	add	r24, r24
     b1c:	99 1f       	adc	r25, r25
     b1e:	0a 94       	dec	r0
     b20:	e2 f7       	brpl	.-8      	; 0xb1a <main+0x284>
     b22:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <check>
     b26:	89 2b       	or	r24, r25
     b28:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <check>
     b2c:	1f 5f       	subi	r17, 0xFF	; 255
     b2e:	01 c0       	rjmp	.+2      	; 0xb32 <main+0x29c>
     b30:	10 e0       	ldi	r17, 0x00	; 0
			
			while (!(PINE & (1<<0))) {}
			TCNT0 = 0;
			
			while (TCNT0 < ((interval + 50) / 10.88)){
				for (char a = 0 ; a < 3; a++) {
     b32:	13 30       	cpi	r17, 0x03	; 3
     b34:	c0 f2       	brcs	.-80     	; 0xae6 <main+0x250>
     b36:	14 e0       	ldi	r17, 0x04	; 4
     b38:	28 c0       	rjmp	.+80     	; 0xb8a <main+0x2f4>
     b3a:	80 b3       	in	r24, 0x10	; 16
     b3c:	e1 2e       	mov	r14, r17
							check |= (1 << a);
						}
					}
				}
				for (char a = 4 ; a < 8; a++) {
					if (PIND & (1<<a)) {
     b3e:	f1 2c       	mov	r15, r1
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	01 2e       	mov	r0, r17
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <main+0x2b4>
     b46:	95 95       	asr	r25
     b48:	87 95       	ror	r24
     b4a:	0a 94       	dec	r0
     b4c:	e2 f7       	brpl	.-8      	; 0xb46 <main+0x2b0>
     b4e:	80 ff       	sbrs	r24, 0
     b50:	1b c0       	rjmp	.+54     	; 0xb88 <main+0x2f2>
     b52:	62 b7       	in	r22, 0x32	; 50
						if (TCNT0 > ((interval) / 10.88)) {
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	f6 d1       	rcall	.+1004   	; 0xf48 <__floatsisf>
     b5c:	2d e2       	ldi	r18, 0x2D	; 45
     b5e:	3d ea       	ldi	r19, 0xAD	; 173
     b60:	40 e8       	ldi	r20, 0x80	; 128
     b62:	52 e4       	ldi	r21, 0x42	; 66
     b64:	79 d2       	rcall	.+1266   	; 0x1058 <__gesf2>
     b66:	18 16       	cp	r1, r24
     b68:	7c f4       	brge	.+30     	; 0xb88 <main+0x2f2>
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	e8 1a       	sub	r14, r24
     b6e:	f1 08       	sbc	r15, r1
							check |= (1 << a - 1);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <main+0x2e4>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	ea 94       	dec	r14
     b7c:	e2 f7       	brpl	.-8      	; 0xb76 <main+0x2e0>
     b7e:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <check>
     b82:	89 2b       	or	r24, r25
     b84:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <check>
     b88:	1f 5f       	subi	r17, 0xFF	; 255
						if (TCNT0 > ((interval) / 10.88)) {
							check |= (1 << a);
						}
					}
				}
				for (char a = 4 ; a < 8; a++) {
     b8a:	18 30       	cpi	r17, 0x08	; 8
     b8c:	b0 f2       	brcs	.-84     	; 0xb3a <main+0x2a4>
     b8e:	62 b7       	in	r22, 0x32	; 50
			PORTE &= ~(1<<TRIG);
			
			while (!(PINE & (1<<0))) {}
			TCNT0 = 0;
			
			while (TCNT0 < ((interval + 50) / 10.88)){
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	d8 d1       	rcall	.+944    	; 0xf48 <__floatsisf>
     b98:	2e e1       	ldi	r18, 0x1E	; 30
     b9a:	3e ed       	ldi	r19, 0xDE	; 222
     b9c:	49 e8       	ldi	r20, 0x89	; 137
     b9e:	52 e4       	ldi	r21, 0x42	; 66
     ba0:	a1 d1       	rcall	.+834    	; 0xee4 <__cmpsf2>
     ba2:	88 23       	and	r24, r24
     ba4:	0c f4       	brge	.+2      	; 0xba8 <main+0x312>
     ba6:	c4 cf       	rjmp	.-120    	; 0xb30 <main+0x29a>
     ba8:	13 be       	out	0x33, r1	; 51
     baa:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <measurement>
							check |= (1 << a - 1);
						}
					}
				}
			}
			TCCR0 = 0;
     bae:	80 e0       	ldi	r24, 0x00	; 0
			measurement = 0;
     bb0:	cc 24       	eor	r12, r12
     bb2:	c3 94       	inc	r12
		}
		
		// 전면 센서 작동
		int largest = 1, secondLargest = 1;
		for (char a = 0; a < 7 ; a++) {
     bb4:	d1 2c       	mov	r13, r1
			TCCR0 = 0;
			measurement = 0;
		}
		
		// 전면 센서 작동
		int largest = 1, secondLargest = 1;
     bb6:	ee 24       	eor	r14, r14
     bb8:	e3 94       	inc	r14
     bba:	f1 2c       	mov	r15, r1
     bbc:	16 c0       	rjmp	.+44     	; 0xbea <main+0x354>
     bbe:	e8 2f       	mov	r30, r24
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
		for (char a = 0; a < 7 ; a++) {
     bc2:	ee 0f       	add	r30, r30
			if (front[a] >= largest) {
     bc4:	ff 1f       	adc	r31, r31
     bc6:	ed 58       	subi	r30, 0x8D	; 141
     bc8:	fe 4f       	sbci	r31, 0xFE	; 254
     bca:	20 81       	ld	r18, Z
     bcc:	31 81       	ldd	r19, Z+1	; 0x01
     bce:	2e 15       	cp	r18, r14
     bd0:	3f 05       	cpc	r19, r15
     bd2:	18 f0       	brcs	.+6      	; 0xbda <main+0x344>
     bd4:	67 01       	movw	r12, r14
     bd6:	79 01       	movw	r14, r18
     bd8:	07 c0       	rjmp	.+14     	; 0xbe8 <main+0x352>
				secondLargest = largest;
     bda:	c2 16       	cp	r12, r18
				largest = front[a];
     bdc:	d3 06       	cpc	r13, r19
     bde:	20 f4       	brcc	.+8      	; 0xbe8 <main+0x352>
			}
			else if (front[a] > secondLargest && front[a] < largest) {
     be0:	2e 15       	cp	r18, r14
     be2:	3f 05       	cpc	r19, r15
     be4:	08 f4       	brcc	.+2      	; 0xbe8 <main+0x352>
     be6:	69 01       	movw	r12, r18
     be8:	8f 5f       	subi	r24, 0xFF	; 255
     bea:	87 30       	cpi	r24, 0x07	; 7
				secondLargest = front[a];
     bec:	40 f3       	brcs	.-48     	; 0xbbe <main+0x328>
			measurement = 0;
		}
		
		// 전면 센서 작동
		int largest = 1, secondLargest = 1;
		for (char a = 0; a < 7 ; a++) {
     bee:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <h>
     bf2:	87 50       	subi	r24, 0x07	; 7
			}
			else if (front[a] > secondLargest && front[a] < largest) {
				secondLargest = front[a];
			}
		}
		if ((h >= 19) || (h < 7)) {
     bf4:	8c 30       	cpi	r24, 0x0C	; 12
     bf6:	68 f0       	brcs	.+26     	; 0xc12 <main+0x37c>
     bf8:	25 e1       	ldi	r18, 0x15	; 21
     bfa:	e2 16       	cp	r14, r18
     bfc:	f1 04       	cpc	r15, r1
			if ((largest > night_period) && secondLargest < person) {
     bfe:	3c f0       	brlt	.+14     	; 0xc0e <main+0x378>
     c00:	3a e0       	ldi	r19, 0x0A	; 10
     c02:	c3 16       	cp	r12, r19
     c04:	d1 04       	cpc	r13, r1
     c06:	1c f4       	brge	.+6      	; 0xc0e <main+0x378>
     c08:	80 ef       	ldi	r24, 0xF0	; 240
     c0a:	88 bb       	out	0x18, r24	; 24
     c0c:	53 c0       	rjmp	.+166    	; 0xcb4 <main+0x41e>
				PORTB = 0xf0;
     c0e:	18 ba       	out	0x18, r1	; 24
     c10:	51 c0       	rjmp	.+162    	; 0xcb4 <main+0x41e>
     c12:	8f e1       	ldi	r24, 0x1F	; 31
			}
			else {PORTB = 0x00;}
     c14:	e8 16       	cp	r14, r24
     c16:	f1 04       	cpc	r15, r1
		}
		else {
			if ((largest > daytime_period) && secondLargest < person) {
     c18:	3c f0       	brlt	.+14     	; 0xc28 <main+0x392>
     c1a:	2a e0       	ldi	r18, 0x0A	; 10
     c1c:	c2 16       	cp	r12, r18
     c1e:	d1 04       	cpc	r13, r1
     c20:	1c f4       	brge	.+6      	; 0xc28 <main+0x392>
     c22:	80 ef       	ldi	r24, 0xF0	; 240
     c24:	88 bb       	out	0x18, r24	; 24
     c26:	46 c0       	rjmp	.+140    	; 0xcb4 <main+0x41e>
				PORTB = 0xf0;
     c28:	18 ba       	out	0x18, r1	; 24
     c2a:	44 c0       	rjmp	.+136    	; 0xcb4 <main+0x41e>
     c2c:	e1 e3       	ldi	r30, 0x31	; 49
			}
			else {PORTB = 0x00;}
     c2e:	f1 e0       	ldi	r31, 0x01	; 1
		}
				
		// 후면 센서 작동
		while (ckd != 0 && disp == 14) {				
			string2[14] = '-';
     c30:	8d e2       	ldi	r24, 0x2D	; 45
     c32:	86 87       	std	Z+14, r24	; 0x0e
     c34:	8d ec       	ldi	r24, 0xCD	; 205
			string2[15] = '0'+(ckd %10);
     c36:	98 9f       	mul	r25, r24
     c38:	81 2d       	mov	r24, r1
     c3a:	11 24       	eor	r1, r1
     c3c:	86 95       	lsr	r24
     c3e:	86 95       	lsr	r24
     c40:	86 95       	lsr	r24
     c42:	88 0f       	add	r24, r24
     c44:	28 2f       	mov	r18, r24
     c46:	22 0f       	add	r18, r18
     c48:	22 0f       	add	r18, r18
     c4a:	82 0f       	add	r24, r18
     c4c:	98 1b       	sub	r25, r24
     c4e:	90 5d       	subi	r25, 0xD0	; 208
     c50:	97 87       	std	Z+15, r25	; 0x0f
			LCDMove(0,0);
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	bd da       	rcall	.-2694   	; 0x1d2 <LCDMove>
     c58:	81 e3       	ldi	r24, 0x31	; 49
			LCDPuts(string2);
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	ae da       	rcall	.-2724   	; 0x1ba <LCDPuts>
     c5e:	10 e0       	ldi	r17, 0x00	; 0
			
			for (char a = 0 ; a < 9 ; a++) {
     c60:	1d c0       	rjmp	.+58     	; 0xc9c <main+0x406>
     c62:	86 b3       	in	r24, 0x16	; 22
				if ((PINB & 0x0f) != 15) {
     c64:	8f 70       	andi	r24, 0x0F	; 15
     c66:	8f 30       	cpi	r24, 0x0F	; 15
     c68:	49 f0       	breq	.+18     	; 0xc7c <main+0x3e6>
					ckd = 0;
     c6a:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__data_end>
					string2[14] = ' ';
     c6e:	e1 e3       	ldi	r30, 0x31	; 49
     c70:	f1 e0       	ldi	r31, 0x01	; 1
     c72:	80 e2       	ldi	r24, 0x20	; 32
     c74:	86 87       	std	Z+14, r24	; 0x0e
					string2[15] = ' ';
     c76:	87 87       	std	Z+15, r24	; 0x0f
					LCDInit();
     c78:	6d da       	rcall	.-2854   	; 0x154 <LCDInit>
     c7a:	12 c0       	rjmp	.+36     	; 0xca0 <main+0x40a>
					break;
     c7c:	8d ef       	ldi	r24, 0xFD	; 253
				}
				else if ((a > 5) || (a < 3)) {
     c7e:	81 0f       	add	r24, r17
     c80:	83 30       	cpi	r24, 0x03	; 3
     c82:	30 f0       	brcs	.+12     	; 0xc90 <main+0x3fa>
     c84:	68 ec       	ldi	r22, 0xC8	; 200
					bz(50, 200);
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	82 e3       	ldi	r24, 0x32	; 50
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	72 dd       	rcall	.-1308   	; 0x772 <bz>
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <main+0x404>
     c90:	68 ec       	ldi	r22, 0xC8	; 200
     c92:	70 e0       	ldi	r23, 0x00	; 0
				}
				else {
					bz(150, 200);
     c94:	86 e9       	ldi	r24, 0x96	; 150
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	6c dd       	rcall	.-1320   	; 0x772 <bz>
     c9a:	1f 5f       	subi	r17, 0xFF	; 255
     c9c:	19 30       	cpi	r17, 0x09	; 9
     c9e:	08 f3       	brcs	.-62     	; 0xc62 <main+0x3cc>
			string2[14] = '-';
			string2[15] = '0'+(ckd %10);
			LCDMove(0,0);
			LCDPuts(string2);
			
			for (char a = 0 ; a < 9 ; a++) {
     ca0:	80 ed       	ldi	r24, 0xD0	; 208
     ca2:	97 e0       	ldi	r25, 0x07	; 7
     ca4:	05 c0       	rjmp	.+10     	; 0xcb0 <main+0x41a>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ca6:	e0 e9       	ldi	r30, 0x90	; 144
     ca8:	f1 e0       	ldi	r31, 0x01	; 1
     caa:	31 97       	sbiw	r30, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cac:	f1 f7       	brne	.-4      	; 0xcaa <main+0x414>
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	c9 f7       	brne	.-14     	; 0xca6 <main+0x410>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb4:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <__data_end>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cb8:	99 23       	and	r25, r25
			}
			else {PORTB = 0x00;}
		}
				
		// 후면 센서 작동
		while (ckd != 0 && disp == 14) {				
     cba:	19 f0       	breq	.+6      	; 0xcc2 <main+0x42c>
     cbc:	0e 30       	cpi	r16, 0x0E	; 14
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <main+0x42c>
     cc0:	b5 cf       	rjmp	.-150    	; 0xc2c <main+0x396>
     cc2:	87 e0       	ldi	r24, 0x07	; 7
     cc4:	e3 e6       	ldi	r30, 0x63	; 99
		static char string6[]="motion";
		static char string7[]="largest : ";
		static char string9[]="second  : ";
		
		
		unsigned char x[] = {7, 10, 13, 0, 3, 6, 9};
     cc6:	f1 e0       	ldi	r31, 0x01	; 1
     cc8:	de 01       	movw	r26, r28
     cca:	18 96       	adiw	r26, 0x08	; 8
     ccc:	01 90       	ld	r0, Z+
     cce:	0d 92       	st	X+, r0
     cd0:	8a 95       	dec	r24
     cd2:	e1 f7       	brne	.-8      	; 0xccc <main+0x436>
		unsigned char y[] = {0, 0, 0, 1, 1, 1, 1};
     cd4:	87 e0       	ldi	r24, 0x07	; 7
     cd6:	ea e6       	ldi	r30, 0x6A	; 106
     cd8:	f1 e0       	ldi	r31, 0x01	; 1
     cda:	de 01       	movw	r26, r28
     cdc:	11 96       	adiw	r26, 0x01	; 1
     cde:	01 90       	ld	r0, Z+
     ce0:	0d 92       	st	X+, r0
     ce2:	8a 95       	dec	r24
     ce4:	e1 f7       	brne	.-8      	; 0xcde <main+0x448>
		
		if ((PINB & 15) != 15) {
     ce6:	86 b3       	in	r24, 0x16	; 22
     ce8:	8f 70       	andi	r24, 0x0F	; 15
     cea:	8f 30       	cpi	r24, 0x0F	; 15
     cec:	19 f0       	breq	.+6      	; 0xcf4 <main+0x45e>
			disp = (PINB & 15);
     cee:	06 b3       	in	r16, 0x16	; 22
     cf0:	0f 70       	andi	r16, 0x0F	; 15
			LCDInit();
     cf2:	30 da       	rcall	.-2976   	; 0x154 <LCDInit>
		}
		LCDMove(0,0);
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	6c da       	rcall	.-2856   	; 0x1d2 <LCDMove>
     cfa:	0c 30       	cpi	r16, 0x0C	; 12
		
		// 초음파 테스트
		if(disp == 12) {
     cfc:	a9 f5       	brne	.+106    	; 0xd68 <main+0x4d2>
     cfe:	8b e2       	ldi	r24, 0x2B	; 43
			LCDPuts(string3);
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	5b da       	rcall	.-2890   	; 0x1ba <LCDPuts>
     d04:	10 e0       	ldi	r17, 0x00	; 0
     d06:	22 c0       	rjmp	.+68     	; 0xd4c <main+0x4b6>
			for (char a = 0 ; a < 7 ; a++) {
     d08:	81 2f       	mov	r24, r17
     d0a:	90 e0       	ldi	r25, 0x00	; 0
				LCDMove(y[a], x[a]);
     d0c:	e8 e0       	ldi	r30, 0x08	; 8
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	ec 0f       	add	r30, r28
     d12:	fd 1f       	adc	r31, r29
     d14:	e8 0f       	add	r30, r24
     d16:	f9 1f       	adc	r31, r25
     d18:	60 81       	ld	r22, Z
     d1a:	e1 e0       	ldi	r30, 0x01	; 1
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	ec 0f       	add	r30, r28
     d20:	fd 1f       	adc	r31, r29
     d22:	e8 0f       	add	r30, r24
     d24:	f9 1f       	adc	r31, r25
     d26:	80 81       	ld	r24, Z
     d28:	54 da       	rcall	.-2904   	; 0x1d2 <LCDMove>
     d2a:	20 91 81 01 	lds	r18, 0x0181	; 0x800181 <check>
				tNum2(!((check >> a) & 0x01));
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	01 2e       	mov	r0, r17
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <main+0x4a2>
     d34:	35 95       	asr	r19
     d36:	27 95       	ror	r18
     d38:	0a 94       	dec	r0
     d3a:	e2 f7       	brpl	.-8      	; 0xd34 <main+0x49e>
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	20 ff       	sbrs	r18, 0
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <main+0x4b2>
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	cc db       	rcall	.-2152   	; 0x4e2 <tNum2>
     d4a:	1f 5f       	subi	r17, 0xFF	; 255
		LCDMove(0,0);
		
		// 초음파 테스트
		if(disp == 12) {
			LCDPuts(string3);
			for (char a = 0 ; a < 7 ; a++) {
     d4c:	17 30       	cpi	r17, 0x07	; 7
     d4e:	e0 f2       	brcs	.-72     	; 0xd08 <main+0x472>
     d50:	6c e0       	ldi	r22, 0x0C	; 12
				LCDMove(y[a], x[a]);
				tNum2(!((check >> a) & 0x01));
			}
			LCDMove(1,12);
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	3e da       	rcall	.-2948   	; 0x1d2 <LCDMove>
     d56:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <check>
			tNum3((~check) & 0x7f);
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	80 95       	com	r24
     d5e:	90 95       	com	r25
     d60:	8f 77       	andi	r24, 0x7F	; 127
     d62:	99 27       	eor	r25, r25
     d64:	07 dc       	rcall	.-2034   	; 0x574 <tNum3>
     d66:	a9 ce       	rjmp	.-686    	; 0xaba <main+0x224>
     d68:	0a 30       	cpi	r16, 0x0A	; 10
		}
		else if(disp == 10) {
     d6a:	59 f5       	brne	.+86     	; 0xdc2 <main+0x52c>
			LCDPuts(string4);
     d6c:	84 e2       	ldi	r24, 0x24	; 36
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	24 da       	rcall	.-3000   	; 0x1ba <LCDPuts>
     d72:	10 e0       	ldi	r17, 0x00	; 0
			for (char a = 0 ; a < 7 ; a++) {
     d74:	18 c0       	rjmp	.+48     	; 0xda6 <main+0x510>
     d76:	e1 2e       	mov	r14, r17
				LCDMove(y[a], x[a]);
     d78:	f1 2c       	mov	r15, r1
     d7a:	e8 e0       	ldi	r30, 0x08	; 8
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	ec 0f       	add	r30, r28
     d80:	fd 1f       	adc	r31, r29
     d82:	ee 0d       	add	r30, r14
     d84:	ff 1d       	adc	r31, r15
     d86:	60 81       	ld	r22, Z
     d88:	e1 e0       	ldi	r30, 0x01	; 1
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	ec 0f       	add	r30, r28
     d8e:	fd 1f       	adc	r31, r29
     d90:	ee 0d       	add	r30, r14
     d92:	ff 1d       	adc	r31, r15
     d94:	80 81       	ld	r24, Z
     d96:	1d da       	rcall	.-3014   	; 0x1d2 <LCDMove>
				tNum2(average[a]);
     d98:	f7 01       	movw	r30, r14
     d9a:	ed 57       	subi	r30, 0x7D	; 125
     d9c:	fe 4f       	sbci	r31, 0xFE	; 254
     d9e:	80 81       	ld	r24, Z
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	9f db       	rcall	.-2242   	; 0x4e2 <tNum2>
     da4:	1f 5f       	subi	r17, 0xFF	; 255
			LCDMove(1,12);
			tNum3((~check) & 0x7f);
		}
		else if(disp == 10) {
			LCDPuts(string4);
			for (char a = 0 ; a < 7 ; a++) {
     da6:	17 30       	cpi	r17, 0x07	; 7
     da8:	30 f3       	brcs	.-52     	; 0xd76 <main+0x4e0>
				LCDMove(y[a], x[a]);
				tNum2(average[a]);
			}
			LCDMove(1,12);
     daa:	6c e0       	ldi	r22, 0x0C	; 12
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	11 da       	rcall	.-3038   	; 0x1d2 <LCDMove>
     db0:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <check>
			tNum3((~check) & 0x7f);
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	80 95       	com	r24
     db8:	90 95       	com	r25
     dba:	8f 77       	andi	r24, 0x7F	; 127
     dbc:	99 27       	eor	r25, r25
     dbe:	da db       	rcall	.-2124   	; 0x574 <tNum3>
     dc0:	7c ce       	rjmp	.-776    	; 0xaba <main+0x224>
		}
		else if(disp == 6) {
     dc2:	06 30       	cpi	r16, 0x06	; 6
     dc4:	69 f5       	brne	.+90     	; 0xe20 <main+0x58a>
			LCDPuts(string5);
     dc6:	8d e1       	ldi	r24, 0x1D	; 29
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	f7 d9       	rcall	.-3090   	; 0x1ba <LCDPuts>
     dcc:	10 e0       	ldi	r17, 0x00	; 0
			for (char a = 0 ; a < 7 ; a++) {
     dce:	1a c0       	rjmp	.+52     	; 0xe04 <main+0x56e>
				LCDMove(y[a], x[a]);
     dd0:	e1 2e       	mov	r14, r17
     dd2:	f1 2c       	mov	r15, r1
     dd4:	e8 e0       	ldi	r30, 0x08	; 8
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	ec 0f       	add	r30, r28
     dda:	fd 1f       	adc	r31, r29
     ddc:	ee 0d       	add	r30, r14
     dde:	ff 1d       	adc	r31, r15
     de0:	60 81       	ld	r22, Z
     de2:	e1 e0       	ldi	r30, 0x01	; 1
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	ec 0f       	add	r30, r28
     de8:	fd 1f       	adc	r31, r29
     dea:	ee 0d       	add	r30, r14
				tNum2(front[a]);
     dec:	ff 1d       	adc	r31, r15
     dee:	80 81       	ld	r24, Z
     df0:	f0 d9       	rcall	.-3104   	; 0x1d2 <LCDMove>
     df2:	f7 01       	movw	r30, r14
     df4:	ee 0f       	add	r30, r30
     df6:	ff 1f       	adc	r31, r31
     df8:	ed 58       	subi	r30, 0x8D	; 141
     dfa:	fe 4f       	sbci	r31, 0xFE	; 254
			LCDMove(1,12);
			tNum3((~check) & 0x7f);
		}
		else if(disp == 6) {
			LCDPuts(string5);
			for (char a = 0 ; a < 7 ; a++) {
     dfc:	80 81       	ld	r24, Z
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
     e00:	70 db       	rcall	.-2336   	; 0x4e2 <tNum2>
				LCDMove(y[a], x[a]);
				tNum2(front[a]);
			}
			LCDMove(1,12);
     e02:	1f 5f       	subi	r17, 0xFF	; 255
     e04:	17 30       	cpi	r17, 0x07	; 7
     e06:	20 f3       	brcs	.-56     	; 0xdd0 <main+0x53a>
     e08:	6c e0       	ldi	r22, 0x0C	; 12
			tNum3((~check) & 0x7f);
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	e2 d9       	rcall	.-3132   	; 0x1d2 <LCDMove>
     e0e:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <check>
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	80 95       	com	r24
     e16:	90 95       	com	r25
     e18:	8f 77       	andi	r24, 0x7F	; 127
     e1a:	99 27       	eor	r25, r25
     e1c:	ab db       	rcall	.-2218   	; 0x574 <tNum3>
		}
		else if(disp == 5) {
     e1e:	4d ce       	rjmp	.-870    	; 0xaba <main+0x224>
     e20:	05 30       	cpi	r16, 0x05	; 5
			LCDMove(0,0);
     e22:	89 f4       	brne	.+34     	; 0xe46 <main+0x5b0>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	d4 d9       	rcall	.-3160   	; 0x1d2 <LCDMove>
			LCDPuts(string7);
     e2a:	82 e1       	ldi	r24, 0x12	; 18
     e2c:	91 e0       	ldi	r25, 0x01	; 1
     e2e:	c5 d9       	rcall	.-3190   	; 0x1ba <LCDPuts>
     e30:	c7 01       	movw	r24, r14
			tNum3(largest);
     e32:	a0 db       	rcall	.-2240   	; 0x574 <tNum3>
     e34:	60 e0       	ldi	r22, 0x00	; 0
			
			LCDMove(1,0);
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	cc d9       	rcall	.-3176   	; 0x1d2 <LCDMove>
     e3a:	87 e0       	ldi	r24, 0x07	; 7
     e3c:	91 e0       	ldi	r25, 0x01	; 1
			LCDPuts(string9);
     e3e:	bd d9       	rcall	.-3206   	; 0x1ba <LCDPuts>
     e40:	c6 01       	movw	r24, r12
     e42:	98 db       	rcall	.-2256   	; 0x574 <tNum3>
     e44:	3a ce       	rjmp	.-908    	; 0xaba <main+0x224>
			tNum3(secondLargest);
     e46:	09 30       	cpi	r16, 0x09	; 9
     e48:	09 f0       	breq	.+2      	; 0xe4c <main+0x5b6>
     e4a:	44 c0       	rjmp	.+136    	; 0xed4 <main+0x63e>
     e4c:	80 e0       	ldi	r24, 0x00	; 0
		}
		
		// 움직임 감지 테스트
		else if(disp == 9) {
     e4e:	91 e0       	ldi	r25, 0x01	; 1
     e50:	b4 d9       	rcall	.-3224   	; 0x1ba <LCDPuts>
			LCDPuts(string6);
     e52:	f1 b0       	in	r15, 0x01	; 1
     e54:	80 b3       	in	r24, 0x10	; 16
     e56:	30 e1       	ldi	r19, 0x10	; 16
			unsigned char aa = (PINE >> 4) | ((PIND & 0x0f) << 4);	
     e58:	83 9f       	mul	r24, r19
     e5a:	c0 01       	movw	r24, r0
     e5c:	11 24       	eor	r1, r1
     e5e:	f6 94       	lsr	r15
     e60:	f6 94       	lsr	r15
     e62:	f6 94       	lsr	r15
     e64:	f6 94       	lsr	r15
     e66:	f8 2a       	or	r15, r24
     e68:	10 e0       	ldi	r17, 0x00	; 0
			for (char a = 0 ; a < 6 ; a++) {
     e6a:	21 c0       	rjmp	.+66     	; 0xeae <main+0x618>
				LCDMove(y[a], x[a]);
     e6c:	81 2f       	mov	r24, r17
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	e8 e0       	ldi	r30, 0x08	; 8
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	ec 0f       	add	r30, r28
     e76:	fd 1f       	adc	r31, r29
     e78:	e8 0f       	add	r30, r24
     e7a:	f9 1f       	adc	r31, r25
     e7c:	60 81       	ld	r22, Z
     e7e:	e1 e0       	ldi	r30, 0x01	; 1
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	ec 0f       	add	r30, r28
     e84:	fd 1f       	adc	r31, r29
     e86:	e8 0f       	add	r30, r24
     e88:	f9 1f       	adc	r31, r25
     e8a:	80 81       	ld	r24, Z
				tNum2(!((aa >> a) & 0x01));
     e8c:	a2 d9       	rcall	.-3260   	; 0x1d2 <LCDMove>
     e8e:	2f 2d       	mov	r18, r15
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	01 2e       	mov	r0, r17
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <main+0x604>
     e96:	35 95       	asr	r19
     e98:	27 95       	ror	r18
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <main+0x600>
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	20 ff       	sbrs	r18, 0
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <main+0x614>
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	1b db       	rcall	.-2506   	; 0x4e2 <tNum2>
		
		// 움직임 감지 테스트
		else if(disp == 9) {
			LCDPuts(string6);
			unsigned char aa = (PINE >> 4) | ((PIND & 0x0f) << 4);	
			for (char a = 0 ; a < 6 ; a++) {
     eac:	1f 5f       	subi	r17, 0xFF	; 255
     eae:	16 30       	cpi	r17, 0x06	; 6
     eb0:	e8 f2       	brcs	.-70     	; 0xe6c <main+0x5d6>
				LCDMove(y[a], x[a]);
				tNum2(!((aa >> a) & 0x01));
			}
			LCDMove(1, 9);
     eb2:	69 e0       	ldi	r22, 0x09	; 9
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	8d d9       	rcall	.-3302   	; 0x1d2 <LCDMove>
     eb8:	81 e0       	ldi	r24, 0x01	; 1
			tNum2(!((aa >> 7) & 0x01));
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	ff 20       	and	r15, r15
     ebe:	14 f4       	brge	.+4      	; 0xec4 <main+0x62e>
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e db       	rcall	.-2532   	; 0x4e2 <tNum2>
     ec6:	6c e0       	ldi	r22, 0x0C	; 12
     ec8:	81 e0       	ldi	r24, 0x01	; 1
			LCDMove(1,12);
     eca:	83 d9       	rcall	.-3322   	; 0x1d2 <LCDMove>
     ecc:	8f 2d       	mov	r24, r15
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	51 db       	rcall	.-2398   	; 0x574 <tNum3>
			tNum3(aa);
     ed2:	f3 cd       	rjmp	.-1050   	; 0xaba <main+0x224>
     ed4:	81 e3       	ldi	r24, 0x31	; 49
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	70 d9       	rcall	.-3360   	; 0x1ba <LCDPuts>
     eda:	81 e0       	ldi	r24, 0x01	; 1
		}
		
		else {
			disp = 14;
			LCDPuts(string2);
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	bb db       	rcall	.-2186   	; 0x656 <Watch>
     ee0:	0e e0       	ldi	r16, 0x0E	; 14
     ee2:	eb cd       	rjmp	.-1066   	; 0xaba <main+0x224>

00000ee4 <__cmpsf2>:
			Watch(1);
     ee4:	6c d0       	rcall	.+216    	; 0xfbe <__fp_cmp>
     ee6:	08 f4       	brcc	.+2      	; 0xeea <__cmpsf2+0x6>
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	08 95       	ret

00000eec <__fixunssfsi>:
			LCDMove(1,12);
			tNum3(aa);
		}
		
		else {
			disp = 14;
     eec:	94 d0       	rcall	.+296    	; 0x1016 <__fp_splitA>
			LCDPuts(string2);
			Watch(1);
		}
	}
     eee:	88 f0       	brcs	.+34     	; 0xf12 <__fixunssfsi+0x26>
     ef0:	9f 57       	subi	r25, 0x7F	; 127
     ef2:	90 f0       	brcs	.+36     	; 0xf18 <__fixunssfsi+0x2c>
     ef4:	b9 2f       	mov	r27, r25
     ef6:	99 27       	eor	r25, r25
     ef8:	b7 51       	subi	r27, 0x17	; 23
     efa:	a0 f0       	brcs	.+40     	; 0xf24 <__fixunssfsi+0x38>
     efc:	d1 f0       	breq	.+52     	; 0xf32 <__fixunssfsi+0x46>
     efe:	66 0f       	add	r22, r22
     f00:	77 1f       	adc	r23, r23
     f02:	88 1f       	adc	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	1a f0       	brmi	.+6      	; 0xf0e <__fixunssfsi+0x22>
     f08:	ba 95       	dec	r27
     f0a:	c9 f7       	brne	.-14     	; 0xefe <__fixunssfsi+0x12>
     f0c:	12 c0       	rjmp	.+36     	; 0xf32 <__fixunssfsi+0x46>
     f0e:	b1 30       	cpi	r27, 0x01	; 1
     f10:	81 f0       	breq	.+32     	; 0xf32 <__fixunssfsi+0x46>
     f12:	9b d0       	rcall	.+310    	; 0x104a <__fp_zero>
     f14:	b1 e0       	ldi	r27, 0x01	; 1
     f16:	08 95       	ret
     f18:	98 c0       	rjmp	.+304    	; 0x104a <__fp_zero>
     f1a:	67 2f       	mov	r22, r23
     f1c:	78 2f       	mov	r23, r24
     f1e:	88 27       	eor	r24, r24
     f20:	b8 5f       	subi	r27, 0xF8	; 248
     f22:	39 f0       	breq	.+14     	; 0xf32 <__fixunssfsi+0x46>
     f24:	b9 3f       	cpi	r27, 0xF9	; 249
     f26:	cc f3       	brlt	.-14     	; 0xf1a <__fixunssfsi+0x2e>
     f28:	86 95       	lsr	r24
     f2a:	77 95       	ror	r23
     f2c:	67 95       	ror	r22
     f2e:	b3 95       	inc	r27
     f30:	d9 f7       	brne	.-10     	; 0xf28 <__fixunssfsi+0x3c>
     f32:	3e f4       	brtc	.+14     	; 0xf42 <__fixunssfsi+0x56>
     f34:	90 95       	com	r25
     f36:	80 95       	com	r24
     f38:	70 95       	com	r23
     f3a:	61 95       	neg	r22
     f3c:	7f 4f       	sbci	r23, 0xFF	; 255
     f3e:	8f 4f       	sbci	r24, 0xFF	; 255
     f40:	9f 4f       	sbci	r25, 0xFF	; 255
     f42:	08 95       	ret

00000f44 <__floatunsisf>:
     f44:	e8 94       	clt
     f46:	09 c0       	rjmp	.+18     	; 0xf5a <__floatsisf+0x12>

00000f48 <__floatsisf>:
     f48:	97 fb       	bst	r25, 7
     f4a:	3e f4       	brtc	.+14     	; 0xf5a <__floatsisf+0x12>
     f4c:	90 95       	com	r25
     f4e:	80 95       	com	r24
     f50:	70 95       	com	r23
     f52:	61 95       	neg	r22
     f54:	7f 4f       	sbci	r23, 0xFF	; 255
     f56:	8f 4f       	sbci	r24, 0xFF	; 255
     f58:	9f 4f       	sbci	r25, 0xFF	; 255
     f5a:	99 23       	and	r25, r25
     f5c:	a9 f0       	breq	.+42     	; 0xf88 <__floatsisf+0x40>
     f5e:	f9 2f       	mov	r31, r25
     f60:	96 e9       	ldi	r25, 0x96	; 150
     f62:	bb 27       	eor	r27, r27
     f64:	93 95       	inc	r25
     f66:	f6 95       	lsr	r31
     f68:	87 95       	ror	r24
     f6a:	77 95       	ror	r23
     f6c:	67 95       	ror	r22
     f6e:	b7 95       	ror	r27
     f70:	f1 11       	cpse	r31, r1
     f72:	f8 cf       	rjmp	.-16     	; 0xf64 <__floatsisf+0x1c>
     f74:	fa f4       	brpl	.+62     	; 0xfb4 <__floatsisf+0x6c>
     f76:	bb 0f       	add	r27, r27
     f78:	11 f4       	brne	.+4      	; 0xf7e <__floatsisf+0x36>
     f7a:	60 ff       	sbrs	r22, 0
     f7c:	1b c0       	rjmp	.+54     	; 0xfb4 <__floatsisf+0x6c>
     f7e:	6f 5f       	subi	r22, 0xFF	; 255
     f80:	7f 4f       	sbci	r23, 0xFF	; 255
     f82:	8f 4f       	sbci	r24, 0xFF	; 255
     f84:	9f 4f       	sbci	r25, 0xFF	; 255
     f86:	16 c0       	rjmp	.+44     	; 0xfb4 <__floatsisf+0x6c>
     f88:	88 23       	and	r24, r24
     f8a:	11 f0       	breq	.+4      	; 0xf90 <__floatsisf+0x48>
     f8c:	96 e9       	ldi	r25, 0x96	; 150
     f8e:	11 c0       	rjmp	.+34     	; 0xfb2 <__floatsisf+0x6a>
     f90:	77 23       	and	r23, r23
     f92:	21 f0       	breq	.+8      	; 0xf9c <__floatsisf+0x54>
     f94:	9e e8       	ldi	r25, 0x8E	; 142
     f96:	87 2f       	mov	r24, r23
     f98:	76 2f       	mov	r23, r22
     f9a:	05 c0       	rjmp	.+10     	; 0xfa6 <__floatsisf+0x5e>
     f9c:	66 23       	and	r22, r22
     f9e:	71 f0       	breq	.+28     	; 0xfbc <__floatsisf+0x74>
     fa0:	96 e8       	ldi	r25, 0x86	; 134
     fa2:	86 2f       	mov	r24, r22
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	2a f0       	brmi	.+10     	; 0xfb4 <__floatsisf+0x6c>
     faa:	9a 95       	dec	r25
     fac:	66 0f       	add	r22, r22
     fae:	77 1f       	adc	r23, r23
     fb0:	88 1f       	adc	r24, r24
     fb2:	da f7       	brpl	.-10     	; 0xfaa <__floatsisf+0x62>
     fb4:	88 0f       	add	r24, r24
     fb6:	96 95       	lsr	r25
     fb8:	87 95       	ror	r24
     fba:	97 f9       	bld	r25, 7
     fbc:	08 95       	ret

00000fbe <__fp_cmp>:
     fbe:	99 0f       	add	r25, r25
     fc0:	00 08       	sbc	r0, r0
     fc2:	55 0f       	add	r21, r21
     fc4:	aa 0b       	sbc	r26, r26
     fc6:	e0 e8       	ldi	r30, 0x80	; 128
     fc8:	fe ef       	ldi	r31, 0xFE	; 254
     fca:	16 16       	cp	r1, r22
     fcc:	17 06       	cpc	r1, r23
     fce:	e8 07       	cpc	r30, r24
     fd0:	f9 07       	cpc	r31, r25
     fd2:	c0 f0       	brcs	.+48     	; 0x1004 <__DATA_REGION_LENGTH__+0x4>
     fd4:	12 16       	cp	r1, r18
     fd6:	13 06       	cpc	r1, r19
     fd8:	e4 07       	cpc	r30, r20
     fda:	f5 07       	cpc	r31, r21
     fdc:	98 f0       	brcs	.+38     	; 0x1004 <__DATA_REGION_LENGTH__+0x4>
     fde:	62 1b       	sub	r22, r18
     fe0:	73 0b       	sbc	r23, r19
     fe2:	84 0b       	sbc	r24, r20
     fe4:	95 0b       	sbc	r25, r21
     fe6:	39 f4       	brne	.+14     	; 0xff6 <__fp_cmp+0x38>
     fe8:	0a 26       	eor	r0, r26
     fea:	61 f0       	breq	.+24     	; 0x1004 <__DATA_REGION_LENGTH__+0x4>
     fec:	23 2b       	or	r18, r19
     fee:	24 2b       	or	r18, r20
     ff0:	25 2b       	or	r18, r21
     ff2:	21 f4       	brne	.+8      	; 0xffc <__fp_cmp+0x3e>
     ff4:	08 95       	ret
     ff6:	0a 26       	eor	r0, r26
     ff8:	09 f4       	brne	.+2      	; 0xffc <__fp_cmp+0x3e>
     ffa:	a1 40       	sbci	r26, 0x01	; 1
     ffc:	a6 95       	lsr	r26
     ffe:	8f ef       	ldi	r24, 0xFF	; 255
    1000:	81 1d       	adc	r24, r1
    1002:	81 1d       	adc	r24, r1
    1004:	08 95       	ret

00001006 <__fp_split3>:
    1006:	57 fd       	sbrc	r21, 7
    1008:	90 58       	subi	r25, 0x80	; 128
    100a:	44 0f       	add	r20, r20
    100c:	55 1f       	adc	r21, r21
    100e:	59 f0       	breq	.+22     	; 0x1026 <__fp_splitA+0x10>
    1010:	5f 3f       	cpi	r21, 0xFF	; 255
    1012:	71 f0       	breq	.+28     	; 0x1030 <__fp_splitA+0x1a>
    1014:	47 95       	ror	r20

00001016 <__fp_splitA>:
    1016:	88 0f       	add	r24, r24
    1018:	97 fb       	bst	r25, 7
    101a:	99 1f       	adc	r25, r25
    101c:	61 f0       	breq	.+24     	; 0x1036 <__fp_splitA+0x20>
    101e:	9f 3f       	cpi	r25, 0xFF	; 255
    1020:	79 f0       	breq	.+30     	; 0x1040 <__fp_splitA+0x2a>
    1022:	87 95       	ror	r24
    1024:	08 95       	ret
    1026:	12 16       	cp	r1, r18
    1028:	13 06       	cpc	r1, r19
    102a:	14 06       	cpc	r1, r20
    102c:	55 1f       	adc	r21, r21
    102e:	f2 cf       	rjmp	.-28     	; 0x1014 <__fp_split3+0xe>
    1030:	46 95       	lsr	r20
    1032:	f1 df       	rcall	.-30     	; 0x1016 <__fp_splitA>
    1034:	08 c0       	rjmp	.+16     	; 0x1046 <__fp_splitA+0x30>
    1036:	16 16       	cp	r1, r22
    1038:	17 06       	cpc	r1, r23
    103a:	18 06       	cpc	r1, r24
    103c:	99 1f       	adc	r25, r25
    103e:	f1 cf       	rjmp	.-30     	; 0x1022 <__fp_splitA+0xc>
    1040:	86 95       	lsr	r24
    1042:	71 05       	cpc	r23, r1
    1044:	61 05       	cpc	r22, r1
    1046:	08 94       	sec
    1048:	08 95       	ret

0000104a <__fp_zero>:
    104a:	e8 94       	clt

0000104c <__fp_szero>:
    104c:	bb 27       	eor	r27, r27
    104e:	66 27       	eor	r22, r22
    1050:	77 27       	eor	r23, r23
    1052:	cb 01       	movw	r24, r22
    1054:	97 f9       	bld	r25, 7
    1056:	08 95       	ret

00001058 <__gesf2>:
    1058:	b2 df       	rcall	.-156    	; 0xfbe <__fp_cmp>
    105a:	08 f4       	brcc	.+2      	; 0x105e <__gesf2+0x6>
    105c:	8f ef       	ldi	r24, 0xFF	; 255
    105e:	08 95       	ret

00001060 <__mulsf3>:
    1060:	0b d0       	rcall	.+22     	; 0x1078 <__mulsf3x>
    1062:	78 c0       	rjmp	.+240    	; 0x1154 <__fp_round>
    1064:	69 d0       	rcall	.+210    	; 0x1138 <__fp_pscA>
    1066:	28 f0       	brcs	.+10     	; 0x1072 <__mulsf3+0x12>
    1068:	6e d0       	rcall	.+220    	; 0x1146 <__fp_pscB>
    106a:	18 f0       	brcs	.+6      	; 0x1072 <__mulsf3+0x12>
    106c:	95 23       	and	r25, r21
    106e:	09 f0       	breq	.+2      	; 0x1072 <__mulsf3+0x12>
    1070:	5a c0       	rjmp	.+180    	; 0x1126 <__fp_inf>
    1072:	5f c0       	rjmp	.+190    	; 0x1132 <__fp_nan>
    1074:	11 24       	eor	r1, r1
    1076:	ea cf       	rjmp	.-44     	; 0x104c <__fp_szero>

00001078 <__mulsf3x>:
    1078:	c6 df       	rcall	.-116    	; 0x1006 <__fp_split3>
    107a:	a0 f3       	brcs	.-24     	; 0x1064 <__mulsf3+0x4>

0000107c <__mulsf3_pse>:
    107c:	95 9f       	mul	r25, r21
    107e:	d1 f3       	breq	.-12     	; 0x1074 <__mulsf3+0x14>
    1080:	95 0f       	add	r25, r21
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	55 1f       	adc	r21, r21
    1086:	62 9f       	mul	r22, r18
    1088:	f0 01       	movw	r30, r0
    108a:	72 9f       	mul	r23, r18
    108c:	bb 27       	eor	r27, r27
    108e:	f0 0d       	add	r31, r0
    1090:	b1 1d       	adc	r27, r1
    1092:	63 9f       	mul	r22, r19
    1094:	aa 27       	eor	r26, r26
    1096:	f0 0d       	add	r31, r0
    1098:	b1 1d       	adc	r27, r1
    109a:	aa 1f       	adc	r26, r26
    109c:	64 9f       	mul	r22, r20
    109e:	66 27       	eor	r22, r22
    10a0:	b0 0d       	add	r27, r0
    10a2:	a1 1d       	adc	r26, r1
    10a4:	66 1f       	adc	r22, r22
    10a6:	82 9f       	mul	r24, r18
    10a8:	22 27       	eor	r18, r18
    10aa:	b0 0d       	add	r27, r0
    10ac:	a1 1d       	adc	r26, r1
    10ae:	62 1f       	adc	r22, r18
    10b0:	73 9f       	mul	r23, r19
    10b2:	b0 0d       	add	r27, r0
    10b4:	a1 1d       	adc	r26, r1
    10b6:	62 1f       	adc	r22, r18
    10b8:	83 9f       	mul	r24, r19
    10ba:	a0 0d       	add	r26, r0
    10bc:	61 1d       	adc	r22, r1
    10be:	22 1f       	adc	r18, r18
    10c0:	74 9f       	mul	r23, r20
    10c2:	33 27       	eor	r19, r19
    10c4:	a0 0d       	add	r26, r0
    10c6:	61 1d       	adc	r22, r1
    10c8:	23 1f       	adc	r18, r19
    10ca:	84 9f       	mul	r24, r20
    10cc:	60 0d       	add	r22, r0
    10ce:	21 1d       	adc	r18, r1
    10d0:	82 2f       	mov	r24, r18
    10d2:	76 2f       	mov	r23, r22
    10d4:	6a 2f       	mov	r22, r26
    10d6:	11 24       	eor	r1, r1
    10d8:	9f 57       	subi	r25, 0x7F	; 127
    10da:	50 40       	sbci	r21, 0x00	; 0
    10dc:	8a f0       	brmi	.+34     	; 0x1100 <__stack+0x1>
    10de:	e1 f0       	breq	.+56     	; 0x1118 <__stack+0x19>
    10e0:	88 23       	and	r24, r24
    10e2:	4a f0       	brmi	.+18     	; 0x10f6 <__mulsf3_pse+0x7a>
    10e4:	ee 0f       	add	r30, r30
    10e6:	ff 1f       	adc	r31, r31
    10e8:	bb 1f       	adc	r27, r27
    10ea:	66 1f       	adc	r22, r22
    10ec:	77 1f       	adc	r23, r23
    10ee:	88 1f       	adc	r24, r24
    10f0:	91 50       	subi	r25, 0x01	; 1
    10f2:	50 40       	sbci	r21, 0x00	; 0
    10f4:	a9 f7       	brne	.-22     	; 0x10e0 <__mulsf3_pse+0x64>
    10f6:	9e 3f       	cpi	r25, 0xFE	; 254
    10f8:	51 05       	cpc	r21, r1
    10fa:	70 f0       	brcs	.+28     	; 0x1118 <__stack+0x19>
    10fc:	14 c0       	rjmp	.+40     	; 0x1126 <__fp_inf>
    10fe:	a6 cf       	rjmp	.-180    	; 0x104c <__fp_szero>
    1100:	5f 3f       	cpi	r21, 0xFF	; 255
    1102:	ec f3       	brlt	.-6      	; 0x10fe <__mulsf3_pse+0x82>
    1104:	98 3e       	cpi	r25, 0xE8	; 232
    1106:	dc f3       	brlt	.-10     	; 0x10fe <__mulsf3_pse+0x82>
    1108:	86 95       	lsr	r24
    110a:	77 95       	ror	r23
    110c:	67 95       	ror	r22
    110e:	b7 95       	ror	r27
    1110:	f7 95       	ror	r31
    1112:	e7 95       	ror	r30
    1114:	9f 5f       	subi	r25, 0xFF	; 255
    1116:	c1 f7       	brne	.-16     	; 0x1108 <__stack+0x9>
    1118:	fe 2b       	or	r31, r30
    111a:	88 0f       	add	r24, r24
    111c:	91 1d       	adc	r25, r1
    111e:	96 95       	lsr	r25
    1120:	87 95       	ror	r24
    1122:	97 f9       	bld	r25, 7
    1124:	08 95       	ret

00001126 <__fp_inf>:
    1126:	97 f9       	bld	r25, 7
    1128:	9f 67       	ori	r25, 0x7F	; 127
    112a:	80 e8       	ldi	r24, 0x80	; 128
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	08 95       	ret

00001132 <__fp_nan>:
    1132:	9f ef       	ldi	r25, 0xFF	; 255
    1134:	80 ec       	ldi	r24, 0xC0	; 192
    1136:	08 95       	ret

00001138 <__fp_pscA>:
    1138:	00 24       	eor	r0, r0
    113a:	0a 94       	dec	r0
    113c:	16 16       	cp	r1, r22
    113e:	17 06       	cpc	r1, r23
    1140:	18 06       	cpc	r1, r24
    1142:	09 06       	cpc	r0, r25
    1144:	08 95       	ret

00001146 <__fp_pscB>:
    1146:	00 24       	eor	r0, r0
    1148:	0a 94       	dec	r0
    114a:	12 16       	cp	r1, r18
    114c:	13 06       	cpc	r1, r19
    114e:	14 06       	cpc	r1, r20
    1150:	05 06       	cpc	r0, r21
    1152:	08 95       	ret

00001154 <__fp_round>:
    1154:	09 2e       	mov	r0, r25
    1156:	03 94       	inc	r0
    1158:	00 0c       	add	r0, r0
    115a:	11 f4       	brne	.+4      	; 0x1160 <__fp_round+0xc>
    115c:	88 23       	and	r24, r24
    115e:	52 f0       	brmi	.+20     	; 0x1174 <__fp_round+0x20>
    1160:	bb 0f       	add	r27, r27
    1162:	40 f4       	brcc	.+16     	; 0x1174 <__fp_round+0x20>
    1164:	bf 2b       	or	r27, r31
    1166:	11 f4       	brne	.+4      	; 0x116c <__fp_round+0x18>
    1168:	60 ff       	sbrs	r22, 0
    116a:	04 c0       	rjmp	.+8      	; 0x1174 <__fp_round+0x20>
    116c:	6f 5f       	subi	r22, 0xFF	; 255
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	8f 4f       	sbci	r24, 0xFF	; 255
    1172:	9f 4f       	sbci	r25, 0xFF	; 255
    1174:	08 95       	ret

00001176 <__divmodhi4>:
    1176:	97 fb       	bst	r25, 7
    1178:	07 2e       	mov	r0, r23
    117a:	16 f4       	brtc	.+4      	; 0x1180 <__divmodhi4+0xa>
    117c:	00 94       	com	r0
    117e:	06 d0       	rcall	.+12     	; 0x118c <__divmodhi4_neg1>
    1180:	77 fd       	sbrc	r23, 7
    1182:	08 d0       	rcall	.+16     	; 0x1194 <__divmodhi4_neg2>
    1184:	1a d0       	rcall	.+52     	; 0x11ba <__udivmodhi4>
    1186:	07 fc       	sbrc	r0, 7
    1188:	05 d0       	rcall	.+10     	; 0x1194 <__divmodhi4_neg2>
    118a:	3e f4       	brtc	.+14     	; 0x119a <__divmodhi4_exit>

0000118c <__divmodhi4_neg1>:
    118c:	90 95       	com	r25
    118e:	81 95       	neg	r24
    1190:	9f 4f       	sbci	r25, 0xFF	; 255
    1192:	08 95       	ret

00001194 <__divmodhi4_neg2>:
    1194:	70 95       	com	r23
    1196:	61 95       	neg	r22
    1198:	7f 4f       	sbci	r23, 0xFF	; 255

0000119a <__divmodhi4_exit>:
    119a:	08 95       	ret

0000119c <__umulhisi3>:
    119c:	a2 9f       	mul	r26, r18
    119e:	b0 01       	movw	r22, r0
    11a0:	b3 9f       	mul	r27, r19
    11a2:	c0 01       	movw	r24, r0
    11a4:	a3 9f       	mul	r26, r19
    11a6:	70 0d       	add	r23, r0
    11a8:	81 1d       	adc	r24, r1
    11aa:	11 24       	eor	r1, r1
    11ac:	91 1d       	adc	r25, r1
    11ae:	b2 9f       	mul	r27, r18
    11b0:	70 0d       	add	r23, r0
    11b2:	81 1d       	adc	r24, r1
    11b4:	11 24       	eor	r1, r1
    11b6:	91 1d       	adc	r25, r1
    11b8:	08 95       	ret

000011ba <__udivmodhi4>:
    11ba:	aa 1b       	sub	r26, r26
    11bc:	bb 1b       	sub	r27, r27
    11be:	51 e1       	ldi	r21, 0x11	; 17
    11c0:	07 c0       	rjmp	.+14     	; 0x11d0 <__udivmodhi4_ep>

000011c2 <__udivmodhi4_loop>:
    11c2:	aa 1f       	adc	r26, r26
    11c4:	bb 1f       	adc	r27, r27
    11c6:	a6 17       	cp	r26, r22
    11c8:	b7 07       	cpc	r27, r23
    11ca:	10 f0       	brcs	.+4      	; 0x11d0 <__udivmodhi4_ep>
    11cc:	a6 1b       	sub	r26, r22
    11ce:	b7 0b       	sbc	r27, r23

000011d0 <__udivmodhi4_ep>:
    11d0:	88 1f       	adc	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	5a 95       	dec	r21
    11d6:	a9 f7       	brne	.-22     	; 0x11c2 <__udivmodhi4_loop>
    11d8:	80 95       	com	r24
    11da:	90 95       	com	r25
    11dc:	bc 01       	movw	r22, r24
    11de:	cd 01       	movw	r24, r26
    11e0:	08 95       	ret

000011e2 <_exit>:
    11e2:	f8 94       	cli

000011e4 <__stop_program>:
    11e4:	ff cf       	rjmp	.-2      	; 0x11e4 <__stop_program>
