
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000051a  000005ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000051a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800104  00800104  000005b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fb2  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a48  00000000  00000000  00001672  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a1  00000000  00000000  000020ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000275c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000565  00000000  00000000  0000291c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000700  00000000  00000000  00002e81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003581  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	d7 c0       	rjmp	.+430    	; 0x1e0 <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e1       	ldi	r30, 0x1A	; 26
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 32       	cpi	r26, 0x29	; 41
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ba d1       	rcall	.+884    	; 0x438 <main>
  c4:	28 c2       	rjmp	.+1104   	; 0x516 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <checkbusy>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	8f e8       	ldi	r24, 0x8F	; 143
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <checkbusy+0x4>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <checkbusy+0xa>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <write_data>:
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	18 2f       	mov	r17, r24
  de:	c0 e0       	ldi	r28, 0x00	; 0
  e0:	d1 e2       	ldi	r29, 0x21	; 33
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	88 83       	st	Y, r24
  e6:	f0 df       	rcall	.-32     	; 0xc8 <checkbusy>
  e8:	10 93 00 20 	sts	0x2000, r17	; 0x802000 <__bss_end+0x1ed7>
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	88 83       	st	Y, r24
  f0:	87 ec       	ldi	r24, 0xC7	; 199
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <write_data+0x1e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <write_data+0x24>
  fa:	00 00       	nop
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	1f 91       	pop	r17
 102:	08 95       	ret

00000104 <MCU_Init>:
 104:	80 e8       	ldi	r24, 0x80	; 128
 106:	85 bf       	out	0x35, r24	; 53
 108:	94 e4       	ldi	r25, 0x44	; 68
 10a:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
 10e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
 112:	10 92 00 21 	sts	0x2100, r1	; 0x802100 <__bss_end+0x1fd7>
 116:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__bss_end+0x1ed7>
 11a:	08 95       	ret

0000011c <LCDCommand>:
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	c8 2f       	mov	r28, r24
 124:	00 e0       	ldi	r16, 0x00	; 0
 126:	11 e2       	ldi	r17, 0x21	; 33
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	f8 01       	movw	r30, r16
 12c:	80 83       	st	Z, r24
 12e:	cc df       	rcall	.-104    	; 0xc8 <checkbusy>
 130:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__bss_end+0x1ed7>
 134:	f8 01       	movw	r30, r16
 136:	10 82       	st	Z, r1
 138:	c1 50       	subi	r28, 0x01	; 1
 13a:	c2 30       	cpi	r28, 0x02	; 2
 13c:	30 f4       	brcc	.+12     	; 0x14a <LCDCommand+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	8f e3       	ldi	r24, 0x3F	; 63
 140:	9f e1       	ldi	r25, 0x1F	; 31
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCDCommand+0x26>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCDCommand+0x2c>
 148:	00 00       	nop
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	08 95       	ret

00000152 <LCDInit>:
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	80 93 00 21 	sts	0x2100, r24	; 0x802100 <__bss_end+0x1fd7>
 158:	8f e3       	ldi	r24, 0x3F	; 63
 15a:	9f e1       	ldi	r25, 0x1F	; 31
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCDInit+0xa>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCDInit+0x10>
 162:	00 00       	nop
 164:	8f e5       	ldi	r24, 0x5F	; 95
 166:	9a ee       	ldi	r25, 0xEA	; 234
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCDInit+0x16>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCDInit+0x1c>
 16e:	00 00       	nop
 170:	80 e3       	ldi	r24, 0x30	; 48
 172:	d4 df       	rcall	.-88     	; 0x11c <LCDCommand>
 174:	8f e1       	ldi	r24, 0x1F	; 31
 176:	9e e4       	ldi	r25, 0x4E	; 78
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCDInit+0x26>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCDInit+0x2c>
 17e:	00 00       	nop
 180:	80 e3       	ldi	r24, 0x30	; 48
 182:	cc df       	rcall	.-104    	; 0x11c <LCDCommand>
 184:	8f e9       	ldi	r24, 0x9F	; 159
 186:	9f e0       	ldi	r25, 0x0F	; 15
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCDInit+0x36>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCDInit+0x3c>
 18e:	00 00       	nop
 190:	82 e3       	ldi	r24, 0x32	; 50
 192:	c4 df       	rcall	.-120    	; 0x11c <LCDCommand>
 194:	88 e3       	ldi	r24, 0x38	; 56
 196:	c2 df       	rcall	.-124    	; 0x11c <LCDCommand>
 198:	88 e0       	ldi	r24, 0x08	; 8
 19a:	c0 df       	rcall	.-128    	; 0x11c <LCDCommand>
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	be df       	rcall	.-132    	; 0x11c <LCDCommand>
 1a0:	86 e0       	ldi	r24, 0x06	; 6
 1a2:	bc df       	rcall	.-136    	; 0x11c <LCDCommand>
 1a4:	8c e0       	ldi	r24, 0x0C	; 12
 1a6:	ba cf       	rjmp	.-140    	; 0x11c <LCDCommand>
 1a8:	08 95       	ret

000001aa <LCDPutchar>:
 1aa:	cf 93       	push	r28
 1ac:	c8 2f       	mov	r28, r24
 1ae:	8c df       	rcall	.-232    	; 0xc8 <checkbusy>
 1b0:	8c 2f       	mov	r24, r28
 1b2:	91 df       	rcall	.-222    	; 0xd6 <write_data>
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <LCDPuts>:
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	ec 01       	movw	r28, r24
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <LCDPuts+0xc>
 1c0:	f4 df       	rcall	.-24     	; 0x1aa <LCDPutchar>
 1c2:	21 96       	adiw	r28, 0x01	; 1
 1c4:	88 81       	ld	r24, Y
 1c6:	81 11       	cpse	r24, r1
 1c8:	fb cf       	rjmp	.-10     	; 0x1c0 <LCDPuts+0x8>
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <LCDMove>:
 1d0:	90 e4       	ldi	r25, 0x40	; 64
 1d2:	89 9f       	mul	r24, r25
 1d4:	60 0d       	add	r22, r0
 1d6:	11 24       	eor	r1, r1
 1d8:	86 2f       	mov	r24, r22
 1da:	80 68       	ori	r24, 0x80	; 128
 1dc:	9f cf       	rjmp	.-194    	; 0x11c <LCDCommand>
 1de:	08 95       	ret

000001e0 <__vector_12>:
	Buff[8] = '0'+((NUM2) %10);
	Buff[9] = 'm';
	Buff[10] = 's';
	
	LCDPuts(Buff);
}
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	0b b6       	in	r0, 0x3b	; 59
 1ec:	0f 92       	push	r0
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	4f 93       	push	r20
 1f4:	5f 93       	push	r21
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	ef 93       	push	r30
 1fc:	ff 93       	push	r31
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	17 c0       	rjmp	.+46     	; 0x230 <__vector_12+0x50>
 202:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <count>
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	e4 5f       	subi	r30, 0xF4	; 244
 20a:	fe 4f       	sbci	r31, 0xFE	; 254
 20c:	80 81       	ld	r24, Z
 20e:	e2 2f       	mov	r30, r18
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 2e       	mov	r0, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <__vector_12+0x3c>
 218:	95 95       	asr	r25
 21a:	87 95       	ror	r24
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <__vector_12+0x38>
 220:	80 ff       	sbrs	r24, 0
 222:	05 c0       	rjmp	.+10     	; 0x22e <__vector_12+0x4e>
 224:	ec 5f       	subi	r30, 0xFC	; 252
 226:	fe 4f       	sbci	r31, 0xFE	; 254
 228:	80 81       	ld	r24, Z
 22a:	81 50       	subi	r24, 0x01	; 1
 22c:	80 83       	st	Z, r24
 22e:	2f 5f       	subi	r18, 0xFF	; 255
 230:	28 30       	cpi	r18, 0x08	; 8
 232:	38 f3       	brcs	.-50     	; 0x202 <__vector_12+0x22>
 234:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <count>
 238:	e5 2f       	mov	r30, r21
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	46 b3       	in	r20, 0x16	; 22
 23e:	e4 5f       	subi	r30, 0xF4	; 244
 240:	fe 4f       	sbci	r31, 0xFE	; 254
 242:	40 83       	st	Z, r20
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	12 c0       	rjmp	.+36     	; 0x26c <__vector_12+0x8c>
 248:	e8 2f       	mov	r30, r24
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	24 2f       	mov	r18, r20
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	08 2e       	mov	r0, r24
 252:	02 c0       	rjmp	.+4      	; 0x258 <__vector_12+0x78>
 254:	35 95       	asr	r19
 256:	27 95       	ror	r18
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <__vector_12+0x74>
 25c:	20 ff       	sbrs	r18, 0
 25e:	05 c0       	rjmp	.+10     	; 0x26a <__vector_12+0x8a>
 260:	ec 5f       	subi	r30, 0xFC	; 252
 262:	fe 4f       	sbci	r31, 0xFE	; 254
 264:	90 81       	ld	r25, Z
 266:	9f 5f       	subi	r25, 0xFF	; 255
 268:	90 83       	st	Z, r25
 26a:	8f 5f       	subi	r24, 0xFF	; 255
 26c:	88 30       	cpi	r24, 0x08	; 8
 26e:	60 f3       	brcs	.-40     	; 0x248 <__vector_12+0x68>
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	85 0f       	add	r24, r21
 274:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <count>
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	2f 5f       	subi	r18, 0xFF	; 255
 282:	3f 4f       	sbci	r19, 0xFF	; 255
 284:	82 17       	cp	r24, r18
 286:	93 07       	cpc	r25, r19
 288:	11 f4       	brne	.+4      	; 0x28e <__vector_12+0xae>
 28a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <count>
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	5f 91       	pop	r21
 298:	4f 91       	pop	r20
 29a:	3f 91       	pop	r19
 29c:	2f 91       	pop	r18
 29e:	0f 90       	pop	r0
 2a0:	0b be       	out	0x3b, r0	; 59
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <measurement_time_Init>:
 2ac:	1f bc       	out	0x2f, r1	; 47
 2ae:	8d e0       	ldi	r24, 0x0D	; 13
 2b0:	8e bd       	out	0x2e, r24	; 46
 2b2:	87 b7       	in	r24, 0x37	; 55
 2b4:	80 61       	ori	r24, 0x10	; 16
 2b6:	87 bf       	out	0x37, r24	; 55
 2b8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <measurement_time>
 2bc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <measurement_time+0x1>
 2c0:	9b bd       	out	0x2b, r25	; 43
 2c2:	8a bd       	out	0x2a, r24	; 42
 2c4:	78 94       	sei
 2c6:	08 95       	ret

000002c8 <tNum>:
int tNum(unsigned int NUM) {
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <tNum+0xa>
 2d2:	00 d0       	rcall	.+0      	; 0x2d4 <tNum+0xc>
 2d4:	00 d0       	rcall	.+0      	; 0x2d6 <tNum+0xe>
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	8c 01       	movw	r16, r24
	unsigned char Buff[6] = "0";
 2dc:	fe 01       	movw	r30, r28
 2de:	33 96       	adiw	r30, 0x03	; 3
 2e0:	84 e0       	ldi	r24, 0x04	; 4
 2e2:	df 01       	movw	r26, r30
 2e4:	1d 92       	st	X+, r1
 2e6:	8a 95       	dec	r24
 2e8:	e9 f7       	brne	.-6      	; 0x2e4 <tNum+0x1c>
	Buff[0] = '0'+((NUM %100000)/10000);
 2ea:	b8 01       	movw	r22, r16
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	20 ea       	ldi	r18, 0xA0	; 160
 2f2:	36 e8       	ldi	r19, 0x86	; 134
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	50 e0       	ldi	r21, 0x00	; 0
 2f8:	c1 d0       	rcall	.+386    	; 0x47c <__divmodsi4>
 2fa:	20 e1       	ldi	r18, 0x10	; 16
 2fc:	37 e2       	ldi	r19, 0x27	; 39
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	bc d0       	rcall	.+376    	; 0x47c <__divmodsi4>
 304:	20 5d       	subi	r18, 0xD0	; 208
 306:	29 83       	std	Y+1, r18	; 0x01
	Buff[1] = '0'+((NUM %10000)/1000);
 308:	98 01       	movw	r18, r16
 30a:	32 95       	swap	r19
 30c:	22 95       	swap	r18
 30e:	2f 70       	andi	r18, 0x0F	; 15
 310:	23 27       	eor	r18, r19
 312:	3f 70       	andi	r19, 0x0F	; 15
 314:	23 27       	eor	r18, r19
 316:	a7 e4       	ldi	r26, 0x47	; 71
 318:	b3 e0       	ldi	r27, 0x03	; 3
 31a:	cc d0       	rcall	.+408    	; 0x4b4 <__umulhisi3>
 31c:	96 95       	lsr	r25
 31e:	87 95       	ror	r24
 320:	96 95       	lsr	r25
 322:	87 95       	ror	r24
 324:	96 95       	lsr	r25
 326:	87 95       	ror	r24
 328:	40 e1       	ldi	r20, 0x10	; 16
 32a:	57 e2       	ldi	r21, 0x27	; 39
 32c:	84 9f       	mul	r24, r20
 32e:	90 01       	movw	r18, r0
 330:	85 9f       	mul	r24, r21
 332:	30 0d       	add	r19, r0
 334:	94 9f       	mul	r25, r20
 336:	30 0d       	add	r19, r0
 338:	11 24       	eor	r1, r1
 33a:	c8 01       	movw	r24, r16
 33c:	82 1b       	sub	r24, r18
 33e:	93 0b       	sbc	r25, r19
 340:	9c 01       	movw	r18, r24
 342:	36 95       	lsr	r19
 344:	27 95       	ror	r18
 346:	36 95       	lsr	r19
 348:	27 95       	ror	r18
 34a:	36 95       	lsr	r19
 34c:	27 95       	ror	r18
 34e:	a5 ec       	ldi	r26, 0xC5	; 197
 350:	b0 e2       	ldi	r27, 0x20	; 32
 352:	b0 d0       	rcall	.+352    	; 0x4b4 <__umulhisi3>
 354:	92 95       	swap	r25
 356:	82 95       	swap	r24
 358:	8f 70       	andi	r24, 0x0F	; 15
 35a:	89 27       	eor	r24, r25
 35c:	9f 70       	andi	r25, 0x0F	; 15
 35e:	89 27       	eor	r24, r25
 360:	80 5d       	subi	r24, 0xD0	; 208
 362:	8a 83       	std	Y+2, r24	; 0x02
	Buff[2] = '0'+((NUM %1000)/100);
 364:	98 01       	movw	r18, r16
 366:	36 95       	lsr	r19
 368:	27 95       	ror	r18
 36a:	36 95       	lsr	r19
 36c:	27 95       	ror	r18
 36e:	36 95       	lsr	r19
 370:	27 95       	ror	r18
 372:	a0 d0       	rcall	.+320    	; 0x4b4 <__umulhisi3>
 374:	92 95       	swap	r25
 376:	82 95       	swap	r24
 378:	8f 70       	andi	r24, 0x0F	; 15
 37a:	89 27       	eor	r24, r25
 37c:	9f 70       	andi	r25, 0x0F	; 15
 37e:	89 27       	eor	r24, r25
 380:	48 ee       	ldi	r20, 0xE8	; 232
 382:	53 e0       	ldi	r21, 0x03	; 3
 384:	84 9f       	mul	r24, r20
 386:	90 01       	movw	r18, r0
 388:	85 9f       	mul	r24, r21
 38a:	30 0d       	add	r19, r0
 38c:	94 9f       	mul	r25, r20
 38e:	30 0d       	add	r19, r0
 390:	11 24       	eor	r1, r1
 392:	c8 01       	movw	r24, r16
 394:	82 1b       	sub	r24, r18
 396:	93 0b       	sbc	r25, r19
 398:	9c 01       	movw	r18, r24
 39a:	36 95       	lsr	r19
 39c:	27 95       	ror	r18
 39e:	36 95       	lsr	r19
 3a0:	27 95       	ror	r18
 3a2:	ab e7       	ldi	r26, 0x7B	; 123
 3a4:	b4 e1       	ldi	r27, 0x14	; 20
 3a6:	86 d0       	rcall	.+268    	; 0x4b4 <__umulhisi3>
 3a8:	96 95       	lsr	r25
 3aa:	87 95       	ror	r24
 3ac:	80 5d       	subi	r24, 0xD0	; 208
 3ae:	8b 83       	std	Y+3, r24	; 0x03
	Buff[3] = '0'+((NUM %100)/10);
 3b0:	98 01       	movw	r18, r16
 3b2:	36 95       	lsr	r19
 3b4:	27 95       	ror	r18
 3b6:	36 95       	lsr	r19
 3b8:	27 95       	ror	r18
 3ba:	7c d0       	rcall	.+248    	; 0x4b4 <__umulhisi3>
 3bc:	9c 01       	movw	r18, r24
 3be:	36 95       	lsr	r19
 3c0:	27 95       	ror	r18
 3c2:	44 e6       	ldi	r20, 0x64	; 100
 3c4:	42 9f       	mul	r20, r18
 3c6:	c0 01       	movw	r24, r0
 3c8:	43 9f       	mul	r20, r19
 3ca:	90 0d       	add	r25, r0
 3cc:	11 24       	eor	r1, r1
 3ce:	98 01       	movw	r18, r16
 3d0:	28 1b       	sub	r18, r24
 3d2:	39 0b       	sbc	r19, r25
 3d4:	ad ec       	ldi	r26, 0xCD	; 205
 3d6:	bc ec       	ldi	r27, 0xCC	; 204
 3d8:	6d d0       	rcall	.+218    	; 0x4b4 <__umulhisi3>
 3da:	96 95       	lsr	r25
 3dc:	87 95       	ror	r24
 3de:	96 95       	lsr	r25
 3e0:	87 95       	ror	r24
 3e2:	96 95       	lsr	r25
 3e4:	87 95       	ror	r24
 3e6:	80 5d       	subi	r24, 0xD0	; 208
 3e8:	8c 83       	std	Y+4, r24	; 0x04
	Buff[4] = '0'+(NUM %10);
 3ea:	98 01       	movw	r18, r16
 3ec:	63 d0       	rcall	.+198    	; 0x4b4 <__umulhisi3>
 3ee:	96 95       	lsr	r25
 3f0:	87 95       	ror	r24
 3f2:	96 95       	lsr	r25
 3f4:	87 95       	ror	r24
 3f6:	96 95       	lsr	r25
 3f8:	87 95       	ror	r24
 3fa:	9c 01       	movw	r18, r24
 3fc:	22 0f       	add	r18, r18
 3fe:	33 1f       	adc	r19, r19
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	82 0f       	add	r24, r18
 40e:	93 1f       	adc	r25, r19
 410:	98 01       	movw	r18, r16
 412:	28 1b       	sub	r18, r24
 414:	39 0b       	sbc	r19, r25
 416:	c9 01       	movw	r24, r18
 418:	80 5d       	subi	r24, 0xD0	; 208
 41a:	8d 83       	std	Y+5, r24	; 0x05
	LCDPuts(Buff);
 41c:	ce 01       	movw	r24, r28
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	cb de       	rcall	.-618    	; 0x1b8 <LCDPuts>
 422:	26 96       	adiw	r28, 0x06	; 6
}
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	f8 94       	cli
 428:	de bf       	out	0x3e, r29	; 62
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	cd bf       	out	0x3d, r28	; 61
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	08 95       	ret

00000438 <main>:
 438:	87 b3       	in	r24, 0x17	; 23


unsigned char pp = 0;
int s = 0;
int main(void){
	DDRB |= 0xf0;				//7~4 LED 3~0 스위치가 연결되어 있다. 상위 니블 7~4까지는 출력을로 설정 하위 니블 3~0 입력으로 설정
 43a:	80 6f       	ori	r24, 0xF0	; 240
 43c:	87 bb       	out	0x17, r24	; 23
	DDRG |= (1<<PG3);			//PG3번에 buzzer 연결되어있음
 43e:	e4 e6       	ldi	r30, 0x64	; 100
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 81       	ld	r24, Z
 444:	88 60       	ori	r24, 0x08	; 8
 446:	80 83       	st	Z, r24
	UDR0 |= 0x00;
 448:	8c b1       	in	r24, 0x0c	; 12
 44a:	8c b9       	out	0x0c, r24	; 12

	measurement_time_Init();
 44c:	2f df       	rcall	.-418    	; 0x2ac <measurement_time_Init>
	MCU_Init();					//LCD 사용을 위한 MCU 설정
 44e:	5a de       	rcall	.-844    	; 0x104 <MCU_Init>
	LCDInit();					//LCD 사용을 위한 초기화 설정
 450:	80 de       	rcall	.-768    	; 0x152 <LCDInit>
		
	while(1){
			LCDMove(0,0);
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	bc de       	rcall	.-648    	; 0x1d0 <LCDMove>
			tNum(PINB);
 458:	86 b3       	in	r24, 0x16	; 22
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	35 df       	rcall	.-406    	; 0x2c8 <tNum>
			LCDMove(1,0);
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	b6 de       	rcall	.-660    	; 0x1d0 <LCDMove>
			tNum(average[0]);
 464:	c4 e0       	ldi	r28, 0x04	; 4
 466:	d1 e0       	ldi	r29, 0x01	; 1
 468:	88 81       	ld	r24, Y
 46a:	90 e0       	ldi	r25, 0x00	; 0
			LCDMove(1,7);
 46c:	2d df       	rcall	.-422    	; 0x2c8 <tNum>
 46e:	67 e0       	ldi	r22, 0x07	; 7
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	ae de       	rcall	.-676    	; 0x1d0 <LCDMove>
			tNum(average[7]);
 474:	8f 81       	ldd	r24, Y+7	; 0x07
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	27 df       	rcall	.-434    	; 0x2c8 <tNum>
 47a:	eb cf       	rjmp	.-42     	; 0x452 <main+0x1a>

0000047c <__divmodsi4>:
 47c:	05 2e       	mov	r0, r21
 47e:	97 fb       	bst	r25, 7
 480:	16 f4       	brtc	.+4      	; 0x486 <__divmodsi4+0xa>
 482:	00 94       	com	r0
 484:	0f d0       	rcall	.+30     	; 0x4a4 <__negsi2>
 486:	57 fd       	sbrc	r21, 7
 488:	05 d0       	rcall	.+10     	; 0x494 <__divmodsi4_neg2>
 48a:	23 d0       	rcall	.+70     	; 0x4d2 <__udivmodsi4>
 48c:	07 fc       	sbrc	r0, 7
 48e:	02 d0       	rcall	.+4      	; 0x494 <__divmodsi4_neg2>
 490:	46 f4       	brtc	.+16     	; 0x4a2 <__divmodsi4_exit>
 492:	08 c0       	rjmp	.+16     	; 0x4a4 <__negsi2>

00000494 <__divmodsi4_neg2>:
 494:	50 95       	com	r21
 496:	40 95       	com	r20
 498:	30 95       	com	r19
 49a:	21 95       	neg	r18
 49c:	3f 4f       	sbci	r19, 0xFF	; 255
 49e:	4f 4f       	sbci	r20, 0xFF	; 255
 4a0:	5f 4f       	sbci	r21, 0xFF	; 255

000004a2 <__divmodsi4_exit>:
 4a2:	08 95       	ret

000004a4 <__negsi2>:
 4a4:	90 95       	com	r25
 4a6:	80 95       	com	r24
 4a8:	70 95       	com	r23
 4aa:	61 95       	neg	r22
 4ac:	7f 4f       	sbci	r23, 0xFF	; 255
 4ae:	8f 4f       	sbci	r24, 0xFF	; 255
 4b0:	9f 4f       	sbci	r25, 0xFF	; 255
 4b2:	08 95       	ret

000004b4 <__umulhisi3>:
 4b4:	a2 9f       	mul	r26, r18
 4b6:	b0 01       	movw	r22, r0
 4b8:	b3 9f       	mul	r27, r19
 4ba:	c0 01       	movw	r24, r0
 4bc:	a3 9f       	mul	r26, r19
 4be:	70 0d       	add	r23, r0
 4c0:	81 1d       	adc	r24, r1
 4c2:	11 24       	eor	r1, r1
 4c4:	91 1d       	adc	r25, r1
 4c6:	b2 9f       	mul	r27, r18
 4c8:	70 0d       	add	r23, r0
 4ca:	81 1d       	adc	r24, r1
 4cc:	11 24       	eor	r1, r1
 4ce:	91 1d       	adc	r25, r1
 4d0:	08 95       	ret

000004d2 <__udivmodsi4>:
 4d2:	a1 e2       	ldi	r26, 0x21	; 33
 4d4:	1a 2e       	mov	r1, r26
 4d6:	aa 1b       	sub	r26, r26
 4d8:	bb 1b       	sub	r27, r27
 4da:	fd 01       	movw	r30, r26
 4dc:	0d c0       	rjmp	.+26     	; 0x4f8 <__udivmodsi4_ep>

000004de <__udivmodsi4_loop>:
 4de:	aa 1f       	adc	r26, r26
 4e0:	bb 1f       	adc	r27, r27
 4e2:	ee 1f       	adc	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	a2 17       	cp	r26, r18
 4e8:	b3 07       	cpc	r27, r19
 4ea:	e4 07       	cpc	r30, r20
 4ec:	f5 07       	cpc	r31, r21
 4ee:	20 f0       	brcs	.+8      	; 0x4f8 <__udivmodsi4_ep>
 4f0:	a2 1b       	sub	r26, r18
 4f2:	b3 0b       	sbc	r27, r19
 4f4:	e4 0b       	sbc	r30, r20
 4f6:	f5 0b       	sbc	r31, r21

000004f8 <__udivmodsi4_ep>:
 4f8:	66 1f       	adc	r22, r22
 4fa:	77 1f       	adc	r23, r23
 4fc:	88 1f       	adc	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	1a 94       	dec	r1
 502:	69 f7       	brne	.-38     	; 0x4de <__udivmodsi4_loop>
 504:	60 95       	com	r22
 506:	70 95       	com	r23
 508:	80 95       	com	r24
 50a:	90 95       	com	r25
 50c:	9b 01       	movw	r18, r22
 50e:	ac 01       	movw	r20, r24
 510:	bd 01       	movw	r22, r26
 512:	cf 01       	movw	r24, r30
 514:	08 95       	ret

00000516 <_exit>:
 516:	f8 94       	cli

00000518 <__stop_program>:
 518:	ff cf       	rjmp	.-2      	; 0x518 <__stop_program>
