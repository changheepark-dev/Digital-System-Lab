
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  000017ca  0000185e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800172  00800172  000018d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001900  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eed  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6d  00000000  00000000  00003929  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d5  00000000  00000000  00004496  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  0000566c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000656  00000000  00000000  000059c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001592  00000000  00000000  0000601a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000075ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	c9 c1       	rjmp	.+914    	; 0x398 <__vector_1>
       6:	00 00       	nop
       8:	da c1       	rjmp	.+948    	; 0x3be <__vector_2>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	e9 c1       	rjmp	.+978    	; 0x3e4 <__vector_4>
      12:	00 00       	nop
      14:	fa c1       	rjmp	.+1012   	; 0x40a <__vector_5>
      16:	00 00       	nop
      18:	0b c2       	rjmp	.+1046   	; 0x430 <__vector_6>
      1a:	00 00       	nop
      1c:	1c c2       	rjmp	.+1080   	; 0x456 <__vector_7>
      1e:	00 00       	nop
      20:	2d c2       	rjmp	.+1114   	; 0x47c <__vector_8>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d8 c0       	rjmp	.+432    	; 0x1e2 <__vector_12>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2d c1       	rjmp	.+602    	; 0x2c4 <__vector_26>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea ec       	ldi	r30, 0xCA	; 202
      a0:	f7 e1       	ldi	r31, 0x17	; 23
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 37       	cpi	r26, 0x72	; 114
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a2 e7       	ldi	r26, 0x72	; 114
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a7 39       	cpi	r26, 0x97	; 151
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	e0 d3       	rcall	.+1984   	; 0x884 <main>
      c4:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <checkbusy>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ca:	8f e8       	ldi	r24, 0x8F	; 143
      cc:	91 e0       	ldi	r25, 0x01	; 1
      ce:	01 97       	sbiw	r24, 0x01	; 1
      d0:	f1 f7       	brne	.-4      	; 0xce <checkbusy+0x4>
      d2:	00 c0       	rjmp	.+0      	; 0xd4 <checkbusy+0xa>
      d4:	00 00       	nop
      d6:	08 95       	ret

000000d8 <write_data>:
      d8:	1f 93       	push	r17
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
      de:	18 2f       	mov	r17, r24
      e0:	c0 e0       	ldi	r28, 0x00	; 0
      e2:	d1 e2       	ldi	r29, 0x21	; 33
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	88 83       	st	Y, r24
      e8:	f0 df       	rcall	.-32     	; 0xca <checkbusy>
      ea:	10 93 00 20 	sts	0x2000, r17	; 0x802000 <__bss_end+0x1e69>
      ee:	82 e0       	ldi	r24, 0x02	; 2
      f0:	88 83       	st	Y, r24
      f2:	87 ec       	ldi	r24, 0xC7	; 199
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	01 97       	sbiw	r24, 0x01	; 1
      f8:	f1 f7       	brne	.-4      	; 0xf6 <write_data+0x1e>
      fa:	00 c0       	rjmp	.+0      	; 0xfc <write_data+0x24>
      fc:	00 00       	nop
      fe:	df 91       	pop	r29
     100:	cf 91       	pop	r28
     102:	1f 91       	pop	r17
     104:	08 95       	ret

00000106 <MCU_Init>:
     106:	80 e8       	ldi	r24, 0x80	; 128
     108:	85 bf       	out	0x35, r24	; 53
     10a:	94 e4       	ldi	r25, 0x44	; 68
     10c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     110:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
     114:	10 92 00 21 	sts	0x2100, r1	; 0x802100 <__bss_end+0x1f69>
     118:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__bss_end+0x1e69>
     11c:	08 95       	ret

0000011e <LCDCommand>:
     11e:	0f 93       	push	r16
     120:	1f 93       	push	r17
     122:	cf 93       	push	r28
     124:	c8 2f       	mov	r28, r24
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	11 e2       	ldi	r17, 0x21	; 33
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	f8 01       	movw	r30, r16
     12e:	80 83       	st	Z, r24
     130:	cc df       	rcall	.-104    	; 0xca <checkbusy>
     132:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__bss_end+0x1e69>
     136:	f8 01       	movw	r30, r16
     138:	10 82       	st	Z, r1
     13a:	c1 50       	subi	r28, 0x01	; 1
     13c:	c2 30       	cpi	r28, 0x02	; 2
     13e:	30 f4       	brcc	.+12     	; 0x14c <LCDCommand+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     140:	8f e3       	ldi	r24, 0x3F	; 63
     142:	9f e1       	ldi	r25, 0x1F	; 31
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <LCDCommand+0x26>
     148:	00 c0       	rjmp	.+0      	; 0x14a <LCDCommand+0x2c>
     14a:	00 00       	nop
     14c:	cf 91       	pop	r28
     14e:	1f 91       	pop	r17
     150:	0f 91       	pop	r16
     152:	08 95       	ret

00000154 <LCDInit>:
     154:	82 e0       	ldi	r24, 0x02	; 2
     156:	80 93 00 21 	sts	0x2100, r24	; 0x802100 <__bss_end+0x1f69>
     15a:	8f e3       	ldi	r24, 0x3F	; 63
     15c:	9f e1       	ldi	r25, 0x1F	; 31
     15e:	01 97       	sbiw	r24, 0x01	; 1
     160:	f1 f7       	brne	.-4      	; 0x15e <LCDInit+0xa>
     162:	00 c0       	rjmp	.+0      	; 0x164 <LCDInit+0x10>
     164:	00 00       	nop
     166:	8f e5       	ldi	r24, 0x5F	; 95
     168:	9a ee       	ldi	r25, 0xEA	; 234
     16a:	01 97       	sbiw	r24, 0x01	; 1
     16c:	f1 f7       	brne	.-4      	; 0x16a <LCDInit+0x16>
     16e:	00 c0       	rjmp	.+0      	; 0x170 <LCDInit+0x1c>
     170:	00 00       	nop
     172:	80 e3       	ldi	r24, 0x30	; 48
     174:	d4 df       	rcall	.-88     	; 0x11e <LCDCommand>
     176:	8f e1       	ldi	r24, 0x1F	; 31
     178:	9e e4       	ldi	r25, 0x4E	; 78
     17a:	01 97       	sbiw	r24, 0x01	; 1
     17c:	f1 f7       	brne	.-4      	; 0x17a <LCDInit+0x26>
     17e:	00 c0       	rjmp	.+0      	; 0x180 <LCDInit+0x2c>
     180:	00 00       	nop
     182:	80 e3       	ldi	r24, 0x30	; 48
     184:	cc df       	rcall	.-104    	; 0x11e <LCDCommand>
     186:	8f e9       	ldi	r24, 0x9F	; 159
     188:	9f e0       	ldi	r25, 0x0F	; 15
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	f1 f7       	brne	.-4      	; 0x18a <LCDInit+0x36>
     18e:	00 c0       	rjmp	.+0      	; 0x190 <LCDInit+0x3c>
     190:	00 00       	nop
     192:	82 e3       	ldi	r24, 0x32	; 50
     194:	c4 df       	rcall	.-120    	; 0x11e <LCDCommand>
     196:	88 e3       	ldi	r24, 0x38	; 56
     198:	c2 df       	rcall	.-124    	; 0x11e <LCDCommand>
     19a:	88 e0       	ldi	r24, 0x08	; 8
     19c:	c0 df       	rcall	.-128    	; 0x11e <LCDCommand>
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	be df       	rcall	.-132    	; 0x11e <LCDCommand>
     1a2:	86 e0       	ldi	r24, 0x06	; 6
     1a4:	bc df       	rcall	.-136    	; 0x11e <LCDCommand>
     1a6:	8c e0       	ldi	r24, 0x0C	; 12
     1a8:	ba cf       	rjmp	.-140    	; 0x11e <LCDCommand>
     1aa:	08 95       	ret

000001ac <LCDPutchar>:
     1ac:	cf 93       	push	r28
     1ae:	c8 2f       	mov	r28, r24
     1b0:	8c df       	rcall	.-232    	; 0xca <checkbusy>
     1b2:	8c 2f       	mov	r24, r28
     1b4:	91 df       	rcall	.-222    	; 0xd8 <write_data>
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <LCDPuts>:
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	ec 01       	movw	r28, r24
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <LCDPuts+0xc>
     1c2:	f4 df       	rcall	.-24     	; 0x1ac <LCDPutchar>
     1c4:	21 96       	adiw	r28, 0x01	; 1
     1c6:	88 81       	ld	r24, Y
     1c8:	81 11       	cpse	r24, r1
     1ca:	fb cf       	rjmp	.-10     	; 0x1c2 <LCDPuts+0x8>
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	08 95       	ret

000001d2 <LCDMove>:
     1d2:	90 e4       	ldi	r25, 0x40	; 64
     1d4:	89 9f       	mul	r24, r25
     1d6:	60 0d       	add	r22, r0
     1d8:	11 24       	eor	r1, r1
     1da:	86 2f       	mov	r24, r22
     1dc:	80 68       	ori	r24, 0x80	; 128
     1de:	9f cf       	rjmp	.-194    	; 0x11e <LCDCommand>
     1e0:	08 95       	ret

000001e2 <__vector_12>:
unsigned char average[7] = {0};
unsigned char av = 0; 
unsigned char measurement;
// sensor
unsigned char check = 0;
ISR(TIMER1_COMPA_vect) {
     1e2:	1f 92       	push	r1
     1e4:	0f 92       	push	r0
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
     1ec:	0b b6       	in	r0, 0x3b	; 59
     1ee:	0f 92       	push	r0
     1f0:	2f 93       	push	r18
     1f2:	3f 93       	push	r19
     1f4:	4f 93       	push	r20
     1f6:	5f 93       	push	r21
     1f8:	6f 93       	push	r22
     1fa:	7f 93       	push	r23
     1fc:	8f 93       	push	r24
     1fe:	9f 93       	push	r25
     200:	ef 93       	push	r30
     202:	ff 93       	push	r31
	unsigned char temp = time_average[count];
     204:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <count>
     208:	e7 2f       	mov	r30, r23
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	e3 57       	subi	r30, 0x73	; 115
     20e:	fe 4f       	sbci	r31, 0xFE	; 254
     210:	90 81       	ld	r25, Z
	time_average[count] = check;
     212:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <check>
     216:	60 83       	st	Z, r22
	for (av = 0; av < 8; av++) {
     218:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <av>
     21c:	27 c0       	rjmp	.+78     	; 0x26c <__vector_12+0x8a>
		if (((temp ^ time_average[count]) >> av) & 0x01) {
     21e:	29 2f       	mov	r18, r25
     220:	26 27       	eor	r18, r22
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	48 2f       	mov	r20, r24
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	08 2e       	mov	r0, r24
     22a:	02 c0       	rjmp	.+4      	; 0x230 <__vector_12+0x4e>
     22c:	35 95       	asr	r19
     22e:	27 95       	ror	r18
     230:	0a 94       	dec	r0
     232:	e2 f7       	brpl	.-8      	; 0x22c <__vector_12+0x4a>
     234:	20 ff       	sbrs	r18, 0
     236:	17 c0       	rjmp	.+46     	; 0x266 <__vector_12+0x84>
			if ((temp >> av) & 0x01) {
     238:	29 2f       	mov	r18, r25
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	08 2e       	mov	r0, r24
     23e:	02 c0       	rjmp	.+4      	; 0x244 <__vector_12+0x62>
     240:	35 95       	asr	r19
     242:	27 95       	ror	r18
     244:	0a 94       	dec	r0
     246:	e2 f7       	brpl	.-8      	; 0x240 <__vector_12+0x5e>
     248:	20 ff       	sbrs	r18, 0
     24a:	07 c0       	rjmp	.+14     	; 0x25a <__vector_12+0x78>
				average[av] --;
     24c:	fa 01       	movw	r30, r20
     24e:	ec 57       	subi	r30, 0x7C	; 124
     250:	fe 4f       	sbci	r31, 0xFE	; 254
     252:	20 81       	ld	r18, Z
     254:	21 50       	subi	r18, 0x01	; 1
     256:	20 83       	st	Z, r18
     258:	06 c0       	rjmp	.+12     	; 0x266 <__vector_12+0x84>
			}
			else {
				average[av] ++;
     25a:	fa 01       	movw	r30, r20
     25c:	ec 57       	subi	r30, 0x7C	; 124
     25e:	fe 4f       	sbci	r31, 0xFE	; 254
     260:	20 81       	ld	r18, Z
     262:	2f 5f       	subi	r18, 0xFF	; 255
     264:	20 83       	st	Z, r18
// sensor
unsigned char check = 0;
ISR(TIMER1_COMPA_vect) {
	unsigned char temp = time_average[count];
	time_average[count] = check;
	for (av = 0; av < 8; av++) {
     266:	8f 5f       	subi	r24, 0xFF	; 255
     268:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <av>
     26c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <av>
     270:	88 30       	cpi	r24, 0x08	; 8
     272:	a8 f2       	brcs	.-86     	; 0x21e <__vector_12+0x3c>
				average[av] ++;
			}
		}
	}
	
	count ++;
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	87 0f       	add	r24, r23
     278:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <count>
	if (count == average_count) {
     27c:	8a 30       	cpi	r24, 0x0A	; 10
     27e:	11 f4       	brne	.+4      	; 0x284 <__vector_12+0xa2>
		count = 0;
     280:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <count>
	}
	measurement = 1;
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <measurement>
}
     28a:	ff 91       	pop	r31
     28c:	ef 91       	pop	r30
     28e:	9f 91       	pop	r25
     290:	8f 91       	pop	r24
     292:	7f 91       	pop	r23
     294:	6f 91       	pop	r22
     296:	5f 91       	pop	r21
     298:	4f 91       	pop	r20
     29a:	3f 91       	pop	r19
     29c:	2f 91       	pop	r18
     29e:	0f 90       	pop	r0
     2a0:	0b be       	out	0x3b, r0	; 59
     2a2:	0f 90       	pop	r0
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	0f 90       	pop	r0
     2a8:	1f 90       	pop	r1
     2aa:	18 95       	reti

000002ac <measurement_time_Init>:
void measurement_time_Init() {						// 초음파 계측 주기 타이머
	TCCR1A = (0<<WGM11) | (0<<WGM10);
     2ac:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
     2ae:	8d e0       	ldi	r24, 0x0D	; 13
     2b0:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
     2b2:	87 b7       	in	r24, 0x37	; 55
     2b4:	80 61       	ori	r24, 0x10	; 16
     2b6:	87 bf       	out	0x37, r24	; 55
	OCR1A = 15624 * measurement_time;
     2b8:	84 e3       	ldi	r24, 0x34	; 52
     2ba:	9c e0       	ldi	r25, 0x0C	; 12
     2bc:	9b bd       	out	0x2b, r25	; 43
     2be:	8a bd       	out	0x2a, r24	; 42
	sei();
     2c0:	78 94       	sei
     2c2:	08 95       	ret

000002c4 <__vector_26>:
}

unsigned char h = 12, m = 30, s = 30, l = 0;
unsigned int front[7] = {0};
ISR(TIMER3_COMPA_vect) {
     2c4:	1f 92       	push	r1
     2c6:	0f 92       	push	r0
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	0f 92       	push	r0
     2cc:	11 24       	eor	r1, r1
     2ce:	0b b6       	in	r0, 0x3b	; 59
     2d0:	0f 92       	push	r0
     2d2:	2f 93       	push	r18
     2d4:	3f 93       	push	r19
     2d6:	8f 93       	push	r24
     2d8:	9f 93       	push	r25
     2da:	ef 93       	push	r30
     2dc:	ff 93       	push	r31
	// 시계
	s++;
     2de:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <s>
     2e2:	8f 5f       	subi	r24, 0xFF	; 255
     2e4:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <s>
	if (s > 59) {m++, s = 0;}
     2e8:	8c 33       	cpi	r24, 0x3C	; 60
     2ea:	38 f0       	brcs	.+14     	; 0x2fa <__vector_26+0x36>
     2ec:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <m>
     2f0:	8f 5f       	subi	r24, 0xFF	; 255
     2f2:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <m>
     2f6:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <s>
	if (m > 59) {h++, m = 0;}
     2fa:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <m>
     2fe:	8c 33       	cpi	r24, 0x3C	; 60
     300:	38 f0       	brcs	.+14     	; 0x310 <__vector_26+0x4c>
     302:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <h>
     306:	8f 5f       	subi	r24, 0xFF	; 255
     308:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <h>
     30c:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <m>
	if (h > 23) {h = 0;}
     310:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <h>
     314:	88 31       	cpi	r24, 0x18	; 24
     316:	10 f0       	brcs	.+4      	; 0x31c <__vector_26+0x58>
     318:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <h>
	sei();
}

unsigned char h = 12, m = 30, s = 30, l = 0;
unsigned int front[7] = {0};
ISR(TIMER3_COMPA_vect) {
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	1b c0       	rjmp	.+54     	; 0x356 <__vector_26+0x92>
	if (m > 59) {h++, m = 0;}
	if (h > 23) {h = 0;}

	// 경과 시간 측정
	for (char a = 0 ; a < 7 ; a++) {
		if (average[a] <= (average_count * standard / 100)) {
     320:	82 2f       	mov	r24, r18
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	fc 01       	movw	r30, r24
     326:	ec 57       	subi	r30, 0x7C	; 124
     328:	fe 4f       	sbci	r31, 0xFE	; 254
     32a:	30 81       	ld	r19, Z
     32c:	36 30       	cpi	r19, 0x06	; 6
     32e:	58 f4       	brcc	.+22     	; 0x346 <__vector_26+0x82>
			front[a]++;
     330:	88 0f       	add	r24, r24
     332:	99 1f       	adc	r25, r25
     334:	fc 01       	movw	r30, r24
     336:	ed 58       	subi	r30, 0x8D	; 141
     338:	fe 4f       	sbci	r31, 0xFE	; 254
     33a:	80 81       	ld	r24, Z
     33c:	91 81       	ldd	r25, Z+1	; 0x01
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	91 83       	std	Z+1, r25	; 0x01
     342:	80 83       	st	Z, r24
     344:	07 c0       	rjmp	.+14     	; 0x354 <__vector_26+0x90>
		}
		else {
			front[a] = 0;
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	fc 01       	movw	r30, r24
     34c:	ed 58       	subi	r30, 0x8D	; 141
     34e:	fe 4f       	sbci	r31, 0xFE	; 254
     350:	11 82       	std	Z+1, r1	; 0x01
     352:	10 82       	st	Z, r1
	if (s > 59) {m++, s = 0;}
	if (m > 59) {h++, m = 0;}
	if (h > 23) {h = 0;}

	// 경과 시간 측정
	for (char a = 0 ; a < 7 ; a++) {
     354:	2f 5f       	subi	r18, 0xFF	; 255
     356:	27 30       	cpi	r18, 0x07	; 7
     358:	18 f3       	brcs	.-58     	; 0x320 <__vector_26+0x5c>
		}
		else {
			front[a] = 0;
		}
	}
}
     35a:	ff 91       	pop	r31
     35c:	ef 91       	pop	r30
     35e:	9f 91       	pop	r25
     360:	8f 91       	pop	r24
     362:	3f 91       	pop	r19
     364:	2f 91       	pop	r18
     366:	0f 90       	pop	r0
     368:	0b be       	out	0x3b, r0	; 59
     36a:	0f 90       	pop	r0
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	0f 90       	pop	r0
     370:	1f 90       	pop	r1
     372:	18 95       	reti

00000374 <time_Init>:
void time_Init() {									// 시간 타이머
	TCCR3A = (0<<WGM11) | (0<<WGM10);
     374:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
     378:	8d e0       	ldi	r24, 0x0D	; 13
     37a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	ETIMSK |= (1 << OCIE3A);
     37e:	ed e7       	ldi	r30, 0x7D	; 125
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	80 81       	ld	r24, Z
     384:	80 61       	ori	r24, 0x10	; 16
     386:	80 83       	st	Z, r24
	OCR3A = 15624;
     388:	88 e0       	ldi	r24, 0x08	; 8
     38a:	9d e3       	ldi	r25, 0x3D	; 61
     38c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     390:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	sei();
     394:	78 94       	sei
     396:	08 95       	ret

00000398 <__vector_1>:
}


// 후면 감지
char ckd = 0;
ISR(INT0_vect) {
     398:	1f 92       	push	r1
     39a:	0f 92       	push	r0
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	0f 92       	push	r0
     3a0:	11 24       	eor	r1, r1
     3a2:	8f 93       	push	r24
	if (ckd == 0) {ckd = 5;}
     3a4:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     3a8:	81 11       	cpse	r24, r1
     3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <__vector_1+0x1a>
     3ac:	85 e0       	ldi	r24, 0x05	; 5
     3ae:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
}
     3b2:	8f 91       	pop	r24
     3b4:	0f 90       	pop	r0
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	0f 90       	pop	r0
     3ba:	1f 90       	pop	r1
     3bc:	18 95       	reti

000003be <__vector_2>:
ISR(INT1_vect) {
     3be:	1f 92       	push	r1
     3c0:	0f 92       	push	r0
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	8f 93       	push	r24
	if (ckd == 0) {ckd = 6;}
     3ca:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     3ce:	81 11       	cpse	r24, r1
     3d0:	03 c0       	rjmp	.+6      	; 0x3d8 <__vector_2+0x1a>
     3d2:	86 e0       	ldi	r24, 0x06	; 6
     3d4:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
}
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_4>:
ISR(INT3_vect) {
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
	if (ckd == 0) {ckd = 7;}
     3f0:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     3f4:	81 11       	cpse	r24, r1
     3f6:	03 c0       	rjmp	.+6      	; 0x3fe <__vector_4+0x1a>
     3f8:	87 e0       	ldi	r24, 0x07	; 7
     3fa:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
}
     3fe:	8f 91       	pop	r24
     400:	0f 90       	pop	r0
     402:	0f be       	out	0x3f, r0	; 63
     404:	0f 90       	pop	r0
     406:	1f 90       	pop	r1
     408:	18 95       	reti

0000040a <__vector_5>:
ISR(INT4_vect) {
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	0f 92       	push	r0
     412:	11 24       	eor	r1, r1
     414:	8f 93       	push	r24
	if (ckd == 0) {ckd = 1;}
     416:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     41a:	81 11       	cpse	r24, r1
     41c:	03 c0       	rjmp	.+6      	; 0x424 <__vector_5+0x1a>
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
}
     424:	8f 91       	pop	r24
     426:	0f 90       	pop	r0
     428:	0f be       	out	0x3f, r0	; 63
     42a:	0f 90       	pop	r0
     42c:	1f 90       	pop	r1
     42e:	18 95       	reti

00000430 <__vector_6>:
ISR(INT5_vect) {
     430:	1f 92       	push	r1
     432:	0f 92       	push	r0
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	0f 92       	push	r0
     438:	11 24       	eor	r1, r1
     43a:	8f 93       	push	r24
	if (ckd == 0) {ckd = 2;}
     43c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     440:	81 11       	cpse	r24, r1
     442:	03 c0       	rjmp	.+6      	; 0x44a <__vector_6+0x1a>
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
}
     44a:	8f 91       	pop	r24
     44c:	0f 90       	pop	r0
     44e:	0f be       	out	0x3f, r0	; 63
     450:	0f 90       	pop	r0
     452:	1f 90       	pop	r1
     454:	18 95       	reti

00000456 <__vector_7>:
ISR(INT6_vect) {
     456:	1f 92       	push	r1
     458:	0f 92       	push	r0
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	0f 92       	push	r0
     45e:	11 24       	eor	r1, r1
     460:	8f 93       	push	r24
	if (ckd == 0) {ckd = 3;}
     462:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     466:	81 11       	cpse	r24, r1
     468:	03 c0       	rjmp	.+6      	; 0x470 <__vector_7+0x1a>
     46a:	83 e0       	ldi	r24, 0x03	; 3
     46c:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
}
     470:	8f 91       	pop	r24
     472:	0f 90       	pop	r0
     474:	0f be       	out	0x3f, r0	; 63
     476:	0f 90       	pop	r0
     478:	1f 90       	pop	r1
     47a:	18 95       	reti

0000047c <__vector_8>:
ISR(INT7_vect) {
     47c:	1f 92       	push	r1
     47e:	0f 92       	push	r0
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	0f 92       	push	r0
     484:	11 24       	eor	r1, r1
     486:	8f 93       	push	r24
	if (ckd == 0) {ckd = 4;}
     488:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     48c:	81 11       	cpse	r24, r1
     48e:	03 c0       	rjmp	.+6      	; 0x496 <__vector_8+0x1a>
     490:	84 e0       	ldi	r24, 0x04	; 4
     492:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
}
     496:	8f 91       	pop	r24
     498:	0f 90       	pop	r0
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	0f 90       	pop	r0
     49e:	1f 90       	pop	r1
     4a0:	18 95       	reti

000004a2 <INTR_Init>:

void INTR_Init() {
	DDRD = 0x04;
     4a2:	84 e0       	ldi	r24, 0x04	; 4
     4a4:	81 bb       	out	0x11, r24	; 17
	PORTD = 0xfb;
     4a6:	8b ef       	ldi	r24, 0xFB	; 251
     4a8:	82 bb       	out	0x12, r24	; 18
	
	EICRA = 0xff;		//하강엣지 트리거
     4aa:	9f ef       	ldi	r25, 0xFF	; 255
     4ac:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = 0xff;
     4b0:	9a bf       	out	0x3a, r25	; 58
	EIMSK = 0xfb;
     4b2:	89 bf       	out	0x39, r24	; 57
	
	DDRE = 0x08;
     4b4:	88 e0       	ldi	r24, 0x08	; 8
     4b6:	82 b9       	out	0x02, r24	; 2
	PORTE = 0xf7;
     4b8:	87 ef       	ldi	r24, 0xF7	; 247
     4ba:	83 b9       	out	0x03, r24	; 3
	sei();
     4bc:	78 94       	sei
     4be:	08 95       	ret

000004c0 <tNum2>:
}


int tNum2(unsigned int NUM) {
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	00 d0       	rcall	.+0      	; 0x4c6 <tNum2+0x6>
     4c6:	1f 92       	push	r1
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	ac 01       	movw	r20, r24
	unsigned char Buff[3] = "0";
     4ce:	1b 82       	std	Y+3, r1	; 0x03
	Buff[0] = '0'+((NUM %100)/10);
     4d0:	9c 01       	movw	r18, r24
     4d2:	36 95       	lsr	r19
     4d4:	27 95       	ror	r18
     4d6:	36 95       	lsr	r19
     4d8:	27 95       	ror	r18
     4da:	ab e7       	ldi	r26, 0x7B	; 123
     4dc:	b4 e1       	ldi	r27, 0x14	; 20
     4de:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__umulhisi3>
     4e2:	9c 01       	movw	r18, r24
     4e4:	36 95       	lsr	r19
     4e6:	27 95       	ror	r18
     4e8:	64 e6       	ldi	r22, 0x64	; 100
     4ea:	62 9f       	mul	r22, r18
     4ec:	c0 01       	movw	r24, r0
     4ee:	63 9f       	mul	r22, r19
     4f0:	90 0d       	add	r25, r0
     4f2:	11 24       	eor	r1, r1
     4f4:	9a 01       	movw	r18, r20
     4f6:	28 1b       	sub	r18, r24
     4f8:	39 0b       	sbc	r19, r25
     4fa:	ad ec       	ldi	r26, 0xCD	; 205
     4fc:	bc ec       	ldi	r27, 0xCC	; 204
     4fe:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__umulhisi3>
     502:	96 95       	lsr	r25
     504:	87 95       	ror	r24
     506:	96 95       	lsr	r25
     508:	87 95       	ror	r24
     50a:	96 95       	lsr	r25
     50c:	87 95       	ror	r24
     50e:	80 5d       	subi	r24, 0xD0	; 208
     510:	89 83       	std	Y+1, r24	; 0x01
	Buff[1] = '0'+(NUM %10);
     512:	9a 01       	movw	r18, r20
     514:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__umulhisi3>
     518:	96 95       	lsr	r25
     51a:	87 95       	ror	r24
     51c:	96 95       	lsr	r25
     51e:	87 95       	ror	r24
     520:	96 95       	lsr	r25
     522:	87 95       	ror	r24
     524:	9c 01       	movw	r18, r24
     526:	22 0f       	add	r18, r18
     528:	33 1f       	adc	r19, r19
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	88 0f       	add	r24, r24
     534:	99 1f       	adc	r25, r25
     536:	82 0f       	add	r24, r18
     538:	93 1f       	adc	r25, r19
     53a:	9a 01       	movw	r18, r20
     53c:	28 1b       	sub	r18, r24
     53e:	39 0b       	sbc	r19, r25
     540:	c9 01       	movw	r24, r18
     542:	80 5d       	subi	r24, 0xD0	; 208
     544:	8a 83       	std	Y+2, r24	; 0x02
	LCDPuts(Buff);
     546:	ce 01       	movw	r24, r28
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	37 de       	rcall	.-914    	; 0x1ba <LCDPuts>
}
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	08 95       	ret

00000558 <tNum3>:
int tNum3(unsigned int NUM) {
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	00 d0       	rcall	.+0      	; 0x55e <tNum3+0x6>
     55e:	00 d0       	rcall	.+0      	; 0x560 <tNum3+0x8>
     560:	cd b7       	in	r28, 0x3d	; 61
     562:	de b7       	in	r29, 0x3e	; 62
     564:	ac 01       	movw	r20, r24
	unsigned char Buff[4] = "0";
     566:	1c 82       	std	Y+4, r1	; 0x04
     568:	1b 82       	std	Y+3, r1	; 0x03
	Buff[0] = '0'+((NUM %1000)/100);
     56a:	9c 01       	movw	r18, r24
     56c:	36 95       	lsr	r19
     56e:	27 95       	ror	r18
     570:	36 95       	lsr	r19
     572:	27 95       	ror	r18
     574:	36 95       	lsr	r19
     576:	27 95       	ror	r18
     578:	a5 ec       	ldi	r26, 0xC5	; 197
     57a:	b0 e2       	ldi	r27, 0x20	; 32
     57c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__umulhisi3>
     580:	92 95       	swap	r25
     582:	82 95       	swap	r24
     584:	8f 70       	andi	r24, 0x0F	; 15
     586:	89 27       	eor	r24, r25
     588:	9f 70       	andi	r25, 0x0F	; 15
     58a:	89 27       	eor	r24, r25
     58c:	68 ee       	ldi	r22, 0xE8	; 232
     58e:	73 e0       	ldi	r23, 0x03	; 3
     590:	86 9f       	mul	r24, r22
     592:	90 01       	movw	r18, r0
     594:	87 9f       	mul	r24, r23
     596:	30 0d       	add	r19, r0
     598:	96 9f       	mul	r25, r22
     59a:	30 0d       	add	r19, r0
     59c:	11 24       	eor	r1, r1
     59e:	ca 01       	movw	r24, r20
     5a0:	82 1b       	sub	r24, r18
     5a2:	93 0b       	sbc	r25, r19
     5a4:	9c 01       	movw	r18, r24
     5a6:	36 95       	lsr	r19
     5a8:	27 95       	ror	r18
     5aa:	36 95       	lsr	r19
     5ac:	27 95       	ror	r18
     5ae:	ab e7       	ldi	r26, 0x7B	; 123
     5b0:	b4 e1       	ldi	r27, 0x14	; 20
     5b2:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__umulhisi3>
     5b6:	96 95       	lsr	r25
     5b8:	87 95       	ror	r24
     5ba:	80 5d       	subi	r24, 0xD0	; 208
     5bc:	89 83       	std	Y+1, r24	; 0x01
	Buff[1] = '0'+((NUM %100)/10);
     5be:	9a 01       	movw	r18, r20
     5c0:	36 95       	lsr	r19
     5c2:	27 95       	ror	r18
     5c4:	36 95       	lsr	r19
     5c6:	27 95       	ror	r18
     5c8:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__umulhisi3>
     5cc:	9c 01       	movw	r18, r24
     5ce:	36 95       	lsr	r19
     5d0:	27 95       	ror	r18
     5d2:	64 e6       	ldi	r22, 0x64	; 100
     5d4:	62 9f       	mul	r22, r18
     5d6:	c0 01       	movw	r24, r0
     5d8:	63 9f       	mul	r22, r19
     5da:	90 0d       	add	r25, r0
     5dc:	11 24       	eor	r1, r1
     5de:	9a 01       	movw	r18, r20
     5e0:	28 1b       	sub	r18, r24
     5e2:	39 0b       	sbc	r19, r25
     5e4:	ad ec       	ldi	r26, 0xCD	; 205
     5e6:	bc ec       	ldi	r27, 0xCC	; 204
     5e8:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__umulhisi3>
     5ec:	96 95       	lsr	r25
     5ee:	87 95       	ror	r24
     5f0:	96 95       	lsr	r25
     5f2:	87 95       	ror	r24
     5f4:	96 95       	lsr	r25
     5f6:	87 95       	ror	r24
     5f8:	80 5d       	subi	r24, 0xD0	; 208
     5fa:	8a 83       	std	Y+2, r24	; 0x02
	Buff[2] = '0'+(NUM %10);
     5fc:	9a 01       	movw	r18, r20
     5fe:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__umulhisi3>
     602:	96 95       	lsr	r25
     604:	87 95       	ror	r24
     606:	96 95       	lsr	r25
     608:	87 95       	ror	r24
     60a:	96 95       	lsr	r25
     60c:	87 95       	ror	r24
     60e:	9c 01       	movw	r18, r24
     610:	22 0f       	add	r18, r18
     612:	33 1f       	adc	r19, r19
     614:	88 0f       	add	r24, r24
     616:	99 1f       	adc	r25, r25
     618:	88 0f       	add	r24, r24
     61a:	99 1f       	adc	r25, r25
     61c:	88 0f       	add	r24, r24
     61e:	99 1f       	adc	r25, r25
     620:	82 0f       	add	r24, r18
     622:	93 1f       	adc	r25, r19
     624:	9a 01       	movw	r18, r20
     626:	28 1b       	sub	r18, r24
     628:	39 0b       	sbc	r19, r25
     62a:	c9 01       	movw	r24, r18
     62c:	80 5d       	subi	r24, 0xD0	; 208
     62e:	8b 83       	std	Y+3, r24	; 0x03
	LCDPuts(Buff);
     630:	ce 01       	movw	r24, r28
     632:	01 96       	adiw	r24, 0x01	; 1
     634:	c2 dd       	rcall	.-1148   	; 0x1ba <LCDPuts>
}
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <Watch>:
int Watch(unsigned int y) {
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	2d 97       	sbiw	r28, 0x0d	; 13
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	f8 94       	cli
     652:	de bf       	out	0x3e, r29	; 62
     654:	0f be       	out	0x3f, r0	; 63
     656:	cd bf       	out	0x3d, r28	; 61
	LCDMove(y,0);
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	bb dd       	rcall	.-1162   	; 0x1d2 <LCDMove>
	unsigned char wc[13] = "0";
     65c:	fe 01       	movw	r30, r28
     65e:	33 96       	adiw	r30, 0x03	; 3
     660:	8b e0       	ldi	r24, 0x0B	; 11
     662:	df 01       	movw	r26, r30
     664:	1d 92       	st	X+, r1
     666:	8a 95       	dec	r24
     668:	e9 f7       	brne	.-6      	; 0x664 <Watch+0x20>
	wc[0] = '0'+((h %100)/10);
     66a:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <h>
     66e:	29 e2       	ldi	r18, 0x29	; 41
     670:	92 9f       	mul	r25, r18
     672:	81 2d       	mov	r24, r1
     674:	11 24       	eor	r1, r1
     676:	82 95       	swap	r24
     678:	8f 70       	andi	r24, 0x0F	; 15
     67a:	44 e6       	ldi	r20, 0x64	; 100
     67c:	39 2f       	mov	r19, r25
     67e:	84 9f       	mul	r24, r20
     680:	30 19       	sub	r19, r0
     682:	11 24       	eor	r1, r1
     684:	8d ec       	ldi	r24, 0xCD	; 205
     686:	38 9f       	mul	r19, r24
     688:	31 2d       	mov	r19, r1
     68a:	11 24       	eor	r1, r1
     68c:	36 95       	lsr	r19
     68e:	36 95       	lsr	r19
     690:	36 95       	lsr	r19
     692:	30 5d       	subi	r19, 0xD0	; 208
     694:	39 83       	std	Y+1, r19	; 0x01
	wc[1] = '0'+(h %10);
     696:	98 9f       	mul	r25, r24
     698:	31 2d       	mov	r19, r1
     69a:	11 24       	eor	r1, r1
     69c:	36 95       	lsr	r19
     69e:	36 95       	lsr	r19
     6a0:	36 95       	lsr	r19
     6a2:	33 0f       	add	r19, r19
     6a4:	53 2f       	mov	r21, r19
     6a6:	55 0f       	add	r21, r21
     6a8:	55 0f       	add	r21, r21
     6aa:	35 0f       	add	r19, r21
     6ac:	93 1b       	sub	r25, r19
     6ae:	90 5d       	subi	r25, 0xD0	; 208
     6b0:	9a 83       	std	Y+2, r25	; 0x02
	wc[2] = 'h';
     6b2:	98 e6       	ldi	r25, 0x68	; 104
     6b4:	9b 83       	std	Y+3, r25	; 0x03
	wc[3] = ' ';
     6b6:	60 e2       	ldi	r22, 0x20	; 32
     6b8:	6c 83       	std	Y+4, r22	; 0x04
	
	wc[4] = '0'+((m %100)/10);
     6ba:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <m>
     6be:	92 9f       	mul	r25, r18
     6c0:	31 2d       	mov	r19, r1
     6c2:	11 24       	eor	r1, r1
     6c4:	32 95       	swap	r19
     6c6:	3f 70       	andi	r19, 0x0F	; 15
     6c8:	b9 2f       	mov	r27, r25
     6ca:	34 9f       	mul	r19, r20
     6cc:	b0 19       	sub	r27, r0
     6ce:	11 24       	eor	r1, r1
     6d0:	b8 9f       	mul	r27, r24
     6d2:	31 2d       	mov	r19, r1
     6d4:	11 24       	eor	r1, r1
     6d6:	36 95       	lsr	r19
     6d8:	36 95       	lsr	r19
     6da:	36 95       	lsr	r19
     6dc:	30 5d       	subi	r19, 0xD0	; 208
     6de:	3d 83       	std	Y+5, r19	; 0x05
	wc[5] = '0'+(m %10);
     6e0:	98 9f       	mul	r25, r24
     6e2:	31 2d       	mov	r19, r1
     6e4:	11 24       	eor	r1, r1
     6e6:	36 95       	lsr	r19
     6e8:	36 95       	lsr	r19
     6ea:	36 95       	lsr	r19
     6ec:	33 0f       	add	r19, r19
     6ee:	53 2f       	mov	r21, r19
     6f0:	55 0f       	add	r21, r21
     6f2:	55 0f       	add	r21, r21
     6f4:	35 0f       	add	r19, r21
     6f6:	93 1b       	sub	r25, r19
     6f8:	90 5d       	subi	r25, 0xD0	; 208
     6fa:	9e 83       	std	Y+6, r25	; 0x06
	wc[6] = 'm';
     6fc:	9d e6       	ldi	r25, 0x6D	; 109
     6fe:	9f 83       	std	Y+7, r25	; 0x07
	wc[7] = ' ';
     700:	68 87       	std	Y+8, r22	; 0x08
	
	wc[8] = '0'+((s %100)/10);
     702:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <s>
     706:	92 9f       	mul	r25, r18
     708:	21 2d       	mov	r18, r1
     70a:	11 24       	eor	r1, r1
     70c:	22 95       	swap	r18
     70e:	2f 70       	andi	r18, 0x0F	; 15
     710:	39 2f       	mov	r19, r25
     712:	24 9f       	mul	r18, r20
     714:	30 19       	sub	r19, r0
     716:	11 24       	eor	r1, r1
     718:	38 9f       	mul	r19, r24
     71a:	21 2d       	mov	r18, r1
     71c:	11 24       	eor	r1, r1
     71e:	26 95       	lsr	r18
     720:	26 95       	lsr	r18
     722:	26 95       	lsr	r18
     724:	20 5d       	subi	r18, 0xD0	; 208
     726:	29 87       	std	Y+9, r18	; 0x09
	wc[9] = '0'+(s %10);
     728:	98 9f       	mul	r25, r24
     72a:	81 2d       	mov	r24, r1
     72c:	11 24       	eor	r1, r1
     72e:	86 95       	lsr	r24
     730:	86 95       	lsr	r24
     732:	86 95       	lsr	r24
     734:	88 0f       	add	r24, r24
     736:	28 2f       	mov	r18, r24
     738:	22 0f       	add	r18, r18
     73a:	22 0f       	add	r18, r18
     73c:	82 0f       	add	r24, r18
     73e:	98 1b       	sub	r25, r24
     740:	90 5d       	subi	r25, 0xD0	; 208
     742:	9a 87       	std	Y+10, r25	; 0x0a
	wc[10] = 's';
     744:	83 e7       	ldi	r24, 0x73	; 115
     746:	8b 87       	std	Y+11, r24	; 0x0b
	LCDPuts(wc);
     748:	ce 01       	movw	r24, r28
     74a:	01 96       	adiw	r24, 0x01	; 1
     74c:	36 dd       	rcall	.-1428   	; 0x1ba <LCDPuts>
}
     74e:	2d 96       	adiw	r28, 0x0d	; 13
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	de bf       	out	0x3e, r29	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	cd bf       	out	0x3d, r28	; 61
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <bz>:

int bz(unsigned int a, unsigned int b) {
     760:	8f 92       	push	r8
     762:	9f 92       	push	r9
     764:	af 92       	push	r10
     766:	bf 92       	push	r11
     768:	cf 92       	push	r12
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	eb 01       	movw	r28, r22
	PORTG |= (1<<PG3);
     776:	e5 e6       	ldi	r30, 0x65	; 101
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	20 81       	ld	r18, Z
     77c:	28 60       	ori	r18, 0x08	; 8
     77e:	20 83       	st	Z, r18
	_delay_ms(a);
     780:	bc 01       	movw	r22, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	d0 d6       	rcall	.+3488   	; 0x1528 <__floatunsisf>
     788:	4b 01       	movw	r8, r22
     78a:	5c 01       	movw	r10, r24

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	4a e7       	ldi	r20, 0x7A	; 122
     792:	55 e4       	ldi	r21, 0x45	; 69
     794:	7f d7       	rcall	.+3838   	; 0x1694 <__mulsf3>
     796:	6b 01       	movw	r12, r22
     798:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	40 e8       	ldi	r20, 0x80	; 128
     7a0:	5f e3       	ldi	r21, 0x3F	; 63
     7a2:	2a d6       	rcall	.+3156   	; 0x13f8 <__cmpsf2>
     7a4:	88 23       	and	r24, r24
     7a6:	04 f1       	brlt	.+64     	; 0x7e8 <bz+0x88>
		__ticks = 1;
	else if (__tmp > 65535)
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	3f ef       	ldi	r19, 0xFF	; 255
     7ac:	4f e7       	ldi	r20, 0x7F	; 127
     7ae:	57 e4       	ldi	r21, 0x47	; 71
     7b0:	c7 01       	movw	r24, r14
     7b2:	b6 01       	movw	r22, r12
     7b4:	6b d7       	rcall	.+3798   	; 0x168c <__gesf2>
     7b6:	18 16       	cp	r1, r24
     7b8:	9c f4       	brge	.+38     	; 0x7e0 <bz+0x80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	40 e2       	ldi	r20, 0x20	; 32
     7c0:	51 e4       	ldi	r21, 0x41	; 65
     7c2:	c5 01       	movw	r24, r10
     7c4:	b4 01       	movw	r22, r8
     7c6:	66 d7       	rcall	.+3788   	; 0x1694 <__mulsf3>
     7c8:	83 d6       	rcall	.+3334   	; 0x14d0 <__fixunssfsi>
     7ca:	06 c0       	rjmp	.+12     	; 0x7d8 <bz+0x78>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7cc:	80 e9       	ldi	r24, 0x90	; 144
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <bz+0x70>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7d4:	61 50       	subi	r22, 0x01	; 1
     7d6:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7d8:	61 15       	cp	r22, r1
     7da:	71 05       	cpc	r23, r1
     7dc:	b9 f7       	brne	.-18     	; 0x7cc <bz+0x6c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7de:	09 c0       	rjmp	.+18     	; 0x7f2 <bz+0x92>
     7e0:	c7 01       	movw	r24, r14
     7e2:	b6 01       	movw	r22, r12
     7e4:	75 d6       	rcall	.+3306   	; 0x14d0 <__fixunssfsi>
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <bz+0x8c>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	cb 01       	movw	r24, r22
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <bz+0x8e>
	PORTG &= ~(1<<PG3);
     7f2:	e5 e6       	ldi	r30, 0x65	; 101
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	80 81       	ld	r24, Z
     7f8:	87 7f       	andi	r24, 0xF7	; 247
	_delay_ms(b);
     7fa:	80 83       	st	Z, r24
     7fc:	be 01       	movw	r22, r28
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	92 d6       	rcall	.+3364   	; 0x1528 <__floatunsisf>
     804:	4b 01       	movw	r8, r22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     806:	5c 01       	movw	r10, r24
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	4a e7       	ldi	r20, 0x7A	; 122
     80e:	55 e4       	ldi	r21, 0x45	; 69
     810:	41 d7       	rcall	.+3714   	; 0x1694 <__mulsf3>
     812:	6b 01       	movw	r12, r22
	if (__tmp < 1.0)
     814:	7c 01       	movw	r14, r24
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	40 e8       	ldi	r20, 0x80	; 128
     81c:	5f e3       	ldi	r21, 0x3F	; 63
     81e:	ec d5       	rcall	.+3032   	; 0x13f8 <__cmpsf2>
     820:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
     822:	04 f1       	brlt	.+64     	; 0x864 <bz+0x104>
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	3f ef       	ldi	r19, 0xFF	; 255
     828:	4f e7       	ldi	r20, 0x7F	; 127
     82a:	57 e4       	ldi	r21, 0x47	; 71
     82c:	c7 01       	movw	r24, r14
     82e:	b6 01       	movw	r22, r12
     830:	2d d7       	rcall	.+3674   	; 0x168c <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     832:	18 16       	cp	r1, r24
     834:	9c f4       	brge	.+38     	; 0x85c <bz+0xfc>
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	40 e2       	ldi	r20, 0x20	; 32
     83c:	51 e4       	ldi	r21, 0x41	; 65
     83e:	c5 01       	movw	r24, r10
     840:	b4 01       	movw	r22, r8
     842:	28 d7       	rcall	.+3664   	; 0x1694 <__mulsf3>
     844:	45 d6       	rcall	.+3210   	; 0x14d0 <__fixunssfsi>
     846:	06 c0       	rjmp	.+12     	; 0x854 <bz+0xf4>
     848:	80 e9       	ldi	r24, 0x90	; 144
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     84e:	f1 f7       	brne	.-4      	; 0x84c <bz+0xec>
     850:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     852:	71 09       	sbc	r23, r1
     854:	61 15       	cp	r22, r1
     856:	71 05       	cpc	r23, r1
     858:	b9 f7       	brne	.-18     	; 0x848 <bz+0xe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     85a:	09 c0       	rjmp	.+18     	; 0x86e <bz+0x10e>
     85c:	c7 01       	movw	r24, r14
     85e:	b6 01       	movw	r22, r12
     860:	37 d6       	rcall	.+3182   	; 0x14d0 <__fixunssfsi>
     862:	02 c0       	rjmp	.+4      	; 0x868 <bz+0x108>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	cb 01       	movw	r24, r22
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <bz+0x10a>
}
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	df 90       	pop	r13
     878:	cf 90       	pop	r12
     87a:	bf 90       	pop	r11
     87c:	af 90       	pop	r10
     87e:	9f 90       	pop	r9
     880:	8f 90       	pop	r8
     882:	08 95       	ret

00000884 <main>:

int main(void){
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	cd b7       	in	r28, 0x3d	; 61
     88a:	de b7       	in	r29, 0x3e	; 62
     88c:	65 97       	sbiw	r28, 0x15	; 21
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	f8 94       	cli
     892:	de bf       	out	0x3e, r29	; 62
     894:	0f be       	out	0x3f, r0	; 63
     896:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xf0;
     898:	80 ef       	ldi	r24, 0xF0	; 240
     89a:	87 bb       	out	0x17, r24	; 23
	DDRG |= (1<<PG3);
     89c:	e4 e6       	ldi	r30, 0x64	; 100
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	80 81       	ld	r24, Z
     8a2:	88 60       	ori	r24, 0x08	; 8
     8a4:	80 83       	st	Z, r24
	MCU_Init();
     8a6:	2f dc       	rcall	.-1954   	; 0x106 <MCU_Init>
	LCDInit();
     8a8:	55 dc       	rcall	.-1878   	; 0x154 <LCDInit>
     8aa:	15 e0       	ldi	r17, 0x05	; 5
	
	// 시간 설정
	static char string1[]="set location";
	static char string8[]="set Watch       ";
	
	unsigned char next = 5;
     8ac:	15 30       	cpi	r17, 0x05	; 5
	while (1) {
		// 화면
		if (next == 5) {
     8ae:	71 f4       	brne	.+28     	; 0x8cc <main+0x48>
     8b0:	60 e0       	ldi	r22, 0x00	; 0
			LCDMove(0,0);
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	8e dc       	rcall	.-1764   	; 0x1d2 <LCDMove>
     8b6:	83 e5       	ldi	r24, 0x53	; 83
			LCDPuts(string1);
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	7f dc       	rcall	.-1794   	; 0x1ba <LCDPuts>
     8bc:	60 e0       	ldi	r22, 0x00	; 0
			LCDMove(1,0);
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	88 dc       	rcall	.-1776   	; 0x1d2 <LCDMove>
     8c2:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <l>
			tNum3(l);
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	47 de       	rcall	.-882    	; 0x558 <tNum3>
     8ca:	31 c0       	rjmp	.+98     	; 0x92e <main+0xaa>
     8cc:	60 e0       	ldi	r22, 0x00	; 0
		}
		else {
			LCDMove(0,0);
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	80 dc       	rcall	.-1792   	; 0x1d2 <LCDMove>
     8d2:	12 30       	cpi	r17, 0x02	; 2
     8d4:	48 f4       	brcc	.+18     	; 0x8e8 <main+0x64>
			if (next > 1) {
     8d6:	1b c0       	rjmp	.+54     	; 0x90e <main+0x8a>
     8d8:	e8 2f       	mov	r30, r24
     8da:	f0 e0       	ldi	r31, 0x00	; 0
				for (char a = 12 ; a < 15 ; a++) {string8[a] = ' ';}
     8dc:	ee 5b       	subi	r30, 0xBE	; 190
     8de:	fe 4f       	sbci	r31, 0xFE	; 254
     8e0:	90 e2       	ldi	r25, 0x20	; 32
     8e2:	90 83       	st	Z, r25
     8e4:	8f 5f       	subi	r24, 0xFF	; 255
     8e6:	01 c0       	rjmp	.+2      	; 0x8ea <main+0x66>
     8e8:	8c e0       	ldi	r24, 0x0C	; 12
     8ea:	8f 30       	cpi	r24, 0x0F	; 15
     8ec:	a8 f3       	brcs	.-22     	; 0x8d8 <main+0x54>
     8ee:	14 30       	cpi	r17, 0x04	; 4
     8f0:	21 f4       	brne	.+8      	; 0x8fa <main+0x76>
				if (next == 4) {string8[15] = 'h';}
     8f2:	88 e6       	ldi	r24, 0x68	; 104
     8f4:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <string8.1834+0xf>
     8f8:	14 c0       	rjmp	.+40     	; 0x922 <main+0x9e>
     8fa:	13 30       	cpi	r17, 0x03	; 3
     8fc:	21 f4       	brne	.+8      	; 0x906 <main+0x82>
				else if (next == 3) {string8[15] = 'm';}
     8fe:	8d e6       	ldi	r24, 0x6D	; 109
     900:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <string8.1834+0xf>
     904:	0e c0       	rjmp	.+28     	; 0x922 <main+0x9e>
     906:	83 e7       	ldi	r24, 0x73	; 115
     908:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <string8.1834+0xf>
				else {string8[15] = 's';}
     90c:	0a c0       	rjmp	.+20     	; 0x922 <main+0x9e>
     90e:	e2 e4       	ldi	r30, 0x42	; 66
     910:	f1 e0       	ldi	r31, 0x01	; 1
			}
			else {
				string8[12] = 'n';
     912:	8e e6       	ldi	r24, 0x6E	; 110
     914:	84 87       	std	Z+12, r24	; 0x0c
     916:	85 e6       	ldi	r24, 0x65	; 101
     918:	85 87       	std	Z+13, r24	; 0x0d
				string8[13] = 'e';
     91a:	88 e7       	ldi	r24, 0x78	; 120
				string8[14] = 'x';
     91c:	86 87       	std	Z+14, r24	; 0x0e
     91e:	84 e7       	ldi	r24, 0x74	; 116
				string8[15] = 't';
     920:	87 87       	std	Z+15, r24	; 0x0f
			}
			LCDPuts(string8);
     922:	82 e4       	ldi	r24, 0x42	; 66
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	49 dc       	rcall	.-1902   	; 0x1ba <LCDPuts>
     928:	81 e0       	ldi	r24, 0x01	; 1
			Watch(1);
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	8b de       	rcall	.-746    	; 0x644 <Watch>
     92e:	86 b3       	in	r24, 0x16	; 22
     930:	8e 30       	cpi	r24, 0x0E	; 14
		}
		
		// 버튼
		if (PINB == 14) {
     932:	71 f5       	brne	.+92     	; 0x990 <main+0x10c>
     934:	15 30       	cpi	r17, 0x05	; 5
     936:	39 f4       	brne	.+14     	; 0x946 <main+0xc2>
			if (next == 5 && l != 0) {l--;}
     938:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <l>
     93c:	88 23       	and	r24, r24
     93e:	19 f0       	breq	.+6      	; 0x946 <main+0xc2>
     940:	81 50       	subi	r24, 0x01	; 1
     942:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <l>
     946:	14 30       	cpi	r17, 0x04	; 4
     948:	39 f4       	brne	.+14     	; 0x958 <main+0xd4>
			if (next == 4 && h != 0) {h--;}
     94a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <h>
     94e:	88 23       	and	r24, r24
     950:	19 f0       	breq	.+6      	; 0x958 <main+0xd4>
     952:	81 50       	subi	r24, 0x01	; 1
     954:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <h>
     958:	13 30       	cpi	r17, 0x03	; 3
     95a:	39 f4       	brne	.+14     	; 0x96a <main+0xe6>
			if (next == 3 && m != 0) {m--;}
     95c:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <m>
     960:	88 23       	and	r24, r24
     962:	19 f0       	breq	.+6      	; 0x96a <main+0xe6>
     964:	81 50       	subi	r24, 0x01	; 1
     966:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <m>
     96a:	12 30       	cpi	r17, 0x02	; 2
     96c:	39 f4       	brne	.+14     	; 0x97c <main+0xf8>
			if (next == 2 && s != 0) {s--;}
     96e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <s>
     972:	88 23       	and	r24, r24
     974:	19 f0       	breq	.+6      	; 0x97c <main+0xf8>
     976:	81 50       	subi	r24, 0x01	; 1
     978:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <s>
     97c:	80 ed       	ldi	r24, 0xD0	; 208
     97e:	97 e0       	ldi	r25, 0x07	; 7
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     980:	05 c0       	rjmp	.+10     	; 0x98c <main+0x108>
     982:	e0 e9       	ldi	r30, 0x90	; 144
     984:	f1 e0       	ldi	r31, 0x01	; 1
     986:	31 97       	sbiw	r30, 0x01	; 1
     988:	f1 f7       	brne	.-4      	; 0x986 <main+0x102>
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	00 97       	sbiw	r24, 0x00	; 0
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     98e:	c9 f7       	brne	.-14     	; 0x982 <main+0xfe>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     990:	86 b3       	in	r24, 0x16	; 22
     992:	8d 30       	cpi	r24, 0x0D	; 13
			_delay_ms(200);
		}
		if (PINB == 13) {
     994:	71 f5       	brne	.+92     	; 0x9f2 <main+0x16e>
     996:	15 30       	cpi	r17, 0x05	; 5
     998:	39 f4       	brne	.+14     	; 0x9a8 <main+0x124>
			if (next == 5 && l != 255) {l++;}
     99a:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <l>
     99e:	8f 3f       	cpi	r24, 0xFF	; 255
     9a0:	19 f0       	breq	.+6      	; 0x9a8 <main+0x124>
     9a2:	8f 5f       	subi	r24, 0xFF	; 255
     9a4:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <l>
     9a8:	14 30       	cpi	r17, 0x04	; 4
     9aa:	39 f4       	brne	.+14     	; 0x9ba <main+0x136>
			if (next == 4 && h != 23) {h++;}
     9ac:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <h>
     9b0:	87 31       	cpi	r24, 0x17	; 23
     9b2:	19 f0       	breq	.+6      	; 0x9ba <main+0x136>
     9b4:	8f 5f       	subi	r24, 0xFF	; 255
     9b6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <h>
     9ba:	13 30       	cpi	r17, 0x03	; 3
     9bc:	39 f4       	brne	.+14     	; 0x9cc <main+0x148>
			if (next == 3 && m != 59) {m++;}
     9be:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <m>
     9c2:	8b 33       	cpi	r24, 0x3B	; 59
     9c4:	19 f0       	breq	.+6      	; 0x9cc <main+0x148>
     9c6:	8f 5f       	subi	r24, 0xFF	; 255
     9c8:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <m>
     9cc:	12 30       	cpi	r17, 0x02	; 2
     9ce:	39 f4       	brne	.+14     	; 0x9de <main+0x15a>
			if (next == 2 && s != 59) {s++;}
     9d0:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <s>
     9d4:	8b 33       	cpi	r24, 0x3B	; 59
     9d6:	19 f0       	breq	.+6      	; 0x9de <main+0x15a>
     9d8:	8f 5f       	subi	r24, 0xFF	; 255
     9da:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <s>
     9de:	80 ed       	ldi	r24, 0xD0	; 208
     9e0:	97 e0       	ldi	r25, 0x07	; 7
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9e2:	05 c0       	rjmp	.+10     	; 0x9ee <main+0x16a>
     9e4:	e0 e9       	ldi	r30, 0x90	; 144
     9e6:	f1 e0       	ldi	r31, 0x01	; 1
     9e8:	31 97       	sbiw	r30, 0x01	; 1
     9ea:	f1 f7       	brne	.-4      	; 0x9e8 <main+0x164>
     9ec:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ee:	00 97       	sbiw	r24, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9f0:	c9 f7       	brne	.-14     	; 0x9e4 <main+0x160>
     9f2:	86 b3       	in	r24, 0x16	; 22
			_delay_ms(200);
		}
		if (PINB == 11 && next != 5) {
     9f4:	8b 30       	cpi	r24, 0x0B	; 11
     9f6:	71 f4       	brne	.+28     	; 0xa14 <main+0x190>
     9f8:	15 30       	cpi	r17, 0x05	; 5
     9fa:	61 f0       	breq	.+24     	; 0xa14 <main+0x190>
     9fc:	ab db       	rcall	.-2218   	; 0x154 <LCDInit>
			LCDInit();
     9fe:	1f 5f       	subi	r17, 0xFF	; 255
     a00:	80 ed       	ldi	r24, 0xD0	; 208
			next ++;
     a02:	97 e0       	ldi	r25, 0x07	; 7
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a04:	05 c0       	rjmp	.+10     	; 0xa10 <main+0x18c>
     a06:	e0 e9       	ldi	r30, 0x90	; 144
     a08:	f1 e0       	ldi	r31, 0x01	; 1
     a0a:	31 97       	sbiw	r30, 0x01	; 1
     a0c:	f1 f7       	brne	.-4      	; 0xa0a <main+0x186>
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	00 97       	sbiw	r24, 0x00	; 0
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a12:	c9 f7       	brne	.-14     	; 0xa06 <main+0x182>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a14:	86 b3       	in	r24, 0x16	; 22
     a16:	87 30       	cpi	r24, 0x07	; 7
			_delay_ms(200);
		}
		if (PINB == 7) {
     a18:	09 f0       	breq	.+2      	; 0xa1c <main+0x198>
     a1a:	48 cf       	rjmp	.-368    	; 0x8ac <main+0x28>
     a1c:	11 50       	subi	r17, 0x01	; 1
     a1e:	59 f0       	breq	.+22     	; 0xa36 <main+0x1b2>
			next --;
     a20:	80 ed       	ldi	r24, 0xD0	; 208
			if(next == 0){
     a22:	97 e0       	ldi	r25, 0x07	; 7
     a24:	05 c0       	rjmp	.+10     	; 0xa30 <main+0x1ac>
     a26:	e0 e9       	ldi	r30, 0x90	; 144
     a28:	f1 e0       	ldi	r31, 0x01	; 1
     a2a:	31 97       	sbiw	r30, 0x01	; 1
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <main+0x1a6>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	00 97       	sbiw	r24, 0x00	; 0
     a32:	c9 f7       	brne	.-14     	; 0xa26 <main+0x1a2>
				break;
			}
			_delay_ms(200);
		}
	}
	time_Init();
     a34:	3b cf       	rjmp	.-394    	; 0x8ac <main+0x28>
	measurement_time_Init();
     a36:	9e dc       	rcall	.-1732   	; 0x374 <time_Init>
	INTR_Init();
     a38:	39 dc       	rcall	.-1934   	; 0x2ac <measurement_time_Init>
     a3a:	33 dd       	rcall	.-1434   	; 0x4a2 <INTR_Init>
	LCDInit();
     a3c:	8b db       	rcall	.-2282   	; 0x154 <LCDInit>
     a3e:	20 91 81 01 	lds	r18, 0x0181	; 0x800181 <l>
	
	static char string2[]="location : 000  ";
	string2[11] = '0'+((l %1000)/100);
     a42:	82 2f       	mov	r24, r18
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	68 ee       	ldi	r22, 0xE8	; 232
     a48:	73 e0       	ldi	r23, 0x03	; 3
     a4a:	87 d6       	rcall	.+3342   	; 0x175a <__divmodhi4>
     a4c:	64 e6       	ldi	r22, 0x64	; 100
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	84 d6       	rcall	.+3336   	; 0x175a <__divmodhi4>
     a52:	e1 e3       	ldi	r30, 0x31	; 49
     a54:	f1 e0       	ldi	r31, 0x01	; 1
     a56:	80 e3       	ldi	r24, 0x30	; 48
     a58:	86 0f       	add	r24, r22
     a5a:	83 87       	std	Z+11, r24	; 0x0b
     a5c:	89 e2       	ldi	r24, 0x29	; 41
     a5e:	28 9f       	mul	r18, r24
     a60:	81 2d       	mov	r24, r1
	string2[12] = '0'+((l %100)/10);
     a62:	11 24       	eor	r1, r1
     a64:	82 95       	swap	r24
     a66:	8f 70       	andi	r24, 0x0F	; 15
     a68:	92 2f       	mov	r25, r18
     a6a:	34 e6       	ldi	r19, 0x64	; 100
     a6c:	83 9f       	mul	r24, r19
     a6e:	90 19       	sub	r25, r0
     a70:	11 24       	eor	r1, r1
     a72:	8d ec       	ldi	r24, 0xCD	; 205
     a74:	98 9f       	mul	r25, r24
     a76:	91 2d       	mov	r25, r1
     a78:	11 24       	eor	r1, r1
     a7a:	96 95       	lsr	r25
     a7c:	96 95       	lsr	r25
     a7e:	96 95       	lsr	r25
     a80:	90 5d       	subi	r25, 0xD0	; 208
     a82:	94 87       	std	Z+12, r25	; 0x0c
     a84:	28 9f       	mul	r18, r24
     a86:	81 2d       	mov	r24, r1
     a88:	11 24       	eor	r1, r1
	string2[13] = '0'+(l %10);
     a8a:	86 95       	lsr	r24
     a8c:	86 95       	lsr	r24
     a8e:	86 95       	lsr	r24
     a90:	88 0f       	add	r24, r24
     a92:	98 2f       	mov	r25, r24
     a94:	99 0f       	add	r25, r25
     a96:	99 0f       	add	r25, r25
     a98:	89 0f       	add	r24, r25
     a9a:	28 1b       	sub	r18, r24
     a9c:	82 2f       	mov	r24, r18
     a9e:	80 5d       	subi	r24, 0xD0	; 208
     aa0:	85 87       	std	Z+13, r24	; 0x0d
     aa2:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__data_end>
     aa6:	19 8a       	std	Y+17, r1	; 0x11
	ckd = 0;
     aa8:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <measurement>
	
	// main
	unsigned char disp = 0;
     aac:	81 30       	cpi	r24, 0x01	; 1
	while(1){
		// 초음파 측정
		if (measurement == 1) {
     aae:	09 f0       	breq	.+2      	; 0xab2 <main+0x22e>
     ab0:	78 c0       	rjmp	.+240    	; 0xba2 <main+0x31e>
     ab2:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <check>
     ab6:	87 e0       	ldi	r24, 0x07	; 7
			check = 0;
     ab8:	83 bf       	out	0x33, r24	; 51
     aba:	83 b1       	in	r24, 0x03	; 3
			TCCR0 = 7;
     abc:	88 60       	ori	r24, 0x08	; 8
     abe:	83 b9       	out	0x03, r24	; 3
			
			PORTE |= (1<<TRIG);
     ac0:	85 e3       	ldi	r24, 0x35	; 53
     ac2:	8a 95       	dec	r24
     ac4:	f1 f7       	brne	.-4      	; 0xac2 <main+0x23e>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ac6:	83 b1       	in	r24, 0x03	; 3
     ac8:	87 7f       	andi	r24, 0xF7	; 247
     aca:	83 b9       	out	0x03, r24	; 3
			_delay_us(10);
			PORTE &= ~(1<<TRIG);
     acc:	08 9b       	sbis	0x01, 0	; 1
     ace:	fe cf       	rjmp	.-4      	; 0xacc <main+0x248>
     ad0:	12 be       	out	0x32, r1	; 50
			
			while (!(PINE & (1<<0))) {}
     ad2:	57 c0       	rjmp	.+174    	; 0xb82 <main+0x2fe>
     ad4:	81 b1       	in	r24, 0x01	; 1
			TCNT0 = 0;
			
			while (TCNT0 < ((interval + 50) / 10.88)){
     ad6:	90 e0       	ldi	r25, 0x00	; 0
				for (char a = 0 ; a < 3; a++) {
					if (PINE & (1<<a)) {
     ad8:	0f 2c       	mov	r0, r15
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <main+0x25c>
     adc:	95 95       	asr	r25
     ade:	87 95       	ror	r24
     ae0:	0a 94       	dec	r0
     ae2:	e2 f7       	brpl	.-8      	; 0xadc <main+0x258>
     ae4:	80 ff       	sbrs	r24, 0
     ae6:	19 c0       	rjmp	.+50     	; 0xb1a <main+0x296>
     ae8:	62 b7       	in	r22, 0x32	; 50
						if (TCNT0 > ((interval) / 10.88)) {
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	1d d5       	rcall	.+2618   	; 0x152c <__floatsisf>
     af2:	2d e2       	ldi	r18, 0x2D	; 45
     af4:	3d ea       	ldi	r19, 0xAD	; 173
     af6:	40 e8       	ldi	r20, 0x80	; 128
     af8:	52 e4       	ldi	r21, 0x42	; 66
     afa:	c8 d5       	rcall	.+2960   	; 0x168c <__gesf2>
     afc:	18 16       	cp	r1, r24
     afe:	6c f4       	brge	.+26     	; 0xb1a <main+0x296>
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	0f 2c       	mov	r0, r15
							check |= (1 << a);
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <main+0x288>
     b08:	88 0f       	add	r24, r24
     b0a:	99 1f       	adc	r25, r25
     b0c:	0a 94       	dec	r0
     b0e:	e2 f7       	brpl	.-8      	; 0xb08 <main+0x284>
     b10:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <check>
     b14:	89 2b       	or	r24, r25
     b16:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <check>
     b1a:	f3 94       	inc	r15
     b1c:	01 c0       	rjmp	.+2      	; 0xb20 <main+0x29c>
     b1e:	f1 2c       	mov	r15, r1
			
			while (!(PINE & (1<<0))) {}
			TCNT0 = 0;
			
			while (TCNT0 < ((interval + 50) / 10.88)){
				for (char a = 0 ; a < 3; a++) {
     b20:	62 e0       	ldi	r22, 0x02	; 2
     b22:	6f 15       	cp	r22, r15
     b24:	b8 f6       	brcc	.-82     	; 0xad4 <main+0x250>
     b26:	68 94       	set
     b28:	ff 24       	eor	r15, r15
     b2a:	f2 f8       	bld	r15, 2
     b2c:	27 c0       	rjmp	.+78     	; 0xb7c <main+0x2f8>
     b2e:	80 b3       	in	r24, 0x10	; 16
     b30:	0f 2d       	mov	r16, r15
							check |= (1 << a);
						}
					}
				}
				for (char a = 4 ; a < 8; a++) {
					if (PIND & (1<<a)) {
     b32:	10 e0       	ldi	r17, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0f 2c       	mov	r0, r15
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <main+0x2ba>
     b3a:	95 95       	asr	r25
     b3c:	87 95       	ror	r24
     b3e:	0a 94       	dec	r0
     b40:	e2 f7       	brpl	.-8      	; 0xb3a <main+0x2b6>
     b42:	80 ff       	sbrs	r24, 0
     b44:	1a c0       	rjmp	.+52     	; 0xb7a <main+0x2f6>
     b46:	62 b7       	in	r22, 0x32	; 50
						if (TCNT0 > ((interval) / 10.88)) {
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	ee d4       	rcall	.+2524   	; 0x152c <__floatsisf>
     b50:	2d e2       	ldi	r18, 0x2D	; 45
     b52:	3d ea       	ldi	r19, 0xAD	; 173
     b54:	40 e8       	ldi	r20, 0x80	; 128
     b56:	52 e4       	ldi	r21, 0x42	; 66
     b58:	99 d5       	rcall	.+2866   	; 0x168c <__gesf2>
     b5a:	18 16       	cp	r1, r24
     b5c:	74 f4       	brge	.+28     	; 0xb7a <main+0x2f6>
     b5e:	01 50       	subi	r16, 0x01	; 1
     b60:	11 09       	sbc	r17, r1
     b62:	81 e0       	ldi	r24, 0x01	; 1
							check |= (1 << a - 1);
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <main+0x2e8>
     b68:	88 0f       	add	r24, r24
     b6a:	99 1f       	adc	r25, r25
     b6c:	0a 95       	dec	r16
     b6e:	e2 f7       	brpl	.-8      	; 0xb68 <main+0x2e4>
     b70:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <check>
     b74:	89 2b       	or	r24, r25
     b76:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <check>
     b7a:	f3 94       	inc	r15
						if (TCNT0 > ((interval) / 10.88)) {
							check |= (1 << a);
						}
					}
				}
				for (char a = 4 ; a < 8; a++) {
     b7c:	77 e0       	ldi	r23, 0x07	; 7
     b7e:	7f 15       	cp	r23, r15
     b80:	b0 f6       	brcc	.-84     	; 0xb2e <main+0x2aa>
     b82:	62 b7       	in	r22, 0x32	; 50
			PORTE &= ~(1<<TRIG);
			
			while (!(PINE & (1<<0))) {}
			TCNT0 = 0;
			
			while (TCNT0 < ((interval + 50) / 10.88)){
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	d0 d4       	rcall	.+2464   	; 0x152c <__floatsisf>
     b8c:	2e e1       	ldi	r18, 0x1E	; 30
     b8e:	3e ed       	ldi	r19, 0xDE	; 222
     b90:	49 e8       	ldi	r20, 0x89	; 137
     b92:	52 e4       	ldi	r21, 0x42	; 66
     b94:	31 d4       	rcall	.+2146   	; 0x13f8 <__cmpsf2>
     b96:	88 23       	and	r24, r24
     b98:	0c f4       	brge	.+2      	; 0xb9c <main+0x318>
     b9a:	c1 cf       	rjmp	.-126    	; 0xb1e <main+0x29a>
     b9c:	13 be       	out	0x33, r1	; 51
     b9e:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <measurement>
							check |= (1 << a - 1);
						}
					}
				}
			}
			TCCR0 = 0;
     ba2:	80 e0       	ldi	r24, 0x00	; 0
			measurement = 0;
     ba4:	22 24       	eor	r2, r2
     ba6:	23 94       	inc	r2
		}
		
		// 전면 센서 작동
		int largest = 1, secondLargest = 1;
		char cc;
		for (char a = 0; a < 7 ; a++) {
     ba8:	31 2c       	mov	r3, r1
			TCCR0 = 0;
			measurement = 0;
		}
		
		// 전면 센서 작동
		int largest = 1, secondLargest = 1;
     baa:	21 e0       	ldi	r18, 0x01	; 1
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	38 8b       	std	Y+16, r19	; 0x10
     bb0:	2f 87       	std	Y+15, r18	; 0x0f
     bb2:	1c c0       	rjmp	.+56     	; 0xbec <main+0x368>
     bb4:	e8 2f       	mov	r30, r24
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
		char cc;
		for (char a = 0; a < 7 ; a++) {
     bb8:	ee 0f       	add	r30, r30
			if (front[a] >= largest) {
     bba:	ff 1f       	adc	r31, r31
     bbc:	ed 58       	subi	r30, 0x8D	; 141
     bbe:	fe 4f       	sbci	r31, 0xFE	; 254
     bc0:	20 81       	ld	r18, Z
     bc2:	31 81       	ldd	r19, Z+1	; 0x01
     bc4:	4f 85       	ldd	r20, Y+15	; 0x0f
     bc6:	58 89       	ldd	r21, Y+16	; 0x10
     bc8:	24 17       	cp	r18, r20
     bca:	35 07       	cpc	r19, r21
     bcc:	38 f0       	brcs	.+14     	; 0xbdc <main+0x358>
     bce:	61 e0       	ldi	r22, 0x01	; 1
     bd0:	68 0f       	add	r22, r24
     bd2:	6b 8b       	std	Y+19, r22	; 0x13
				secondLargest = largest;
				largest = front[a];
				cc = a + 1;
     bd4:	1a 01       	movw	r2, r20
     bd6:	38 8b       	std	Y+16, r19	; 0x10
     bd8:	2f 87       	std	Y+15, r18	; 0x0f
		// 전면 센서 작동
		int largest = 1, secondLargest = 1;
		char cc;
		for (char a = 0; a < 7 ; a++) {
			if (front[a] >= largest) {
				secondLargest = largest;
     bda:	07 c0       	rjmp	.+14     	; 0xbea <main+0x366>
				largest = front[a];
     bdc:	22 16       	cp	r2, r18
     bde:	33 06       	cpc	r3, r19
     be0:	20 f4       	brcc	.+8      	; 0xbea <main+0x366>
				cc = a + 1;
			}
			else if (front[a] > secondLargest && front[a] < largest) {
     be2:	24 17       	cp	r18, r20
     be4:	35 07       	cpc	r19, r21
     be6:	08 f4       	brcc	.+2      	; 0xbea <main+0x366>
     be8:	19 01       	movw	r2, r18
     bea:	8f 5f       	subi	r24, 0xFF	; 255
     bec:	87 30       	cpi	r24, 0x07	; 7
				secondLargest = front[a];
     bee:	10 f3       	brcs	.-60     	; 0xbb4 <main+0x330>
		}
		
		// 전면 센서 작동
		int largest = 1, secondLargest = 1;
		char cc;
		for (char a = 0; a < 7 ; a++) {
     bf0:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <h>
     bf4:	87 50       	subi	r24, 0x07	; 7
			}
			else if (front[a] > secondLargest && front[a] < largest) {
				secondLargest = front[a];
			}
		}
		if ((h >= 19) || (h < 7)) {
     bf6:	8c 30       	cpi	r24, 0x0C	; 12
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <main+0x378>
     bfa:	bf c0       	rjmp	.+382    	; 0xd7a <main+0x4f6>
     bfc:	8f 85       	ldd	r24, Y+15	; 0x0f
     bfe:	98 89       	ldd	r25, Y+16	; 0x10
			if ((largest > night_period) && secondLargest < person) {
     c00:	0b 97       	sbiw	r24, 0x0b	; 11
     c02:	0c f4       	brge	.+2      	; 0xc06 <main+0x382>
     c04:	b0 c0       	rjmp	.+352    	; 0xd66 <main+0x4e2>
     c06:	95 e0       	ldi	r25, 0x05	; 5
     c08:	29 16       	cp	r2, r25
     c0a:	31 04       	cpc	r3, r1
     c0c:	0c f0       	brlt	.+2      	; 0xc10 <main+0x38c>
     c0e:	ab c0       	rjmp	.+342    	; 0xd66 <main+0x4e2>
     c10:	80 ef       	ldi	r24, 0xF0	; 240
				PORTB = 0xf0;
     c12:	88 bb       	out	0x18, r24	; 24
				
				// 통신
				PORTD = 0xfb;
     c14:	8b ef       	ldi	r24, 0xFB	; 251
     c16:	82 bb       	out	0x12, r24	; 18
				double com = 159343 + (1.5923*l + 0.152*cc)*1000;
     c18:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <l>
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	84 d4       	rcall	.+2312   	; 0x152c <__floatsisf>
     c24:	2d e7       	ldi	r18, 0x7D	; 125
     c26:	30 ed       	ldi	r19, 0xD0	; 208
     c28:	4b ec       	ldi	r20, 0xCB	; 203
     c2a:	5f e3       	ldi	r21, 0x3F	; 63
     c2c:	33 d5       	rcall	.+2662   	; 0x1694 <__mulsf3>
     c2e:	6b 01       	movw	r12, r22
     c30:	7c 01       	movw	r14, r24
     c32:	2b 89       	ldd	r18, Y+19	; 0x13
     c34:	62 2f       	mov	r22, r18
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	77 d4       	rcall	.+2286   	; 0x152c <__floatsisf>
     c3e:	23 ee       	ldi	r18, 0xE3	; 227
     c40:	35 ea       	ldi	r19, 0xA5	; 165
     c42:	4b e1       	ldi	r20, 0x1B	; 27
     c44:	5e e3       	ldi	r21, 0x3E	; 62
     c46:	26 d5       	rcall	.+2636   	; 0x1694 <__mulsf3>
     c48:	9b 01       	movw	r18, r22
     c4a:	ac 01       	movw	r20, r24
     c4c:	c7 01       	movw	r24, r14
     c4e:	b6 01       	movw	r22, r12
     c50:	6f d3       	rcall	.+1758   	; 0x1330 <__addsf3>
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	4a e7       	ldi	r20, 0x7A	; 122
     c58:	54 e4       	ldi	r21, 0x44	; 68
     c5a:	1c d5       	rcall	.+2616   	; 0x1694 <__mulsf3>
     c5c:	20 ec       	ldi	r18, 0xC0	; 192
     c5e:	3b e9       	ldi	r19, 0x9B	; 155
     c60:	4b e1       	ldi	r20, 0x1B	; 27
     c62:	58 e4       	ldi	r21, 0x48	; 72
     c64:	65 d3       	rcall	.+1738   	; 0x1330 <__addsf3>
     c66:	4b 01       	movw	r8, r22
     c68:	5c 01       	movw	r10, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     c6a:	2b ea       	ldi	r18, 0xAB	; 171
     c6c:	3a ea       	ldi	r19, 0xAA	; 170
     c6e:	4a ea       	ldi	r20, 0xAA	; 170
     c70:	50 e4       	ldi	r21, 0x40	; 64
     c72:	10 d5       	rcall	.+2592   	; 0x1694 <__mulsf3>
     c74:	6b 01       	movw	r12, r22
     c76:	7c 01       	movw	r14, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	40 e8       	ldi	r20, 0x80	; 128
     c7e:	50 e4       	ldi	r21, 0x40	; 64
     c80:	c5 01       	movw	r24, r10
     c82:	b4 01       	movw	r22, r8
     c84:	07 d5       	rcall	.+2574   	; 0x1694 <__mulsf3>
     c86:	2b 01       	movw	r4, r22
     c88:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	40 e8       	ldi	r20, 0x80	; 128
     c90:	5f e3       	ldi	r21, 0x3F	; 63
     c92:	c7 01       	movw	r24, r14
     c94:	b6 01       	movw	r22, r12
     c96:	b0 d3       	rcall	.+1888   	; 0x13f8 <__cmpsf2>
     c98:	88 23       	and	r24, r24
     c9a:	0c f4       	brge	.+2      	; 0xc9e <main+0x41a>
		__ticks = 1;
	else if (__tmp2 > 65535)
     c9c:	5c c0       	rjmp	.+184    	; 0xd56 <main+0x4d2>
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	3f ef       	ldi	r19, 0xFF	; 255
     ca2:	4f e7       	ldi	r20, 0x7F	; 127
     ca4:	57 e4       	ldi	r21, 0x47	; 71
     ca6:	c3 01       	movw	r24, r6
     ca8:	b2 01       	movw	r22, r4
     caa:	f0 d4       	rcall	.+2528   	; 0x168c <__gesf2>
     cac:	18 16       	cp	r1, r24
     cae:	0c f0       	brlt	.+2      	; 0xcb2 <main+0x42e>
	{
		_delay_ms(__us / 1000.0);
     cb0:	3d c0       	rjmp	.+122    	; 0xd2c <main+0x4a8>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	4a e7       	ldi	r20, 0x7A	; 122
     cb8:	54 e4       	ldi	r21, 0x44	; 68
     cba:	c5 01       	movw	r24, r10
     cbc:	b4 01       	movw	r22, r8
     cbe:	a0 d3       	rcall	.+1856   	; 0x1400 <__divsf3>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     cc0:	4b 01       	movw	r8, r22
     cc2:	5c 01       	movw	r10, r24
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	4a e7       	ldi	r20, 0x7A	; 122
     cca:	55 e4       	ldi	r21, 0x45	; 69
     ccc:	e3 d4       	rcall	.+2502   	; 0x1694 <__mulsf3>
     cce:	6b 01       	movw	r12, r22
	if (__tmp < 1.0)
     cd0:	7c 01       	movw	r14, r24
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	40 e8       	ldi	r20, 0x80	; 128
     cd8:	5f e3       	ldi	r21, 0x3F	; 63
     cda:	8e d3       	rcall	.+1820   	; 0x13f8 <__cmpsf2>
     cdc:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
     cde:	04 f1       	brlt	.+64     	; 0xd20 <main+0x49c>
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	3f ef       	ldi	r19, 0xFF	; 255
     ce4:	4f e7       	ldi	r20, 0x7F	; 127
     ce6:	57 e4       	ldi	r21, 0x47	; 71
     ce8:	c7 01       	movw	r24, r14
     cea:	b6 01       	movw	r22, r12
     cec:	cf d4       	rcall	.+2462   	; 0x168c <__gesf2>
     cee:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf0:	9c f4       	brge	.+38     	; 0xd18 <main+0x494>
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	40 e2       	ldi	r20, 0x20	; 32
     cf8:	51 e4       	ldi	r21, 0x41	; 65
     cfa:	c5 01       	movw	r24, r10
     cfc:	b4 01       	movw	r22, r8
     cfe:	ca d4       	rcall	.+2452   	; 0x1694 <__mulsf3>
     d00:	e7 d3       	rcall	.+1998   	; 0x14d0 <__fixunssfsi>
     d02:	06 c0       	rjmp	.+12     	; 0xd10 <main+0x48c>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d04:	80 e9       	ldi	r24, 0x90	; 144
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <main+0x484>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d0c:	61 50       	subi	r22, 0x01	; 1
     d0e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d10:	61 15       	cp	r22, r1
     d12:	71 05       	cpc	r23, r1
     d14:	b9 f7       	brne	.-18     	; 0xd04 <main+0x480>
     d16:	21 c0       	rjmp	.+66     	; 0xd5a <main+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d18:	c7 01       	movw	r24, r14
     d1a:	b6 01       	movw	r22, r12
     d1c:	d9 d3       	rcall	.+1970   	; 0x14d0 <__fixunssfsi>
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <main+0x4a0>
     d20:	61 e0       	ldi	r22, 0x01	; 1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	cb 01       	movw	r24, r22
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <main+0x4a2>
     d2a:	17 c0       	rjmp	.+46     	; 0xd5a <main+0x4d6>
     d2c:	20 e0       	ldi	r18, 0x00	; 0
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	4f e7       	ldi	r20, 0x7F	; 127
     d32:	53 e4       	ldi	r21, 0x43	; 67
     d34:	c7 01       	movw	r24, r14
     d36:	b6 01       	movw	r22, r12
     d38:	a9 d4       	rcall	.+2386   	; 0x168c <__gesf2>
     d3a:	18 16       	cp	r1, r24
     d3c:	3c f4       	brge	.+14     	; 0xd4c <main+0x4c8>
     d3e:	c3 01       	movw	r24, r6
     d40:	b2 01       	movw	r22, r4
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     d42:	c6 d3       	rcall	.+1932   	; 0x14d0 <__fixunssfsi>
     d44:	cb 01       	movw	r24, r22
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	f1 f7       	brne	.-4      	; 0xd46 <main+0x4c2>
     d4a:	0a c0       	rjmp	.+20     	; 0xd60 <main+0x4dc>
     d4c:	c7 01       	movw	r24, r14
     d4e:	b6 01       	movw	r22, r12
     d50:	bf d3       	rcall	.+1918   	; 0x14d0 <__fixunssfsi>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     d52:	6c 8b       	std	Y+20, r22	; 0x14
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <main+0x4d6>
     d56:	31 e0       	ldi	r19, 0x01	; 1
     d58:	3c 8b       	std	Y+20, r19	; 0x14
     d5a:	8c 89       	ldd	r24, Y+20	; 0x14
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     d5c:	8a 95       	dec	r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d5e:	f1 f7       	brne	.-4      	; 0xd5c <main+0x4d8>
     d60:	8f ef       	ldi	r24, 0xFF	; 255
     d62:	82 bb       	out	0x12, r24	; 18
				_delay_us(com);
				PORTD = 0xff;
     d64:	b6 c1       	rjmp	.+876    	; 0x10d2 <__DATA_REGION_LENGTH__+0xd2>
     d66:	18 ba       	out	0x18, r1	; 24
			else if (front[a] > secondLargest && front[a] < largest) {
				secondLargest = front[a];
			}
		}
		if ((h >= 19) || (h < 7)) {
			if ((largest > night_period) && secondLargest < person) {
     d68:	8b ef       	ldi	r24, 0xFB	; 251
				PORTD = 0xff;
			}
			else {
				PORTB = 0x00;
				
				PORTD = 0xfb;
     d6a:	82 bb       	out	0x12, r24	; 18
     d6c:	80 e9       	ldi	r24, 0x90	; 144
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	f1 f7       	brne	.-4      	; 0xd70 <main+0x4ec>
				_delay_us(100);
				PORTD = 0xff;
     d74:	8f ef       	ldi	r24, 0xFF	; 255
     d76:	82 bb       	out	0x12, r24	; 18
     d78:	ac c1       	rjmp	.+856    	; 0x10d2 <__DATA_REGION_LENGTH__+0xd2>
			}
		}
		else {
			if ((largest > daytime_period) && secondLargest < person) {
     d7a:	6f 85       	ldd	r22, Y+15	; 0x0f
     d7c:	78 89       	ldd	r23, Y+16	; 0x10
     d7e:	60 31       	cpi	r22, 0x10	; 16
     d80:	71 05       	cpc	r23, r1
     d82:	0c f4       	brge	.+2      	; 0xd86 <main+0x502>
     d84:	b0 c0       	rjmp	.+352    	; 0xee6 <main+0x662>
     d86:	75 e0       	ldi	r23, 0x05	; 5
     d88:	27 16       	cp	r2, r23
     d8a:	31 04       	cpc	r3, r1
				PORTB = 0xf0;
     d8c:	0c f0       	brlt	.+2      	; 0xd90 <main+0x50c>
     d8e:	ab c0       	rjmp	.+342    	; 0xee6 <main+0x662>
				
				// 통신
				PORTD = 0xfb;
     d90:	80 ef       	ldi	r24, 0xF0	; 240
     d92:	88 bb       	out	0x18, r24	; 24
				double com = 159343 + (1.5923*l + 0.152*cc)*1000;
     d94:	8b ef       	ldi	r24, 0xFB	; 251
     d96:	82 bb       	out	0x12, r24	; 18
     d98:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <l>
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	c4 d3       	rcall	.+1928   	; 0x152c <__floatsisf>
     da4:	2d e7       	ldi	r18, 0x7D	; 125
     da6:	30 ed       	ldi	r19, 0xD0	; 208
     da8:	4b ec       	ldi	r20, 0xCB	; 203
     daa:	5f e3       	ldi	r21, 0x3F	; 63
     dac:	73 d4       	rcall	.+2278   	; 0x1694 <__mulsf3>
     dae:	6b 01       	movw	r12, r22
     db0:	7c 01       	movw	r14, r24
     db2:	2b 89       	ldd	r18, Y+19	; 0x13
     db4:	62 2f       	mov	r22, r18
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	b7 d3       	rcall	.+1902   	; 0x152c <__floatsisf>
     dbe:	23 ee       	ldi	r18, 0xE3	; 227
     dc0:	35 ea       	ldi	r19, 0xA5	; 165
     dc2:	4b e1       	ldi	r20, 0x1B	; 27
     dc4:	5e e3       	ldi	r21, 0x3E	; 62
     dc6:	66 d4       	rcall	.+2252   	; 0x1694 <__mulsf3>
     dc8:	9b 01       	movw	r18, r22
     dca:	ac 01       	movw	r20, r24
     dcc:	c7 01       	movw	r24, r14
     dce:	b6 01       	movw	r22, r12
     dd0:	af d2       	rcall	.+1374   	; 0x1330 <__addsf3>
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	4a e7       	ldi	r20, 0x7A	; 122
     dd8:	54 e4       	ldi	r21, 0x44	; 68
     dda:	5c d4       	rcall	.+2232   	; 0x1694 <__mulsf3>
     ddc:	20 ec       	ldi	r18, 0xC0	; 192
     dde:	3b e9       	ldi	r19, 0x9B	; 155
     de0:	4b e1       	ldi	r20, 0x1B	; 27
     de2:	58 e4       	ldi	r21, 0x48	; 72
     de4:	a5 d2       	rcall	.+1354   	; 0x1330 <__addsf3>
     de6:	4b 01       	movw	r8, r22
     de8:	5c 01       	movw	r10, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     dea:	2b ea       	ldi	r18, 0xAB	; 171
     dec:	3a ea       	ldi	r19, 0xAA	; 170
     dee:	4a ea       	ldi	r20, 0xAA	; 170
     df0:	50 e4       	ldi	r21, 0x40	; 64
     df2:	50 d4       	rcall	.+2208   	; 0x1694 <__mulsf3>
     df4:	6b 01       	movw	r12, r22
     df6:	7c 01       	movw	r14, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	40 e8       	ldi	r20, 0x80	; 128
     dfe:	50 e4       	ldi	r21, 0x40	; 64
     e00:	c5 01       	movw	r24, r10
     e02:	b4 01       	movw	r22, r8
     e04:	47 d4       	rcall	.+2190   	; 0x1694 <__mulsf3>
     e06:	2b 01       	movw	r4, r22
     e08:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	c7 01       	movw	r24, r14
     e14:	b6 01       	movw	r22, r12
     e16:	f0 d2       	rcall	.+1504   	; 0x13f8 <__cmpsf2>
     e18:	88 23       	and	r24, r24
     e1a:	0c f4       	brge	.+2      	; 0xe1e <main+0x59a>
		__ticks = 1;
	else if (__tmp2 > 65535)
     e1c:	5c c0       	rjmp	.+184    	; 0xed6 <main+0x652>
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	3f ef       	ldi	r19, 0xFF	; 255
     e22:	4f e7       	ldi	r20, 0x7F	; 127
     e24:	57 e4       	ldi	r21, 0x47	; 71
     e26:	c3 01       	movw	r24, r6
     e28:	b2 01       	movw	r22, r4
     e2a:	30 d4       	rcall	.+2144   	; 0x168c <__gesf2>
     e2c:	18 16       	cp	r1, r24
     e2e:	0c f0       	brlt	.+2      	; 0xe32 <main+0x5ae>
	{
		_delay_ms(__us / 1000.0);
     e30:	3d c0       	rjmp	.+122    	; 0xeac <main+0x628>
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	4a e7       	ldi	r20, 0x7A	; 122
     e38:	54 e4       	ldi	r21, 0x44	; 68
     e3a:	c5 01       	movw	r24, r10
     e3c:	b4 01       	movw	r22, r8
     e3e:	e0 d2       	rcall	.+1472   	; 0x1400 <__divsf3>
     e40:	4b 01       	movw	r8, r22
     e42:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	4a e7       	ldi	r20, 0x7A	; 122
     e4a:	55 e4       	ldi	r21, 0x45	; 69
     e4c:	23 d4       	rcall	.+2118   	; 0x1694 <__mulsf3>
     e4e:	6b 01       	movw	r12, r22
     e50:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	40 e8       	ldi	r20, 0x80	; 128
     e58:	5f e3       	ldi	r21, 0x3F	; 63
     e5a:	ce d2       	rcall	.+1436   	; 0x13f8 <__cmpsf2>
     e5c:	88 23       	and	r24, r24
     e5e:	04 f1       	brlt	.+64     	; 0xea0 <main+0x61c>
		__ticks = 1;
	else if (__tmp > 65535)
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	3f ef       	ldi	r19, 0xFF	; 255
     e64:	4f e7       	ldi	r20, 0x7F	; 127
     e66:	57 e4       	ldi	r21, 0x47	; 71
     e68:	c7 01       	movw	r24, r14
     e6a:	b6 01       	movw	r22, r12
     e6c:	0f d4       	rcall	.+2078   	; 0x168c <__gesf2>
     e6e:	18 16       	cp	r1, r24
     e70:	9c f4       	brge	.+38     	; 0xe98 <main+0x614>
     e72:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	c5 01       	movw	r24, r10
     e7c:	b4 01       	movw	r22, r8
     e7e:	0a d4       	rcall	.+2068   	; 0x1694 <__mulsf3>
     e80:	27 d3       	rcall	.+1614   	; 0x14d0 <__fixunssfsi>
     e82:	06 c0       	rjmp	.+12     	; 0xe90 <main+0x60c>
     e84:	80 e9       	ldi	r24, 0x90	; 144
     e86:	91 e0       	ldi	r25, 0x01	; 1
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	f1 f7       	brne	.-4      	; 0xe88 <main+0x604>
     e8c:	61 50       	subi	r22, 0x01	; 1
     e8e:	71 09       	sbc	r23, r1
     e90:	61 15       	cp	r22, r1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e92:	71 05       	cpc	r23, r1
     e94:	b9 f7       	brne	.-18     	; 0xe84 <main+0x600>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e96:	21 c0       	rjmp	.+66     	; 0xeda <main+0x656>
     e98:	c7 01       	movw	r24, r14
     e9a:	b6 01       	movw	r22, r12
     e9c:	19 d3       	rcall	.+1586   	; 0x14d0 <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <main+0x620>
     ea0:	61 e0       	ldi	r22, 0x01	; 1
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	cb 01       	movw	r24, r22
     ea6:	01 97       	sbiw	r24, 0x01	; 1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <main+0x622>
     eaa:	17 c0       	rjmp	.+46     	; 0xeda <main+0x656>
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	4f e7       	ldi	r20, 0x7F	; 127
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     eb2:	53 e4       	ldi	r21, 0x43	; 67
     eb4:	c7 01       	movw	r24, r14
     eb6:	b6 01       	movw	r22, r12
     eb8:	e9 d3       	rcall	.+2002   	; 0x168c <__gesf2>
     eba:	18 16       	cp	r1, r24
     ebc:	3c f4       	brge	.+14     	; 0xecc <main+0x648>
     ebe:	c3 01       	movw	r24, r6
     ec0:	b2 01       	movw	r22, r4
     ec2:	06 d3       	rcall	.+1548   	; 0x14d0 <__fixunssfsi>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     ec4:	cb 01       	movw	r24, r22
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	f1 f7       	brne	.-4      	; 0xec6 <main+0x642>
     eca:	0a c0       	rjmp	.+20     	; 0xee0 <main+0x65c>
     ecc:	c7 01       	movw	r24, r14
     ece:	b6 01       	movw	r22, r12
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ed0:	ff d2       	rcall	.+1534   	; 0x14d0 <__fixunssfsi>
     ed2:	6d 8b       	std	Y+21, r22	; 0x15
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <main+0x656>
     ed6:	31 e0       	ldi	r19, 0x01	; 1
     ed8:	3d 8b       	std	Y+21, r19	; 0x15
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     eda:	8d 89       	ldd	r24, Y+21	; 0x15
     edc:	8a 95       	dec	r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ede:	f1 f7       	brne	.-4      	; 0xedc <main+0x658>
     ee0:	8f ef       	ldi	r24, 0xFF	; 255
				_delay_us(com);
				PORTD = 0xff;
     ee2:	82 bb       	out	0x12, r24	; 18
     ee4:	f6 c0       	rjmp	.+492    	; 0x10d2 <__DATA_REGION_LENGTH__+0xd2>
				_delay_us(100);
				PORTD = 0xff;
			}
		}
		else {
			if ((largest > daytime_period) && secondLargest < person) {
     ee6:	18 ba       	out	0x18, r1	; 24
				double com = 159343 + (1.5923*l + 0.152*cc)*1000;
				_delay_us(com);
				PORTD = 0xff;
			}
			else {
				PORTB = 0x00;
     ee8:	8b ef       	ldi	r24, 0xFB	; 251
				
				PORTD = 0xfb;
     eea:	82 bb       	out	0x12, r24	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eec:	80 e9       	ldi	r24, 0x90	; 144
     eee:	91 e0       	ldi	r25, 0x01	; 1
     ef0:	01 97       	sbiw	r24, 0x01	; 1
				_delay_us(100);
				PORTD = 0xff;
     ef2:	f1 f7       	brne	.-4      	; 0xef0 <main+0x66c>
     ef4:	8f ef       	ldi	r24, 0xFF	; 255
     ef6:	82 bb       	out	0x12, r24	; 18
			}
		}
				
		// 후면 센서 작동
		while (ckd != 0 && disp == 14) {				
			string2[14] = '-';
     ef8:	ec c0       	rjmp	.+472    	; 0x10d2 <__DATA_REGION_LENGTH__+0xd2>
     efa:	e1 e3       	ldi	r30, 0x31	; 49
     efc:	f1 e0       	ldi	r31, 0x01	; 1
			string2[15] = '0'+(ckd %10);
     efe:	8d e2       	ldi	r24, 0x2D	; 45
     f00:	86 87       	std	Z+14, r24	; 0x0e
     f02:	8d ec       	ldi	r24, 0xCD	; 205
     f04:	98 9f       	mul	r25, r24
     f06:	81 2d       	mov	r24, r1
     f08:	11 24       	eor	r1, r1
     f0a:	86 95       	lsr	r24
     f0c:	86 95       	lsr	r24
     f0e:	86 95       	lsr	r24
     f10:	88 0f       	add	r24, r24
     f12:	28 2f       	mov	r18, r24
     f14:	22 0f       	add	r18, r18
     f16:	22 0f       	add	r18, r18
			LCDMove(0,0);
     f18:	82 0f       	add	r24, r18
     f1a:	98 1b       	sub	r25, r24
     f1c:	90 5d       	subi	r25, 0xD0	; 208
     f1e:	97 87       	std	Z+15, r25	; 0x0f
			LCDPuts(string2);
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	56 d9       	rcall	.-3412   	; 0x1d2 <LCDMove>
			
			// 통신
			PORTD = 0xfb;
     f26:	81 e3       	ldi	r24, 0x31	; 49
     f28:	91 e0       	ldi	r25, 0x01	; 1
			double com = 637099 + (1.5925*l + 0.169*ckd)*1000;
     f2a:	47 d9       	rcall	.-3442   	; 0x1ba <LCDPuts>
     f2c:	8b ef       	ldi	r24, 0xFB	; 251
     f2e:	82 bb       	out	0x12, r24	; 18
     f30:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <l>
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	f8 d2       	rcall	.+1520   	; 0x152c <__floatsisf>
     f3c:	2a e0       	ldi	r18, 0x0A	; 10
     f3e:	37 ed       	ldi	r19, 0xD7	; 215
     f40:	4b ec       	ldi	r20, 0xCB	; 203
     f42:	5f e3       	ldi	r21, 0x3F	; 63
     f44:	a7 d3       	rcall	.+1870   	; 0x1694 <__mulsf3>
     f46:	6b 01       	movw	r12, r22
     f48:	7c 01       	movw	r14, r24
     f4a:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <__data_end>
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	eb d2       	rcall	.+1494   	; 0x152c <__floatsisf>
     f56:	26 e5       	ldi	r18, 0x56	; 86
     f58:	3e e0       	ldi	r19, 0x0E	; 14
     f5a:	4d e2       	ldi	r20, 0x2D	; 45
     f5c:	5e e3       	ldi	r21, 0x3E	; 62
     f5e:	9a d3       	rcall	.+1844   	; 0x1694 <__mulsf3>
     f60:	9b 01       	movw	r18, r22
     f62:	ac 01       	movw	r20, r24
     f64:	c7 01       	movw	r24, r14
     f66:	b6 01       	movw	r22, r12
     f68:	e3 d1       	rcall	.+966    	; 0x1330 <__addsf3>
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	4a e7       	ldi	r20, 0x7A	; 122
     f70:	54 e4       	ldi	r21, 0x44	; 68
     f72:	90 d3       	rcall	.+1824   	; 0x1694 <__mulsf3>
     f74:	20 eb       	ldi	r18, 0xB0	; 176
     f76:	3a e8       	ldi	r19, 0x8A	; 138
     f78:	4b e1       	ldi	r20, 0x1B	; 27
     f7a:	59 e4       	ldi	r21, 0x49	; 73
     f7c:	d9 d1       	rcall	.+946    	; 0x1330 <__addsf3>
     f7e:	6b 01       	movw	r12, r22
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     f80:	7c 01       	movw	r14, r24
     f82:	2b ea       	ldi	r18, 0xAB	; 171
     f84:	3a ea       	ldi	r19, 0xAA	; 170
     f86:	4a ea       	ldi	r20, 0xAA	; 170
     f88:	50 e4       	ldi	r21, 0x40	; 64
     f8a:	84 d3       	rcall	.+1800   	; 0x1694 <__mulsf3>
	__tmp2 = ((F_CPU) / 4e6) * __us;
     f8c:	4b 01       	movw	r8, r22
     f8e:	5c 01       	movw	r10, r24
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	40 e8       	ldi	r20, 0x80	; 128
     f96:	50 e4       	ldi	r21, 0x40	; 64
     f98:	c7 01       	movw	r24, r14
     f9a:	b6 01       	movw	r22, r12
     f9c:	7b d3       	rcall	.+1782   	; 0x1694 <__mulsf3>
	if (__tmp < 1.0)
     f9e:	2b 01       	movw	r4, r22
     fa0:	3c 01       	movw	r6, r24
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	40 e8       	ldi	r20, 0x80	; 128
     fa8:	5f e3       	ldi	r21, 0x3F	; 63
     faa:	c5 01       	movw	r24, r10
     fac:	b4 01       	movw	r22, r8
     fae:	24 d2       	rcall	.+1096   	; 0x13f8 <__cmpsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	0c f4       	brge	.+2      	; 0xfb6 <main+0x732>
		__ticks = 1;
	else if (__tmp2 > 65535)
     fb4:	5c c0       	rjmp	.+184    	; 0x106e <__DATA_REGION_LENGTH__+0x6e>
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	3f ef       	ldi	r19, 0xFF	; 255
     fba:	4f e7       	ldi	r20, 0x7F	; 127
     fbc:	57 e4       	ldi	r21, 0x47	; 71
     fbe:	c3 01       	movw	r24, r6
     fc0:	b2 01       	movw	r22, r4
     fc2:	64 d3       	rcall	.+1736   	; 0x168c <__gesf2>
     fc4:	18 16       	cp	r1, r24
	{
		_delay_ms(__us / 1000.0);
     fc6:	0c f0       	brlt	.+2      	; 0xfca <main+0x746>
     fc8:	3d c0       	rjmp	.+122    	; 0x1044 <__DATA_REGION_LENGTH__+0x44>
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	4a e7       	ldi	r20, 0x7A	; 122
     fd0:	54 e4       	ldi	r21, 0x44	; 68
     fd2:	c7 01       	movw	r24, r14
     fd4:	b6 01       	movw	r22, r12
     fd6:	14 d2       	rcall	.+1064   	; 0x1400 <__divsf3>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fd8:	4b 01       	movw	r8, r22
     fda:	5c 01       	movw	r10, r24
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	4a e7       	ldi	r20, 0x7A	; 122
     fe2:	55 e4       	ldi	r21, 0x45	; 69
     fe4:	57 d3       	rcall	.+1710   	; 0x1694 <__mulsf3>
     fe6:	6b 01       	movw	r12, r22
	if (__tmp < 1.0)
     fe8:	7c 01       	movw	r14, r24
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e8       	ldi	r20, 0x80	; 128
     ff0:	5f e3       	ldi	r21, 0x3F	; 63
     ff2:	02 d2       	rcall	.+1028   	; 0x13f8 <__cmpsf2>
     ff4:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
     ff6:	04 f1       	brlt	.+64     	; 0x1038 <__DATA_REGION_LENGTH__+0x38>
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	3f ef       	ldi	r19, 0xFF	; 255
     ffc:	4f e7       	ldi	r20, 0x7F	; 127
     ffe:	57 e4       	ldi	r21, 0x47	; 71
    1000:	c7 01       	movw	r24, r14
    1002:	b6 01       	movw	r22, r12
    1004:	43 d3       	rcall	.+1670   	; 0x168c <__gesf2>
    1006:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1008:	9c f4       	brge	.+38     	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e2       	ldi	r20, 0x20	; 32
    1010:	51 e4       	ldi	r21, 0x41	; 65
    1012:	c5 01       	movw	r24, r10
    1014:	b4 01       	movw	r22, r8
    1016:	3e d3       	rcall	.+1660   	; 0x1694 <__mulsf3>
    1018:	5b d2       	rcall	.+1206   	; 0x14d0 <__fixunssfsi>
    101a:	06 c0       	rjmp	.+12     	; 0x1028 <__DATA_REGION_LENGTH__+0x28>
    101c:	80 e9       	ldi	r24, 0x90	; 144
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <__DATA_REGION_LENGTH__+0x20>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1024:	61 50       	subi	r22, 0x01	; 1
    1026:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1028:	61 15       	cp	r22, r1
    102a:	71 05       	cpc	r23, r1
    102c:	b9 f7       	brne	.-18     	; 0x101c <__DATA_REGION_LENGTH__+0x1c>
    102e:	21 c0       	rjmp	.+66     	; 0x1072 <__DATA_REGION_LENGTH__+0x72>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1030:	c7 01       	movw	r24, r14
    1032:	b6 01       	movw	r22, r12
    1034:	4d d2       	rcall	.+1178   	; 0x14d0 <__fixunssfsi>
    1036:	02 c0       	rjmp	.+4      	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
    1038:	61 e0       	ldi	r22, 0x01	; 1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	cb 01       	movw	r24, r22
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	f1 f7       	brne	.-4      	; 0x103e <__DATA_REGION_LENGTH__+0x3e>
    1042:	17 c0       	rjmp	.+46     	; 0x1072 <__DATA_REGION_LENGTH__+0x72>
    1044:	20 e0       	ldi	r18, 0x00	; 0
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	4f e7       	ldi	r20, 0x7F	; 127
    104a:	53 e4       	ldi	r21, 0x43	; 67
    104c:	c5 01       	movw	r24, r10
    104e:	b4 01       	movw	r22, r8
    1050:	1d d3       	rcall	.+1594   	; 0x168c <__gesf2>
    1052:	18 16       	cp	r1, r24
    1054:	3c f4       	brge	.+14     	; 0x1064 <__DATA_REGION_LENGTH__+0x64>
    1056:	c3 01       	movw	r24, r6
    1058:	b2 01       	movw	r22, r4
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    105a:	3a d2       	rcall	.+1140   	; 0x14d0 <__fixunssfsi>
    105c:	cb 01       	movw	r24, r22
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <__DATA_REGION_LENGTH__+0x5e>
    1062:	0a c0       	rjmp	.+20     	; 0x1078 <__DATA_REGION_LENGTH__+0x78>
    1064:	c5 01       	movw	r24, r10
    1066:	b4 01       	movw	r22, r8
    1068:	33 d2       	rcall	.+1126   	; 0x14d0 <__fixunssfsi>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    106a:	6a 8b       	std	Y+18, r22	; 0x12
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <__DATA_REGION_LENGTH__+0x72>
    106e:	61 e0       	ldi	r22, 0x01	; 1
    1070:	6a 8b       	std	Y+18, r22	; 0x12
    1072:	8a 89       	ldd	r24, Y+18	; 0x12
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    1074:	8a 95       	dec	r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1076:	f1 f7       	brne	.-4      	; 0x1074 <__DATA_REGION_LENGTH__+0x74>
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	82 bb       	out	0x12, r24	; 18
			_delay_us(com);
			PORTD = 0xff;
    107c:	10 e0       	ldi	r17, 0x00	; 0
			
			for (char a = 0 ; a < 9 ; a++) {
    107e:	1d c0       	rjmp	.+58     	; 0x10ba <__DATA_REGION_LENGTH__+0xba>
    1080:	86 b3       	in	r24, 0x16	; 22
				if ((PINB & 0x0f) != 15) {
    1082:	8f 70       	andi	r24, 0x0F	; 15
    1084:	8f 30       	cpi	r24, 0x0F	; 15
    1086:	49 f0       	breq	.+18     	; 0x109a <__DATA_REGION_LENGTH__+0x9a>
    1088:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__data_end>
					ckd = 0;
    108c:	e1 e3       	ldi	r30, 0x31	; 49
					string2[14] = ' ';
    108e:	f1 e0       	ldi	r31, 0x01	; 1
    1090:	80 e2       	ldi	r24, 0x20	; 32
    1092:	86 87       	std	Z+14, r24	; 0x0e
    1094:	87 87       	std	Z+15, r24	; 0x0f
					string2[15] = ' ';
    1096:	5e d8       	rcall	.-3908   	; 0x154 <LCDInit>
					LCDInit();
    1098:	12 c0       	rjmp	.+36     	; 0x10be <__DATA_REGION_LENGTH__+0xbe>
    109a:	8d ef       	ldi	r24, 0xFD	; 253
					break;
    109c:	81 0f       	add	r24, r17
				}
				else if ((a > 5) || (a < 3)) {
    109e:	83 30       	cpi	r24, 0x03	; 3
    10a0:	30 f0       	brcs	.+12     	; 0x10ae <__DATA_REGION_LENGTH__+0xae>
    10a2:	68 ec       	ldi	r22, 0xC8	; 200
					bz(50, 200);
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	82 e3       	ldi	r24, 0x32	; 50
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	5a db       	rcall	.-2380   	; 0x760 <bz>
    10ac:	05 c0       	rjmp	.+10     	; 0x10b8 <__DATA_REGION_LENGTH__+0xb8>
    10ae:	68 ec       	ldi	r22, 0xC8	; 200
    10b0:	70 e0       	ldi	r23, 0x00	; 0
				}
				else {
					bz(150, 200);
    10b2:	86 e9       	ldi	r24, 0x96	; 150
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	54 db       	rcall	.-2392   	; 0x760 <bz>
    10b8:	1f 5f       	subi	r17, 0xFF	; 255
    10ba:	19 30       	cpi	r17, 0x09	; 9
    10bc:	08 f3       	brcs	.-62     	; 0x1080 <__DATA_REGION_LENGTH__+0x80>
			PORTD = 0xfb;
			double com = 637099 + (1.5925*l + 0.169*ckd)*1000;
			_delay_us(com);
			PORTD = 0xff;
			
			for (char a = 0 ; a < 9 ; a++) {
    10be:	80 ed       	ldi	r24, 0xD0	; 208
    10c0:	97 e0       	ldi	r25, 0x07	; 7
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c2:	05 c0       	rjmp	.+10     	; 0x10ce <__DATA_REGION_LENGTH__+0xce>
    10c4:	e0 e9       	ldi	r30, 0x90	; 144
    10c6:	f1 e0       	ldi	r31, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10c8:	31 97       	sbiw	r30, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <__DATA_REGION_LENGTH__+0xc8>
    10cc:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ce:	00 97       	sbiw	r24, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d0:	c9 f7       	brne	.-14     	; 0x10c4 <__DATA_REGION_LENGTH__+0xc4>
    10d2:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <__data_end>
				PORTD = 0xff;
			}
		}
				
		// 후면 센서 작동
		while (ckd != 0 && disp == 14) {				
    10d6:	99 23       	and	r25, r25
    10d8:	21 f0       	breq	.+8      	; 0x10e2 <__DATA_REGION_LENGTH__+0xe2>
    10da:	79 89       	ldd	r23, Y+17	; 0x11
    10dc:	7e 30       	cpi	r23, 0x0E	; 14
    10de:	09 f4       	brne	.+2      	; 0x10e2 <__DATA_REGION_LENGTH__+0xe2>
    10e0:	0c cf       	rjmp	.-488    	; 0xefa <main+0x676>
		static char string5[]="elapse";
		static char string6[]="motion";
		static char string7[]="largest : ";
		static char string9[]="second  : ";
		
		unsigned char x[] = {7, 10, 13, 0, 3, 6, 9};
    10e2:	87 e0       	ldi	r24, 0x07	; 7
    10e4:	e3 e6       	ldi	r30, 0x63	; 99
    10e6:	f1 e0       	ldi	r31, 0x01	; 1
    10e8:	de 01       	movw	r26, r28
    10ea:	18 96       	adiw	r26, 0x08	; 8
    10ec:	01 90       	ld	r0, Z+
    10ee:	0d 92       	st	X+, r0
    10f0:	8a 95       	dec	r24
		unsigned char y[] = {0, 0, 0, 1, 1, 1, 1};
    10f2:	e1 f7       	brne	.-8      	; 0x10ec <__DATA_REGION_LENGTH__+0xec>
    10f4:	87 e0       	ldi	r24, 0x07	; 7
    10f6:	ea e6       	ldi	r30, 0x6A	; 106
    10f8:	f1 e0       	ldi	r31, 0x01	; 1
    10fa:	de 01       	movw	r26, r28
    10fc:	11 96       	adiw	r26, 0x01	; 1
    10fe:	01 90       	ld	r0, Z+
    1100:	0d 92       	st	X+, r0
    1102:	8a 95       	dec	r24
		
		if ((PINB & 15) != 15) {
    1104:	e1 f7       	brne	.-8      	; 0x10fe <__DATA_REGION_LENGTH__+0xfe>
    1106:	86 b3       	in	r24, 0x16	; 22
    1108:	8f 70       	andi	r24, 0x0F	; 15
			disp = (PINB & 15);
    110a:	8f 30       	cpi	r24, 0x0F	; 15
    110c:	21 f0       	breq	.+8      	; 0x1116 <__stack+0x17>
    110e:	86 b3       	in	r24, 0x16	; 22
			LCDInit();
    1110:	8f 70       	andi	r24, 0x0F	; 15
    1112:	89 8b       	std	Y+17, r24	; 0x11
		}
		LCDMove(0,0);
    1114:	1f d8       	rcall	.-4034   	; 0x154 <LCDInit>
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	80 e0       	ldi	r24, 0x00	; 0
		
		// 초음파 테스트
		if(disp == 12) {
    111a:	5b d8       	rcall	.-3914   	; 0x1d2 <LCDMove>
    111c:	89 89       	ldd	r24, Y+17	; 0x11
    111e:	8c 30       	cpi	r24, 0x0C	; 12
			LCDPuts(string3);
    1120:	a9 f5       	brne	.+106    	; 0x118c <__stack+0x8d>
    1122:	8b e2       	ldi	r24, 0x2B	; 43
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	49 d8       	rcall	.-3950   	; 0x1ba <LCDPuts>
			for (char a = 0 ; a < 7 ; a++) {
    1128:	10 e0       	ldi	r17, 0x00	; 0
    112a:	22 c0       	rjmp	.+68     	; 0x1170 <__stack+0x71>
				LCDMove(y[a], x[a]);
    112c:	81 2f       	mov	r24, r17
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	e8 e0       	ldi	r30, 0x08	; 8
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	ec 0f       	add	r30, r28
    1136:	fd 1f       	adc	r31, r29
    1138:	e8 0f       	add	r30, r24
    113a:	f9 1f       	adc	r31, r25
    113c:	60 81       	ld	r22, Z
    113e:	e1 e0       	ldi	r30, 0x01	; 1
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	ec 0f       	add	r30, r28
    1144:	fd 1f       	adc	r31, r29
    1146:	e8 0f       	add	r30, r24
    1148:	f9 1f       	adc	r31, r25
    114a:	80 81       	ld	r24, Z
    114c:	42 d8       	rcall	.-3964   	; 0x1d2 <LCDMove>
				tNum2(!((check >> a) & 0x01));
    114e:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <check>
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	01 2e       	mov	r0, r17
    1156:	02 c0       	rjmp	.+4      	; 0x115c <__stack+0x5d>
    1158:	35 95       	asr	r19
    115a:	27 95       	ror	r18
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <__stack+0x59>
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	20 ff       	sbrs	r18, 0
    1166:	02 c0       	rjmp	.+4      	; 0x116c <__stack+0x6d>
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	a9 d9       	rcall	.-3246   	; 0x4c0 <tNum2>
    116e:	1f 5f       	subi	r17, 0xFF	; 255
		LCDMove(0,0);
		
		// 초음파 테스트
		if(disp == 12) {
			LCDPuts(string3);
			for (char a = 0 ; a < 7 ; a++) {
    1170:	17 30       	cpi	r17, 0x07	; 7
    1172:	e0 f2       	brcs	.-72     	; 0x112c <__stack+0x2d>
    1174:	6c e0       	ldi	r22, 0x0C	; 12
				LCDMove(y[a], x[a]);
				tNum2(!((check >> a) & 0x01));
			}
			LCDMove(1,12);
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	2c d8       	rcall	.-4008   	; 0x1d2 <LCDMove>
    117a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <check>
			tNum3((~check) & 0x7f);
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	80 95       	com	r24
    1182:	90 95       	com	r25
    1184:	8f 77       	andi	r24, 0x7F	; 127
    1186:	99 27       	eor	r25, r25
    1188:	e7 d9       	rcall	.-3122   	; 0x558 <tNum3>
    118a:	8e cc       	rjmp	.-1764   	; 0xaa8 <main+0x224>
    118c:	99 89       	ldd	r25, Y+17	; 0x11
    118e:	9a 30       	cpi	r25, 0x0A	; 10
		}
		else if(disp == 10) {
    1190:	69 f5       	brne	.+90     	; 0x11ec <__stack+0xed>
    1192:	84 e2       	ldi	r24, 0x24	; 36
    1194:	91 e0       	ldi	r25, 0x01	; 1
			LCDPuts(string4);
    1196:	11 d8       	rcall	.-4062   	; 0x1ba <LCDPuts>
    1198:	f1 2c       	mov	r15, r1
    119a:	18 c0       	rjmp	.+48     	; 0x11cc <__stack+0xcd>
			for (char a = 0 ; a < 7 ; a++) {
    119c:	0f 2d       	mov	r16, r15
    119e:	10 e0       	ldi	r17, 0x00	; 0
				LCDMove(y[a], x[a]);
    11a0:	e8 e0       	ldi	r30, 0x08	; 8
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	ec 0f       	add	r30, r28
    11a6:	fd 1f       	adc	r31, r29
    11a8:	e0 0f       	add	r30, r16
    11aa:	f1 1f       	adc	r31, r17
    11ac:	60 81       	ld	r22, Z
    11ae:	e1 e0       	ldi	r30, 0x01	; 1
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	ec 0f       	add	r30, r28
    11b4:	fd 1f       	adc	r31, r29
    11b6:	e0 0f       	add	r30, r16
    11b8:	f1 1f       	adc	r31, r17
    11ba:	80 81       	ld	r24, Z
    11bc:	0a d8       	rcall	.-4076   	; 0x1d2 <LCDMove>
    11be:	f8 01       	movw	r30, r16
    11c0:	ec 57       	subi	r30, 0x7C	; 124
				tNum2(average[a]);
    11c2:	fe 4f       	sbci	r31, 0xFE	; 254
    11c4:	80 81       	ld	r24, Z
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	7b d9       	rcall	.-3338   	; 0x4c0 <tNum2>
    11ca:	f3 94       	inc	r15
    11cc:	26 e0       	ldi	r18, 0x06	; 6
			LCDMove(1,12);
			tNum3((~check) & 0x7f);
		}
		else if(disp == 10) {
			LCDPuts(string4);
			for (char a = 0 ; a < 7 ; a++) {
    11ce:	2f 15       	cp	r18, r15
    11d0:	28 f7       	brcc	.-54     	; 0x119c <__stack+0x9d>
    11d2:	6c e0       	ldi	r22, 0x0C	; 12
    11d4:	81 e0       	ldi	r24, 0x01	; 1
				LCDMove(y[a], x[a]);
				tNum2(average[a]);
			}
			LCDMove(1,12);
    11d6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCDMove>
    11da:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <check>
			tNum3((~check) & 0x7f);
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	80 95       	com	r24
    11e2:	90 95       	com	r25
    11e4:	8f 77       	andi	r24, 0x7F	; 127
    11e6:	99 27       	eor	r25, r25
    11e8:	b7 d9       	rcall	.-3218   	; 0x558 <tNum3>
    11ea:	5e cc       	rjmp	.-1860   	; 0xaa8 <main+0x224>
    11ec:	39 89       	ldd	r19, Y+17	; 0x11
    11ee:	36 30       	cpi	r19, 0x06	; 6
    11f0:	89 f5       	brne	.+98     	; 0x1254 <__stack+0x155>
		}
		else if(disp == 6) {
    11f2:	8d e1       	ldi	r24, 0x1D	; 29
    11f4:	91 e0       	ldi	r25, 0x01	; 1
    11f6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCDPuts>
			LCDPuts(string5);
    11fa:	f1 2c       	mov	r15, r1
    11fc:	1b c0       	rjmp	.+54     	; 0x1234 <__stack+0x135>
    11fe:	0f 2d       	mov	r16, r15
			for (char a = 0 ; a < 7 ; a++) {
    1200:	10 e0       	ldi	r17, 0x00	; 0
    1202:	e8 e0       	ldi	r30, 0x08	; 8
				LCDMove(y[a], x[a]);
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	ec 0f       	add	r30, r28
    1208:	fd 1f       	adc	r31, r29
    120a:	e0 0f       	add	r30, r16
    120c:	f1 1f       	adc	r31, r17
    120e:	60 81       	ld	r22, Z
    1210:	e1 e0       	ldi	r30, 0x01	; 1
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	ec 0f       	add	r30, r28
    1216:	fd 1f       	adc	r31, r29
    1218:	e0 0f       	add	r30, r16
    121a:	f1 1f       	adc	r31, r17
    121c:	80 81       	ld	r24, Z
    121e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCDMove>
    1222:	f8 01       	movw	r30, r16
    1224:	ee 0f       	add	r30, r30
    1226:	ff 1f       	adc	r31, r31
				tNum2(front[a]);
    1228:	ed 58       	subi	r30, 0x8D	; 141
    122a:	fe 4f       	sbci	r31, 0xFE	; 254
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	47 d9       	rcall	.-3442   	; 0x4c0 <tNum2>
    1232:	f3 94       	inc	r15
    1234:	66 e0       	ldi	r22, 0x06	; 6
    1236:	6f 15       	cp	r22, r15
			LCDMove(1,12);
			tNum3((~check) & 0x7f);
		}
		else if(disp == 6) {
			LCDPuts(string5);
			for (char a = 0 ; a < 7 ; a++) {
    1238:	10 f7       	brcc	.-60     	; 0x11fe <__stack+0xff>
    123a:	6c e0       	ldi	r22, 0x0C	; 12
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCDMove>
				LCDMove(y[a], x[a]);
				tNum2(front[a]);
			}
			LCDMove(1,12);
    1242:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <check>
    1246:	90 e0       	ldi	r25, 0x00	; 0
			tNum3((~check) & 0x7f);
    1248:	80 95       	com	r24
    124a:	90 95       	com	r25
    124c:	8f 77       	andi	r24, 0x7F	; 127
    124e:	99 27       	eor	r25, r25
    1250:	83 d9       	rcall	.-3322   	; 0x558 <tNum3>
    1252:	2a cc       	rjmp	.-1964   	; 0xaa8 <main+0x224>
    1254:	79 89       	ldd	r23, Y+17	; 0x11
    1256:	75 30       	cpi	r23, 0x05	; 5
		}
		else if(disp == 5) {
    1258:	b1 f4       	brne	.+44     	; 0x1286 <__stack+0x187>
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	80 e0       	ldi	r24, 0x00	; 0
			LCDMove(0,0);
    125e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCDMove>
    1262:	82 e1       	ldi	r24, 0x12	; 18
			LCDPuts(string7);
    1264:	91 e0       	ldi	r25, 0x01	; 1
    1266:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCDPuts>
    126a:	8f 85       	ldd	r24, Y+15	; 0x0f
			tNum3(largest);
    126c:	98 89       	ldd	r25, Y+16	; 0x10
    126e:	74 d9       	rcall	.-3352   	; 0x558 <tNum3>
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
			
			LCDMove(1,0);
    1274:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCDMove>
    1278:	87 e0       	ldi	r24, 0x07	; 7
    127a:	91 e0       	ldi	r25, 0x01	; 1
			LCDPuts(string9);
    127c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCDPuts>
    1280:	c1 01       	movw	r24, r2
    1282:	6a d9       	rcall	.-3372   	; 0x558 <tNum3>
			tNum3(secondLargest);
    1284:	11 cc       	rjmp	.-2014   	; 0xaa8 <main+0x224>
    1286:	89 89       	ldd	r24, Y+17	; 0x11
    1288:	89 30       	cpi	r24, 0x09	; 9
    128a:	09 f0       	breq	.+2      	; 0x128e <__stack+0x18f>
		}
		
		// 움직임 감지 테스트
		else if(disp == 9) {
    128c:	46 c0       	rjmp	.+140    	; 0x131a <__stack+0x21b>
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	91 e0       	ldi	r25, 0x01	; 1
    1292:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCDPuts>
			LCDPuts(string6);
    1296:	11 b1       	in	r17, 0x01	; 1
    1298:	80 b3       	in	r24, 0x10	; 16
    129a:	20 e1       	ldi	r18, 0x10	; 16
			unsigned char aa = (PINE >> 4) | ((PIND & 0x0f) << 4);	
    129c:	82 9f       	mul	r24, r18
    129e:	c0 01       	movw	r24, r0
    12a0:	11 24       	eor	r1, r1
    12a2:	12 95       	swap	r17
    12a4:	1f 70       	andi	r17, 0x0F	; 15
    12a6:	18 2b       	or	r17, r24
    12a8:	00 e0       	ldi	r16, 0x00	; 0
    12aa:	22 c0       	rjmp	.+68     	; 0x12f0 <__stack+0x1f1>
    12ac:	80 2f       	mov	r24, r16
			for (char a = 0 ; a < 6 ; a++) {
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	e8 e0       	ldi	r30, 0x08	; 8
				LCDMove(y[a], x[a]);
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	ec 0f       	add	r30, r28
    12b6:	fd 1f       	adc	r31, r29
    12b8:	e8 0f       	add	r30, r24
    12ba:	f9 1f       	adc	r31, r25
    12bc:	60 81       	ld	r22, Z
    12be:	e1 e0       	ldi	r30, 0x01	; 1
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	ec 0f       	add	r30, r28
    12c4:	fd 1f       	adc	r31, r29
    12c6:	e8 0f       	add	r30, r24
    12c8:	f9 1f       	adc	r31, r25
    12ca:	80 81       	ld	r24, Z
    12cc:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCDMove>
    12d0:	21 2f       	mov	r18, r17
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	00 2e       	mov	r0, r16
				tNum2(!((aa >> a) & 0x01));
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <__stack+0x1dd>
    12d8:	35 95       	asr	r19
    12da:	27 95       	ror	r18
    12dc:	0a 94       	dec	r0
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <__stack+0x1d9>
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	20 ff       	sbrs	r18, 0
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <__stack+0x1ed>
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	e9 d8       	rcall	.-3630   	; 0x4c0 <tNum2>
    12ee:	0f 5f       	subi	r16, 0xFF	; 255
    12f0:	06 30       	cpi	r16, 0x06	; 6
    12f2:	e0 f2       	brcs	.-72     	; 0x12ac <__stack+0x1ad>
    12f4:	69 e0       	ldi	r22, 0x09	; 9
		
		// 움직임 감지 테스트
		else if(disp == 9) {
			LCDPuts(string6);
			unsigned char aa = (PINE >> 4) | ((PIND & 0x0f) << 4);	
			for (char a = 0 ; a < 6 ; a++) {
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCDMove>
				LCDMove(y[a], x[a]);
				tNum2(!((aa >> a) & 0x01));
			}
			LCDMove(1, 9);
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	11 23       	and	r17, r17
    1302:	14 f4       	brge	.+4      	; 0x1308 <__stack+0x209>
			tNum2(!((aa >> 7) & 0x01));
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	db d8       	rcall	.-3658   	; 0x4c0 <tNum2>
    130a:	6c e0       	ldi	r22, 0x0C	; 12
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCDMove>
    1312:	81 2f       	mov	r24, r17
			LCDMove(1,12);
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	20 d9       	rcall	.-3520   	; 0x558 <tNum3>
    1318:	c7 cb       	rjmp	.-2162   	; 0xaa8 <main+0x224>
    131a:	81 e3       	ldi	r24, 0x31	; 49
			tNum3(aa);
    131c:	91 e0       	ldi	r25, 0x01	; 1
    131e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCDPuts>
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		else {
			disp = 14;
			LCDPuts(string2);
    1326:	8e d9       	rcall	.-3300   	; 0x644 <Watch>
    1328:	3e e0       	ldi	r19, 0x0E	; 14
    132a:	39 8b       	std	Y+17, r19	; 0x11
    132c:	bd cb       	rjmp	.-2182   	; 0xaa8 <main+0x224>

0000132e <__subsf3>:
			Watch(1);
    132e:	50 58       	subi	r21, 0x80	; 128

00001330 <__addsf3>:
    1330:	bb 27       	eor	r27, r27
    1332:	aa 27       	eor	r26, r26
    1334:	0e d0       	rcall	.+28     	; 0x1352 <__addsf3x>
			LCDMove(1,12);
			tNum3(aa);
		}
		
		else {
			disp = 14;
    1336:	70 c1       	rjmp	.+736    	; 0x1618 <__fp_round>
    1338:	61 d1       	rcall	.+706    	; 0x15fc <__fp_pscA>
			LCDPuts(string2);
			Watch(1);
		}
	}
    133a:	30 f0       	brcs	.+12     	; 0x1348 <__addsf3+0x18>
    133c:	66 d1       	rcall	.+716    	; 0x160a <__fp_pscB>
    133e:	20 f0       	brcs	.+8      	; 0x1348 <__addsf3+0x18>
    1340:	31 f4       	brne	.+12     	; 0x134e <__addsf3+0x1e>
    1342:	9f 3f       	cpi	r25, 0xFF	; 255
    1344:	11 f4       	brne	.+4      	; 0x134a <__addsf3+0x1a>
    1346:	1e f4       	brtc	.+6      	; 0x134e <__addsf3+0x1e>
    1348:	56 c1       	rjmp	.+684    	; 0x15f6 <__fp_nan>
    134a:	0e f4       	brtc	.+2      	; 0x134e <__addsf3+0x1e>
    134c:	e0 95       	com	r30
    134e:	e7 fb       	bst	r30, 7
    1350:	4c c1       	rjmp	.+664    	; 0x15ea <__fp_inf>

00001352 <__addsf3x>:
    1352:	e9 2f       	mov	r30, r25
    1354:	72 d1       	rcall	.+740    	; 0x163a <__fp_split3>
    1356:	80 f3       	brcs	.-32     	; 0x1338 <__addsf3+0x8>
    1358:	ba 17       	cp	r27, r26
    135a:	62 07       	cpc	r22, r18
    135c:	73 07       	cpc	r23, r19
    135e:	84 07       	cpc	r24, r20
    1360:	95 07       	cpc	r25, r21
    1362:	18 f0       	brcs	.+6      	; 0x136a <__addsf3x+0x18>
    1364:	71 f4       	brne	.+28     	; 0x1382 <__addsf3x+0x30>
    1366:	9e f5       	brtc	.+102    	; 0x13ce <__addsf3x+0x7c>
    1368:	8a c1       	rjmp	.+788    	; 0x167e <__fp_zero>
    136a:	0e f4       	brtc	.+2      	; 0x136e <__addsf3x+0x1c>
    136c:	e0 95       	com	r30
    136e:	0b 2e       	mov	r0, r27
    1370:	ba 2f       	mov	r27, r26
    1372:	a0 2d       	mov	r26, r0
    1374:	0b 01       	movw	r0, r22
    1376:	b9 01       	movw	r22, r18
    1378:	90 01       	movw	r18, r0
    137a:	0c 01       	movw	r0, r24
    137c:	ca 01       	movw	r24, r20
    137e:	a0 01       	movw	r20, r0
    1380:	11 24       	eor	r1, r1
    1382:	ff 27       	eor	r31, r31
    1384:	59 1b       	sub	r21, r25
    1386:	99 f0       	breq	.+38     	; 0x13ae <__addsf3x+0x5c>
    1388:	59 3f       	cpi	r21, 0xF9	; 249
    138a:	50 f4       	brcc	.+20     	; 0x13a0 <__addsf3x+0x4e>
    138c:	50 3e       	cpi	r21, 0xE0	; 224
    138e:	68 f1       	brcs	.+90     	; 0x13ea <__addsf3x+0x98>
    1390:	1a 16       	cp	r1, r26
    1392:	f0 40       	sbci	r31, 0x00	; 0
    1394:	a2 2f       	mov	r26, r18
    1396:	23 2f       	mov	r18, r19
    1398:	34 2f       	mov	r19, r20
    139a:	44 27       	eor	r20, r20
    139c:	58 5f       	subi	r21, 0xF8	; 248
    139e:	f3 cf       	rjmp	.-26     	; 0x1386 <__addsf3x+0x34>
    13a0:	46 95       	lsr	r20
    13a2:	37 95       	ror	r19
    13a4:	27 95       	ror	r18
    13a6:	a7 95       	ror	r26
    13a8:	f0 40       	sbci	r31, 0x00	; 0
    13aa:	53 95       	inc	r21
    13ac:	c9 f7       	brne	.-14     	; 0x13a0 <__addsf3x+0x4e>
    13ae:	7e f4       	brtc	.+30     	; 0x13ce <__addsf3x+0x7c>
    13b0:	1f 16       	cp	r1, r31
    13b2:	ba 0b       	sbc	r27, r26
    13b4:	62 0b       	sbc	r22, r18
    13b6:	73 0b       	sbc	r23, r19
    13b8:	84 0b       	sbc	r24, r20
    13ba:	ba f0       	brmi	.+46     	; 0x13ea <__addsf3x+0x98>
    13bc:	91 50       	subi	r25, 0x01	; 1
    13be:	a1 f0       	breq	.+40     	; 0x13e8 <__addsf3x+0x96>
    13c0:	ff 0f       	add	r31, r31
    13c2:	bb 1f       	adc	r27, r27
    13c4:	66 1f       	adc	r22, r22
    13c6:	77 1f       	adc	r23, r23
    13c8:	88 1f       	adc	r24, r24
    13ca:	c2 f7       	brpl	.-16     	; 0x13bc <__addsf3x+0x6a>
    13cc:	0e c0       	rjmp	.+28     	; 0x13ea <__addsf3x+0x98>
    13ce:	ba 0f       	add	r27, r26
    13d0:	62 1f       	adc	r22, r18
    13d2:	73 1f       	adc	r23, r19
    13d4:	84 1f       	adc	r24, r20
    13d6:	48 f4       	brcc	.+18     	; 0x13ea <__addsf3x+0x98>
    13d8:	87 95       	ror	r24
    13da:	77 95       	ror	r23
    13dc:	67 95       	ror	r22
    13de:	b7 95       	ror	r27
    13e0:	f7 95       	ror	r31
    13e2:	9e 3f       	cpi	r25, 0xFE	; 254
    13e4:	08 f0       	brcs	.+2      	; 0x13e8 <__addsf3x+0x96>
    13e6:	b3 cf       	rjmp	.-154    	; 0x134e <__addsf3+0x1e>
    13e8:	93 95       	inc	r25
    13ea:	88 0f       	add	r24, r24
    13ec:	08 f0       	brcs	.+2      	; 0x13f0 <__addsf3x+0x9e>
    13ee:	99 27       	eor	r25, r25
    13f0:	ee 0f       	add	r30, r30
    13f2:	97 95       	ror	r25
    13f4:	87 95       	ror	r24
    13f6:	08 95       	ret

000013f8 <__cmpsf2>:
    13f8:	d4 d0       	rcall	.+424    	; 0x15a2 <__fp_cmp>
    13fa:	08 f4       	brcc	.+2      	; 0x13fe <__cmpsf2+0x6>
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	08 95       	ret

00001400 <__divsf3>:
    1400:	0c d0       	rcall	.+24     	; 0x141a <__divsf3x>
    1402:	0a c1       	rjmp	.+532    	; 0x1618 <__fp_round>
    1404:	02 d1       	rcall	.+516    	; 0x160a <__fp_pscB>
    1406:	40 f0       	brcs	.+16     	; 0x1418 <__divsf3+0x18>
    1408:	f9 d0       	rcall	.+498    	; 0x15fc <__fp_pscA>
    140a:	30 f0       	brcs	.+12     	; 0x1418 <__divsf3+0x18>
    140c:	21 f4       	brne	.+8      	; 0x1416 <__divsf3+0x16>
    140e:	5f 3f       	cpi	r21, 0xFF	; 255
    1410:	19 f0       	breq	.+6      	; 0x1418 <__divsf3+0x18>
    1412:	eb c0       	rjmp	.+470    	; 0x15ea <__fp_inf>
    1414:	51 11       	cpse	r21, r1
    1416:	34 c1       	rjmp	.+616    	; 0x1680 <__fp_szero>
    1418:	ee c0       	rjmp	.+476    	; 0x15f6 <__fp_nan>

0000141a <__divsf3x>:
    141a:	0f d1       	rcall	.+542    	; 0x163a <__fp_split3>
    141c:	98 f3       	brcs	.-26     	; 0x1404 <__divsf3+0x4>

0000141e <__divsf3_pse>:
    141e:	99 23       	and	r25, r25
    1420:	c9 f3       	breq	.-14     	; 0x1414 <__divsf3+0x14>
    1422:	55 23       	and	r21, r21
    1424:	b1 f3       	breq	.-20     	; 0x1412 <__divsf3+0x12>
    1426:	95 1b       	sub	r25, r21
    1428:	55 0b       	sbc	r21, r21
    142a:	bb 27       	eor	r27, r27
    142c:	aa 27       	eor	r26, r26
    142e:	62 17       	cp	r22, r18
    1430:	73 07       	cpc	r23, r19
    1432:	84 07       	cpc	r24, r20
    1434:	38 f0       	brcs	.+14     	; 0x1444 <__divsf3_pse+0x26>
    1436:	9f 5f       	subi	r25, 0xFF	; 255
    1438:	5f 4f       	sbci	r21, 0xFF	; 255
    143a:	22 0f       	add	r18, r18
    143c:	33 1f       	adc	r19, r19
    143e:	44 1f       	adc	r20, r20
    1440:	aa 1f       	adc	r26, r26
    1442:	a9 f3       	breq	.-22     	; 0x142e <__divsf3_pse+0x10>
    1444:	33 d0       	rcall	.+102    	; 0x14ac <__divsf3_pse+0x8e>
    1446:	0e 2e       	mov	r0, r30
    1448:	3a f0       	brmi	.+14     	; 0x1458 <__divsf3_pse+0x3a>
    144a:	e0 e8       	ldi	r30, 0x80	; 128
    144c:	30 d0       	rcall	.+96     	; 0x14ae <__divsf3_pse+0x90>
    144e:	91 50       	subi	r25, 0x01	; 1
    1450:	50 40       	sbci	r21, 0x00	; 0
    1452:	e6 95       	lsr	r30
    1454:	00 1c       	adc	r0, r0
    1456:	ca f7       	brpl	.-14     	; 0x144a <__divsf3_pse+0x2c>
    1458:	29 d0       	rcall	.+82     	; 0x14ac <__divsf3_pse+0x8e>
    145a:	fe 2f       	mov	r31, r30
    145c:	27 d0       	rcall	.+78     	; 0x14ac <__divsf3_pse+0x8e>
    145e:	66 0f       	add	r22, r22
    1460:	77 1f       	adc	r23, r23
    1462:	88 1f       	adc	r24, r24
    1464:	bb 1f       	adc	r27, r27
    1466:	26 17       	cp	r18, r22
    1468:	37 07       	cpc	r19, r23
    146a:	48 07       	cpc	r20, r24
    146c:	ab 07       	cpc	r26, r27
    146e:	b0 e8       	ldi	r27, 0x80	; 128
    1470:	09 f0       	breq	.+2      	; 0x1474 <__divsf3_pse+0x56>
    1472:	bb 0b       	sbc	r27, r27
    1474:	80 2d       	mov	r24, r0
    1476:	bf 01       	movw	r22, r30
    1478:	ff 27       	eor	r31, r31
    147a:	93 58       	subi	r25, 0x83	; 131
    147c:	5f 4f       	sbci	r21, 0xFF	; 255
    147e:	2a f0       	brmi	.+10     	; 0x148a <__divsf3_pse+0x6c>
    1480:	9e 3f       	cpi	r25, 0xFE	; 254
    1482:	51 05       	cpc	r21, r1
    1484:	68 f0       	brcs	.+26     	; 0x14a0 <__divsf3_pse+0x82>
    1486:	b1 c0       	rjmp	.+354    	; 0x15ea <__fp_inf>
    1488:	fb c0       	rjmp	.+502    	; 0x1680 <__fp_szero>
    148a:	5f 3f       	cpi	r21, 0xFF	; 255
    148c:	ec f3       	brlt	.-6      	; 0x1488 <__divsf3_pse+0x6a>
    148e:	98 3e       	cpi	r25, 0xE8	; 232
    1490:	dc f3       	brlt	.-10     	; 0x1488 <__divsf3_pse+0x6a>
    1492:	86 95       	lsr	r24
    1494:	77 95       	ror	r23
    1496:	67 95       	ror	r22
    1498:	b7 95       	ror	r27
    149a:	f7 95       	ror	r31
    149c:	9f 5f       	subi	r25, 0xFF	; 255
    149e:	c9 f7       	brne	.-14     	; 0x1492 <__divsf3_pse+0x74>
    14a0:	88 0f       	add	r24, r24
    14a2:	91 1d       	adc	r25, r1
    14a4:	96 95       	lsr	r25
    14a6:	87 95       	ror	r24
    14a8:	97 f9       	bld	r25, 7
    14aa:	08 95       	ret
    14ac:	e1 e0       	ldi	r30, 0x01	; 1
    14ae:	66 0f       	add	r22, r22
    14b0:	77 1f       	adc	r23, r23
    14b2:	88 1f       	adc	r24, r24
    14b4:	bb 1f       	adc	r27, r27
    14b6:	62 17       	cp	r22, r18
    14b8:	73 07       	cpc	r23, r19
    14ba:	84 07       	cpc	r24, r20
    14bc:	ba 07       	cpc	r27, r26
    14be:	20 f0       	brcs	.+8      	; 0x14c8 <__divsf3_pse+0xaa>
    14c0:	62 1b       	sub	r22, r18
    14c2:	73 0b       	sbc	r23, r19
    14c4:	84 0b       	sbc	r24, r20
    14c6:	ba 0b       	sbc	r27, r26
    14c8:	ee 1f       	adc	r30, r30
    14ca:	88 f7       	brcc	.-30     	; 0x14ae <__divsf3_pse+0x90>
    14cc:	e0 95       	com	r30
    14ce:	08 95       	ret

000014d0 <__fixunssfsi>:
    14d0:	bc d0       	rcall	.+376    	; 0x164a <__fp_splitA>
    14d2:	88 f0       	brcs	.+34     	; 0x14f6 <__fixunssfsi+0x26>
    14d4:	9f 57       	subi	r25, 0x7F	; 127
    14d6:	90 f0       	brcs	.+36     	; 0x14fc <__fixunssfsi+0x2c>
    14d8:	b9 2f       	mov	r27, r25
    14da:	99 27       	eor	r25, r25
    14dc:	b7 51       	subi	r27, 0x17	; 23
    14de:	a0 f0       	brcs	.+40     	; 0x1508 <__fixunssfsi+0x38>
    14e0:	d1 f0       	breq	.+52     	; 0x1516 <__fixunssfsi+0x46>
    14e2:	66 0f       	add	r22, r22
    14e4:	77 1f       	adc	r23, r23
    14e6:	88 1f       	adc	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	1a f0       	brmi	.+6      	; 0x14f2 <__fixunssfsi+0x22>
    14ec:	ba 95       	dec	r27
    14ee:	c9 f7       	brne	.-14     	; 0x14e2 <__fixunssfsi+0x12>
    14f0:	12 c0       	rjmp	.+36     	; 0x1516 <__fixunssfsi+0x46>
    14f2:	b1 30       	cpi	r27, 0x01	; 1
    14f4:	81 f0       	breq	.+32     	; 0x1516 <__fixunssfsi+0x46>
    14f6:	c3 d0       	rcall	.+390    	; 0x167e <__fp_zero>
    14f8:	b1 e0       	ldi	r27, 0x01	; 1
    14fa:	08 95       	ret
    14fc:	c0 c0       	rjmp	.+384    	; 0x167e <__fp_zero>
    14fe:	67 2f       	mov	r22, r23
    1500:	78 2f       	mov	r23, r24
    1502:	88 27       	eor	r24, r24
    1504:	b8 5f       	subi	r27, 0xF8	; 248
    1506:	39 f0       	breq	.+14     	; 0x1516 <__fixunssfsi+0x46>
    1508:	b9 3f       	cpi	r27, 0xF9	; 249
    150a:	cc f3       	brlt	.-14     	; 0x14fe <__fixunssfsi+0x2e>
    150c:	86 95       	lsr	r24
    150e:	77 95       	ror	r23
    1510:	67 95       	ror	r22
    1512:	b3 95       	inc	r27
    1514:	d9 f7       	brne	.-10     	; 0x150c <__fixunssfsi+0x3c>
    1516:	3e f4       	brtc	.+14     	; 0x1526 <__fixunssfsi+0x56>
    1518:	90 95       	com	r25
    151a:	80 95       	com	r24
    151c:	70 95       	com	r23
    151e:	61 95       	neg	r22
    1520:	7f 4f       	sbci	r23, 0xFF	; 255
    1522:	8f 4f       	sbci	r24, 0xFF	; 255
    1524:	9f 4f       	sbci	r25, 0xFF	; 255
    1526:	08 95       	ret

00001528 <__floatunsisf>:
    1528:	e8 94       	clt
    152a:	09 c0       	rjmp	.+18     	; 0x153e <__floatsisf+0x12>

0000152c <__floatsisf>:
    152c:	97 fb       	bst	r25, 7
    152e:	3e f4       	brtc	.+14     	; 0x153e <__floatsisf+0x12>
    1530:	90 95       	com	r25
    1532:	80 95       	com	r24
    1534:	70 95       	com	r23
    1536:	61 95       	neg	r22
    1538:	7f 4f       	sbci	r23, 0xFF	; 255
    153a:	8f 4f       	sbci	r24, 0xFF	; 255
    153c:	9f 4f       	sbci	r25, 0xFF	; 255
    153e:	99 23       	and	r25, r25
    1540:	a9 f0       	breq	.+42     	; 0x156c <__floatsisf+0x40>
    1542:	f9 2f       	mov	r31, r25
    1544:	96 e9       	ldi	r25, 0x96	; 150
    1546:	bb 27       	eor	r27, r27
    1548:	93 95       	inc	r25
    154a:	f6 95       	lsr	r31
    154c:	87 95       	ror	r24
    154e:	77 95       	ror	r23
    1550:	67 95       	ror	r22
    1552:	b7 95       	ror	r27
    1554:	f1 11       	cpse	r31, r1
    1556:	f8 cf       	rjmp	.-16     	; 0x1548 <__floatsisf+0x1c>
    1558:	fa f4       	brpl	.+62     	; 0x1598 <__floatsisf+0x6c>
    155a:	bb 0f       	add	r27, r27
    155c:	11 f4       	brne	.+4      	; 0x1562 <__floatsisf+0x36>
    155e:	60 ff       	sbrs	r22, 0
    1560:	1b c0       	rjmp	.+54     	; 0x1598 <__floatsisf+0x6c>
    1562:	6f 5f       	subi	r22, 0xFF	; 255
    1564:	7f 4f       	sbci	r23, 0xFF	; 255
    1566:	8f 4f       	sbci	r24, 0xFF	; 255
    1568:	9f 4f       	sbci	r25, 0xFF	; 255
    156a:	16 c0       	rjmp	.+44     	; 0x1598 <__floatsisf+0x6c>
    156c:	88 23       	and	r24, r24
    156e:	11 f0       	breq	.+4      	; 0x1574 <__floatsisf+0x48>
    1570:	96 e9       	ldi	r25, 0x96	; 150
    1572:	11 c0       	rjmp	.+34     	; 0x1596 <__floatsisf+0x6a>
    1574:	77 23       	and	r23, r23
    1576:	21 f0       	breq	.+8      	; 0x1580 <__floatsisf+0x54>
    1578:	9e e8       	ldi	r25, 0x8E	; 142
    157a:	87 2f       	mov	r24, r23
    157c:	76 2f       	mov	r23, r22
    157e:	05 c0       	rjmp	.+10     	; 0x158a <__floatsisf+0x5e>
    1580:	66 23       	and	r22, r22
    1582:	71 f0       	breq	.+28     	; 0x15a0 <__floatsisf+0x74>
    1584:	96 e8       	ldi	r25, 0x86	; 134
    1586:	86 2f       	mov	r24, r22
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	2a f0       	brmi	.+10     	; 0x1598 <__floatsisf+0x6c>
    158e:	9a 95       	dec	r25
    1590:	66 0f       	add	r22, r22
    1592:	77 1f       	adc	r23, r23
    1594:	88 1f       	adc	r24, r24
    1596:	da f7       	brpl	.-10     	; 0x158e <__floatsisf+0x62>
    1598:	88 0f       	add	r24, r24
    159a:	96 95       	lsr	r25
    159c:	87 95       	ror	r24
    159e:	97 f9       	bld	r25, 7
    15a0:	08 95       	ret

000015a2 <__fp_cmp>:
    15a2:	99 0f       	add	r25, r25
    15a4:	00 08       	sbc	r0, r0
    15a6:	55 0f       	add	r21, r21
    15a8:	aa 0b       	sbc	r26, r26
    15aa:	e0 e8       	ldi	r30, 0x80	; 128
    15ac:	fe ef       	ldi	r31, 0xFE	; 254
    15ae:	16 16       	cp	r1, r22
    15b0:	17 06       	cpc	r1, r23
    15b2:	e8 07       	cpc	r30, r24
    15b4:	f9 07       	cpc	r31, r25
    15b6:	c0 f0       	brcs	.+48     	; 0x15e8 <__fp_cmp+0x46>
    15b8:	12 16       	cp	r1, r18
    15ba:	13 06       	cpc	r1, r19
    15bc:	e4 07       	cpc	r30, r20
    15be:	f5 07       	cpc	r31, r21
    15c0:	98 f0       	brcs	.+38     	; 0x15e8 <__fp_cmp+0x46>
    15c2:	62 1b       	sub	r22, r18
    15c4:	73 0b       	sbc	r23, r19
    15c6:	84 0b       	sbc	r24, r20
    15c8:	95 0b       	sbc	r25, r21
    15ca:	39 f4       	brne	.+14     	; 0x15da <__fp_cmp+0x38>
    15cc:	0a 26       	eor	r0, r26
    15ce:	61 f0       	breq	.+24     	; 0x15e8 <__fp_cmp+0x46>
    15d0:	23 2b       	or	r18, r19
    15d2:	24 2b       	or	r18, r20
    15d4:	25 2b       	or	r18, r21
    15d6:	21 f4       	brne	.+8      	; 0x15e0 <__fp_cmp+0x3e>
    15d8:	08 95       	ret
    15da:	0a 26       	eor	r0, r26
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <__fp_cmp+0x3e>
    15de:	a1 40       	sbci	r26, 0x01	; 1
    15e0:	a6 95       	lsr	r26
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	81 1d       	adc	r24, r1
    15e6:	81 1d       	adc	r24, r1
    15e8:	08 95       	ret

000015ea <__fp_inf>:
    15ea:	97 f9       	bld	r25, 7
    15ec:	9f 67       	ori	r25, 0x7F	; 127
    15ee:	80 e8       	ldi	r24, 0x80	; 128
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	60 e0       	ldi	r22, 0x00	; 0
    15f4:	08 95       	ret

000015f6 <__fp_nan>:
    15f6:	9f ef       	ldi	r25, 0xFF	; 255
    15f8:	80 ec       	ldi	r24, 0xC0	; 192
    15fa:	08 95       	ret

000015fc <__fp_pscA>:
    15fc:	00 24       	eor	r0, r0
    15fe:	0a 94       	dec	r0
    1600:	16 16       	cp	r1, r22
    1602:	17 06       	cpc	r1, r23
    1604:	18 06       	cpc	r1, r24
    1606:	09 06       	cpc	r0, r25
    1608:	08 95       	ret

0000160a <__fp_pscB>:
    160a:	00 24       	eor	r0, r0
    160c:	0a 94       	dec	r0
    160e:	12 16       	cp	r1, r18
    1610:	13 06       	cpc	r1, r19
    1612:	14 06       	cpc	r1, r20
    1614:	05 06       	cpc	r0, r21
    1616:	08 95       	ret

00001618 <__fp_round>:
    1618:	09 2e       	mov	r0, r25
    161a:	03 94       	inc	r0
    161c:	00 0c       	add	r0, r0
    161e:	11 f4       	brne	.+4      	; 0x1624 <__fp_round+0xc>
    1620:	88 23       	and	r24, r24
    1622:	52 f0       	brmi	.+20     	; 0x1638 <__fp_round+0x20>
    1624:	bb 0f       	add	r27, r27
    1626:	40 f4       	brcc	.+16     	; 0x1638 <__fp_round+0x20>
    1628:	bf 2b       	or	r27, r31
    162a:	11 f4       	brne	.+4      	; 0x1630 <__fp_round+0x18>
    162c:	60 ff       	sbrs	r22, 0
    162e:	04 c0       	rjmp	.+8      	; 0x1638 <__fp_round+0x20>
    1630:	6f 5f       	subi	r22, 0xFF	; 255
    1632:	7f 4f       	sbci	r23, 0xFF	; 255
    1634:	8f 4f       	sbci	r24, 0xFF	; 255
    1636:	9f 4f       	sbci	r25, 0xFF	; 255
    1638:	08 95       	ret

0000163a <__fp_split3>:
    163a:	57 fd       	sbrc	r21, 7
    163c:	90 58       	subi	r25, 0x80	; 128
    163e:	44 0f       	add	r20, r20
    1640:	55 1f       	adc	r21, r21
    1642:	59 f0       	breq	.+22     	; 0x165a <__fp_splitA+0x10>
    1644:	5f 3f       	cpi	r21, 0xFF	; 255
    1646:	71 f0       	breq	.+28     	; 0x1664 <__fp_splitA+0x1a>
    1648:	47 95       	ror	r20

0000164a <__fp_splitA>:
    164a:	88 0f       	add	r24, r24
    164c:	97 fb       	bst	r25, 7
    164e:	99 1f       	adc	r25, r25
    1650:	61 f0       	breq	.+24     	; 0x166a <__fp_splitA+0x20>
    1652:	9f 3f       	cpi	r25, 0xFF	; 255
    1654:	79 f0       	breq	.+30     	; 0x1674 <__fp_splitA+0x2a>
    1656:	87 95       	ror	r24
    1658:	08 95       	ret
    165a:	12 16       	cp	r1, r18
    165c:	13 06       	cpc	r1, r19
    165e:	14 06       	cpc	r1, r20
    1660:	55 1f       	adc	r21, r21
    1662:	f2 cf       	rjmp	.-28     	; 0x1648 <__fp_split3+0xe>
    1664:	46 95       	lsr	r20
    1666:	f1 df       	rcall	.-30     	; 0x164a <__fp_splitA>
    1668:	08 c0       	rjmp	.+16     	; 0x167a <__fp_splitA+0x30>
    166a:	16 16       	cp	r1, r22
    166c:	17 06       	cpc	r1, r23
    166e:	18 06       	cpc	r1, r24
    1670:	99 1f       	adc	r25, r25
    1672:	f1 cf       	rjmp	.-30     	; 0x1656 <__fp_splitA+0xc>
    1674:	86 95       	lsr	r24
    1676:	71 05       	cpc	r23, r1
    1678:	61 05       	cpc	r22, r1
    167a:	08 94       	sec
    167c:	08 95       	ret

0000167e <__fp_zero>:
    167e:	e8 94       	clt

00001680 <__fp_szero>:
    1680:	bb 27       	eor	r27, r27
    1682:	66 27       	eor	r22, r22
    1684:	77 27       	eor	r23, r23
    1686:	cb 01       	movw	r24, r22
    1688:	97 f9       	bld	r25, 7
    168a:	08 95       	ret

0000168c <__gesf2>:
    168c:	8a df       	rcall	.-236    	; 0x15a2 <__fp_cmp>
    168e:	08 f4       	brcc	.+2      	; 0x1692 <__gesf2+0x6>
    1690:	8f ef       	ldi	r24, 0xFF	; 255
    1692:	08 95       	ret

00001694 <__mulsf3>:
    1694:	0b d0       	rcall	.+22     	; 0x16ac <__mulsf3x>
    1696:	c0 cf       	rjmp	.-128    	; 0x1618 <__fp_round>
    1698:	b1 df       	rcall	.-158    	; 0x15fc <__fp_pscA>
    169a:	28 f0       	brcs	.+10     	; 0x16a6 <__mulsf3+0x12>
    169c:	b6 df       	rcall	.-148    	; 0x160a <__fp_pscB>
    169e:	18 f0       	brcs	.+6      	; 0x16a6 <__mulsf3+0x12>
    16a0:	95 23       	and	r25, r21
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <__mulsf3+0x12>
    16a4:	a2 cf       	rjmp	.-188    	; 0x15ea <__fp_inf>
    16a6:	a7 cf       	rjmp	.-178    	; 0x15f6 <__fp_nan>
    16a8:	11 24       	eor	r1, r1
    16aa:	ea cf       	rjmp	.-44     	; 0x1680 <__fp_szero>

000016ac <__mulsf3x>:
    16ac:	c6 df       	rcall	.-116    	; 0x163a <__fp_split3>
    16ae:	a0 f3       	brcs	.-24     	; 0x1698 <__mulsf3+0x4>

000016b0 <__mulsf3_pse>:
    16b0:	95 9f       	mul	r25, r21
    16b2:	d1 f3       	breq	.-12     	; 0x16a8 <__mulsf3+0x14>
    16b4:	95 0f       	add	r25, r21
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	55 1f       	adc	r21, r21
    16ba:	62 9f       	mul	r22, r18
    16bc:	f0 01       	movw	r30, r0
    16be:	72 9f       	mul	r23, r18
    16c0:	bb 27       	eor	r27, r27
    16c2:	f0 0d       	add	r31, r0
    16c4:	b1 1d       	adc	r27, r1
    16c6:	63 9f       	mul	r22, r19
    16c8:	aa 27       	eor	r26, r26
    16ca:	f0 0d       	add	r31, r0
    16cc:	b1 1d       	adc	r27, r1
    16ce:	aa 1f       	adc	r26, r26
    16d0:	64 9f       	mul	r22, r20
    16d2:	66 27       	eor	r22, r22
    16d4:	b0 0d       	add	r27, r0
    16d6:	a1 1d       	adc	r26, r1
    16d8:	66 1f       	adc	r22, r22
    16da:	82 9f       	mul	r24, r18
    16dc:	22 27       	eor	r18, r18
    16de:	b0 0d       	add	r27, r0
    16e0:	a1 1d       	adc	r26, r1
    16e2:	62 1f       	adc	r22, r18
    16e4:	73 9f       	mul	r23, r19
    16e6:	b0 0d       	add	r27, r0
    16e8:	a1 1d       	adc	r26, r1
    16ea:	62 1f       	adc	r22, r18
    16ec:	83 9f       	mul	r24, r19
    16ee:	a0 0d       	add	r26, r0
    16f0:	61 1d       	adc	r22, r1
    16f2:	22 1f       	adc	r18, r18
    16f4:	74 9f       	mul	r23, r20
    16f6:	33 27       	eor	r19, r19
    16f8:	a0 0d       	add	r26, r0
    16fa:	61 1d       	adc	r22, r1
    16fc:	23 1f       	adc	r18, r19
    16fe:	84 9f       	mul	r24, r20
    1700:	60 0d       	add	r22, r0
    1702:	21 1d       	adc	r18, r1
    1704:	82 2f       	mov	r24, r18
    1706:	76 2f       	mov	r23, r22
    1708:	6a 2f       	mov	r22, r26
    170a:	11 24       	eor	r1, r1
    170c:	9f 57       	subi	r25, 0x7F	; 127
    170e:	50 40       	sbci	r21, 0x00	; 0
    1710:	8a f0       	brmi	.+34     	; 0x1734 <__mulsf3_pse+0x84>
    1712:	e1 f0       	breq	.+56     	; 0x174c <__mulsf3_pse+0x9c>
    1714:	88 23       	and	r24, r24
    1716:	4a f0       	brmi	.+18     	; 0x172a <__mulsf3_pse+0x7a>
    1718:	ee 0f       	add	r30, r30
    171a:	ff 1f       	adc	r31, r31
    171c:	bb 1f       	adc	r27, r27
    171e:	66 1f       	adc	r22, r22
    1720:	77 1f       	adc	r23, r23
    1722:	88 1f       	adc	r24, r24
    1724:	91 50       	subi	r25, 0x01	; 1
    1726:	50 40       	sbci	r21, 0x00	; 0
    1728:	a9 f7       	brne	.-22     	; 0x1714 <__mulsf3_pse+0x64>
    172a:	9e 3f       	cpi	r25, 0xFE	; 254
    172c:	51 05       	cpc	r21, r1
    172e:	70 f0       	brcs	.+28     	; 0x174c <__mulsf3_pse+0x9c>
    1730:	5c cf       	rjmp	.-328    	; 0x15ea <__fp_inf>
    1732:	a6 cf       	rjmp	.-180    	; 0x1680 <__fp_szero>
    1734:	5f 3f       	cpi	r21, 0xFF	; 255
    1736:	ec f3       	brlt	.-6      	; 0x1732 <__mulsf3_pse+0x82>
    1738:	98 3e       	cpi	r25, 0xE8	; 232
    173a:	dc f3       	brlt	.-10     	; 0x1732 <__mulsf3_pse+0x82>
    173c:	86 95       	lsr	r24
    173e:	77 95       	ror	r23
    1740:	67 95       	ror	r22
    1742:	b7 95       	ror	r27
    1744:	f7 95       	ror	r31
    1746:	e7 95       	ror	r30
    1748:	9f 5f       	subi	r25, 0xFF	; 255
    174a:	c1 f7       	brne	.-16     	; 0x173c <__mulsf3_pse+0x8c>
    174c:	fe 2b       	or	r31, r30
    174e:	88 0f       	add	r24, r24
    1750:	91 1d       	adc	r25, r1
    1752:	96 95       	lsr	r25
    1754:	87 95       	ror	r24
    1756:	97 f9       	bld	r25, 7
    1758:	08 95       	ret

0000175a <__divmodhi4>:
    175a:	97 fb       	bst	r25, 7
    175c:	07 2e       	mov	r0, r23
    175e:	16 f4       	brtc	.+4      	; 0x1764 <__divmodhi4+0xa>
    1760:	00 94       	com	r0
    1762:	06 d0       	rcall	.+12     	; 0x1770 <__divmodhi4_neg1>
    1764:	77 fd       	sbrc	r23, 7
    1766:	08 d0       	rcall	.+16     	; 0x1778 <__divmodhi4_neg2>
    1768:	1a d0       	rcall	.+52     	; 0x179e <__udivmodhi4>
    176a:	07 fc       	sbrc	r0, 7
    176c:	05 d0       	rcall	.+10     	; 0x1778 <__divmodhi4_neg2>
    176e:	3e f4       	brtc	.+14     	; 0x177e <__divmodhi4_exit>

00001770 <__divmodhi4_neg1>:
    1770:	90 95       	com	r25
    1772:	81 95       	neg	r24
    1774:	9f 4f       	sbci	r25, 0xFF	; 255
    1776:	08 95       	ret

00001778 <__divmodhi4_neg2>:
    1778:	70 95       	com	r23
    177a:	61 95       	neg	r22
    177c:	7f 4f       	sbci	r23, 0xFF	; 255

0000177e <__divmodhi4_exit>:
    177e:	08 95       	ret

00001780 <__umulhisi3>:
    1780:	a2 9f       	mul	r26, r18
    1782:	b0 01       	movw	r22, r0
    1784:	b3 9f       	mul	r27, r19
    1786:	c0 01       	movw	r24, r0
    1788:	a3 9f       	mul	r26, r19
    178a:	70 0d       	add	r23, r0
    178c:	81 1d       	adc	r24, r1
    178e:	11 24       	eor	r1, r1
    1790:	91 1d       	adc	r25, r1
    1792:	b2 9f       	mul	r27, r18
    1794:	70 0d       	add	r23, r0
    1796:	81 1d       	adc	r24, r1
    1798:	11 24       	eor	r1, r1
    179a:	91 1d       	adc	r25, r1
    179c:	08 95       	ret

0000179e <__udivmodhi4>:
    179e:	aa 1b       	sub	r26, r26
    17a0:	bb 1b       	sub	r27, r27
    17a2:	51 e1       	ldi	r21, 0x11	; 17
    17a4:	07 c0       	rjmp	.+14     	; 0x17b4 <__udivmodhi4_ep>

000017a6 <__udivmodhi4_loop>:
    17a6:	aa 1f       	adc	r26, r26
    17a8:	bb 1f       	adc	r27, r27
    17aa:	a6 17       	cp	r26, r22
    17ac:	b7 07       	cpc	r27, r23
    17ae:	10 f0       	brcs	.+4      	; 0x17b4 <__udivmodhi4_ep>
    17b0:	a6 1b       	sub	r26, r22
    17b2:	b7 0b       	sbc	r27, r23

000017b4 <__udivmodhi4_ep>:
    17b4:	88 1f       	adc	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	5a 95       	dec	r21
    17ba:	a9 f7       	brne	.-22     	; 0x17a6 <__udivmodhi4_loop>
    17bc:	80 95       	com	r24
    17be:	90 95       	com	r25
    17c0:	bc 01       	movw	r22, r24
    17c2:	cd 01       	movw	r24, r26
    17c4:	08 95       	ret

000017c6 <_exit>:
    17c6:	f8 94       	cli

000017c8 <__stop_program>:
    17c8:	ff cf       	rjmp	.-2      	; 0x17c8 <__stop_program>
