
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000590  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800100  00800100  00000604  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000103e  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa5  00000000  00000000  00001746  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000724  00000000  00000000  000021eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00002910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054b  00000000  00000000  00002a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000065e  00000000  00000000  00002fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003645  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	ca c0       	rjmp	.+404    	; 0x1c6 <__vector_12>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 31       	cpi	r26, 0x16	; 22
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	70 d1       	rcall	.+736    	; 0x38a <main>
  aa:	70 c2       	rjmp	.+1248   	; 0x58c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <checkbusy>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	8f e8       	ldi	r24, 0x8F	; 143
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <checkbusy+0x4>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <checkbusy+0xa>
  b8:	00 00       	nop
  ba:	08 95       	ret

000000bc <write_data>:
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	18 2f       	mov	r17, r24
  c4:	c0 e0       	ldi	r28, 0x00	; 0
  c6:	d1 e2       	ldi	r29, 0x21	; 33
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	88 83       	st	Y, r24
  cc:	f0 df       	rcall	.-32     	; 0xae <checkbusy>
  ce:	10 93 00 20 	sts	0x2000, r17	; 0x802000 <__bss_end+0x1eea>
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	88 83       	st	Y, r24
  d6:	87 ec       	ldi	r24, 0xC7	; 199
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <write_data+0x1e>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <write_data+0x24>
  e0:	00 00       	nop
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	1f 91       	pop	r17
  e8:	08 95       	ret

000000ea <MCU_Init>:
  ea:	80 e8       	ldi	r24, 0x80	; 128
  ec:	85 bf       	out	0x35, r24	; 53
  ee:	94 e4       	ldi	r25, 0x44	; 68
  f0:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
  f4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
  f8:	10 92 00 21 	sts	0x2100, r1	; 0x802100 <__bss_end+0x1fea>
  fc:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__bss_end+0x1eea>
 100:	08 95       	ret

00000102 <LCDCommand>:
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	11 e2       	ldi	r17, 0x21	; 33
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	f8 01       	movw	r30, r16
 112:	80 83       	st	Z, r24
 114:	cc df       	rcall	.-104    	; 0xae <checkbusy>
 116:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__bss_end+0x1eea>
 11a:	f8 01       	movw	r30, r16
 11c:	10 82       	st	Z, r1
 11e:	c1 50       	subi	r28, 0x01	; 1
 120:	c2 30       	cpi	r28, 0x02	; 2
 122:	30 f4       	brcc	.+12     	; 0x130 <LCDCommand+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	8f e3       	ldi	r24, 0x3F	; 63
 126:	9f e1       	ldi	r25, 0x1F	; 31
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCDCommand+0x26>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCDCommand+0x2c>
 12e:	00 00       	nop
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	08 95       	ret

00000138 <LCDInit>:
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	80 93 00 21 	sts	0x2100, r24	; 0x802100 <__bss_end+0x1fea>
 13e:	8f e3       	ldi	r24, 0x3F	; 63
 140:	9f e1       	ldi	r25, 0x1F	; 31
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCDInit+0xa>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCDInit+0x10>
 148:	00 00       	nop
 14a:	8f e5       	ldi	r24, 0x5F	; 95
 14c:	9a ee       	ldi	r25, 0xEA	; 234
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCDInit+0x16>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCDInit+0x1c>
 154:	00 00       	nop
 156:	80 e3       	ldi	r24, 0x30	; 48
 158:	d4 df       	rcall	.-88     	; 0x102 <LCDCommand>
 15a:	8f e1       	ldi	r24, 0x1F	; 31
 15c:	9e e4       	ldi	r25, 0x4E	; 78
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <LCDInit+0x26>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LCDInit+0x2c>
 164:	00 00       	nop
 166:	80 e3       	ldi	r24, 0x30	; 48
 168:	cc df       	rcall	.-104    	; 0x102 <LCDCommand>
 16a:	8f e9       	ldi	r24, 0x9F	; 159
 16c:	9f e0       	ldi	r25, 0x0F	; 15
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <LCDInit+0x36>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCDInit+0x3c>
 174:	00 00       	nop
 176:	82 e3       	ldi	r24, 0x32	; 50
 178:	c4 df       	rcall	.-120    	; 0x102 <LCDCommand>
 17a:	88 e3       	ldi	r24, 0x38	; 56
 17c:	c2 df       	rcall	.-124    	; 0x102 <LCDCommand>
 17e:	88 e0       	ldi	r24, 0x08	; 8
 180:	c0 df       	rcall	.-128    	; 0x102 <LCDCommand>
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	be df       	rcall	.-132    	; 0x102 <LCDCommand>
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	bc df       	rcall	.-136    	; 0x102 <LCDCommand>
 18a:	8c e0       	ldi	r24, 0x0C	; 12
 18c:	ba cf       	rjmp	.-140    	; 0x102 <LCDCommand>
 18e:	08 95       	ret

00000190 <LCDPutchar>:
 190:	cf 93       	push	r28
 192:	c8 2f       	mov	r28, r24
 194:	8c df       	rcall	.-232    	; 0xae <checkbusy>
 196:	8c 2f       	mov	r24, r28
 198:	91 df       	rcall	.-222    	; 0xbc <write_data>
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <LCDPuts>:
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	ec 01       	movw	r28, r24
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <LCDPuts+0xc>
 1a6:	f4 df       	rcall	.-24     	; 0x190 <LCDPutchar>
 1a8:	21 96       	adiw	r28, 0x01	; 1
 1aa:	88 81       	ld	r24, Y
 1ac:	81 11       	cpse	r24, r1
 1ae:	fb cf       	rjmp	.-10     	; 0x1a6 <LCDPuts+0x8>
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <LCDMove>:
 1b6:	90 e4       	ldi	r25, 0x40	; 64
 1b8:	89 9f       	mul	r24, r25
 1ba:	60 0d       	add	r22, r0
 1bc:	11 24       	eor	r1, r1
 1be:	86 2f       	mov	r24, r22
 1c0:	80 68       	ori	r24, 0x80	; 128
 1c2:	9f cf       	rjmp	.-194    	; 0x102 <LCDCommand>
 1c4:	08 95       	ret

000001c6 <__vector_12>:
unsigned char measurement;

unsigned char check = 0;


ISR(TIMER1_COMPA_vect) {
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	0b b6       	in	r0, 0x3b	; 59
 1d2:	0f 92       	push	r0
 1d4:	2f 93       	push	r18
 1d6:	3f 93       	push	r19
 1d8:	4f 93       	push	r20
 1da:	5f 93       	push	r21
 1dc:	6f 93       	push	r22
 1de:	7f 93       	push	r23
 1e0:	8f 93       	push	r24
 1e2:	9f 93       	push	r25
 1e4:	ef 93       	push	r30
 1e6:	ff 93       	push	r31
	
	unsigned char temp = time_average[count];
 1e8:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <count>
 1ec:	e7 2f       	mov	r30, r23
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	e5 5f       	subi	r30, 0xF5	; 245
 1f2:	fe 4f       	sbci	r31, 0xFE	; 254
 1f4:	90 81       	ld	r25, Z
	time_average[count] = check;
 1f6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fa:	60 83       	st	Z, r22
	for (av = 0; av < 8; av++) {
 1fc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <av>
 200:	27 c0       	rjmp	.+78     	; 0x250 <__vector_12+0x8a>
		if (((temp ^ time_average[count]) >> av) & 0x01) {
 202:	29 2f       	mov	r18, r25
 204:	26 27       	eor	r18, r22
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	48 2f       	mov	r20, r24
 20a:	50 e0       	ldi	r21, 0x00	; 0
 20c:	08 2e       	mov	r0, r24
 20e:	02 c0       	rjmp	.+4      	; 0x214 <__vector_12+0x4e>
 210:	35 95       	asr	r19
 212:	27 95       	ror	r18
 214:	0a 94       	dec	r0
 216:	e2 f7       	brpl	.-8      	; 0x210 <__vector_12+0x4a>
 218:	20 ff       	sbrs	r18, 0
 21a:	17 c0       	rjmp	.+46     	; 0x24a <__vector_12+0x84>
			if ((temp >> av) & 0x01) {
 21c:	29 2f       	mov	r18, r25
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	08 2e       	mov	r0, r24
 222:	02 c0       	rjmp	.+4      	; 0x228 <__vector_12+0x62>
 224:	35 95       	asr	r19
 226:	27 95       	ror	r18
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <__vector_12+0x5e>
 22c:	20 ff       	sbrs	r18, 0
 22e:	07 c0       	rjmp	.+14     	; 0x23e <__vector_12+0x78>
				average[av] --;
 230:	fa 01       	movw	r30, r20
 232:	ee 5f       	subi	r30, 0xFE	; 254
 234:	fe 4f       	sbci	r31, 0xFE	; 254
 236:	20 81       	ld	r18, Z
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	20 83       	st	Z, r18
 23c:	06 c0       	rjmp	.+12     	; 0x24a <__vector_12+0x84>
			}
			else {
				average[av] ++;
 23e:	fa 01       	movw	r30, r20
 240:	ee 5f       	subi	r30, 0xFE	; 254
 242:	fe 4f       	sbci	r31, 0xFE	; 254
 244:	20 81       	ld	r18, Z
 246:	2f 5f       	subi	r18, 0xFF	; 255
 248:	20 83       	st	Z, r18

ISR(TIMER1_COMPA_vect) {
	
	unsigned char temp = time_average[count];
	time_average[count] = check;
	for (av = 0; av < 8; av++) {
 24a:	8f 5f       	subi	r24, 0xFF	; 255
 24c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <av>
 250:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <av>
 254:	88 30       	cpi	r24, 0x08	; 8
 256:	a8 f2       	brcs	.-86     	; 0x202 <__vector_12+0x3c>
				average[av] ++;
			}
		}
	}
	
	count ++;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	87 0f       	add	r24, r23
 25c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <count>
	if (count == average_count) {
 260:	8a 30       	cpi	r24, 0x0A	; 10
 262:	11 f4       	brne	.+4      	; 0x268 <__vector_12+0xa2>
		count = 0;
 264:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <count>
	}
	
	measurement = 1;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <measurement>
}
 26e:	ff 91       	pop	r31
 270:	ef 91       	pop	r30
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	7f 91       	pop	r23
 278:	6f 91       	pop	r22
 27a:	5f 91       	pop	r21
 27c:	4f 91       	pop	r20
 27e:	3f 91       	pop	r19
 280:	2f 91       	pop	r18
 282:	0f 90       	pop	r0
 284:	0b be       	out	0x3b, r0	; 59
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <measurement_time_Init>:

void measurement_time_Init() {						// 초음파 계측 주기 : // 1초
	TCCR1A = (0<<WGM11) | (0<<WGM10);
 290:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
 292:	8d e0       	ldi	r24, 0x0D	; 13
 294:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
 296:	87 b7       	in	r24, 0x37	; 55
 298:	80 61       	ori	r24, 0x10	; 16
 29a:	87 bf       	out	0x37, r24	; 55
	OCR1A = 15624 * measurement_time;
 29c:	84 e3       	ldi	r24, 0x34	; 52
 29e:	9c e0       	ldi	r25, 0x0C	; 12
 2a0:	9b bd       	out	0x2b, r25	; 43
 2a2:	8a bd       	out	0x2a, r24	; 42
	sei();
 2a4:	78 94       	sei
 2a6:	08 95       	ret

000002a8 <tNum>:
}

int tNum(unsigned int NUM) {
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <tNum+0x6>
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <tNum+0x8>
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	ac 01       	movw	r20, r24
	unsigned char Buff[4] = "0";
 2b6:	1c 82       	std	Y+4, r1	; 0x04
 2b8:	1b 82       	std	Y+3, r1	; 0x03
	Buff[0] = '0'+((NUM %1000)/100);
 2ba:	9c 01       	movw	r18, r24
 2bc:	36 95       	lsr	r19
 2be:	27 95       	ror	r18
 2c0:	36 95       	lsr	r19
 2c2:	27 95       	ror	r18
 2c4:	36 95       	lsr	r19
 2c6:	27 95       	ror	r18
 2c8:	a5 ec       	ldi	r26, 0xC5	; 197
 2ca:	b0 e2       	ldi	r27, 0x20	; 32
 2cc:	50 d1       	rcall	.+672    	; 0x56e <__umulhisi3>
 2ce:	92 95       	swap	r25
 2d0:	82 95       	swap	r24
 2d2:	8f 70       	andi	r24, 0x0F	; 15
 2d4:	89 27       	eor	r24, r25
 2d6:	9f 70       	andi	r25, 0x0F	; 15
 2d8:	89 27       	eor	r24, r25
 2da:	68 ee       	ldi	r22, 0xE8	; 232
 2dc:	73 e0       	ldi	r23, 0x03	; 3
 2de:	86 9f       	mul	r24, r22
 2e0:	90 01       	movw	r18, r0
 2e2:	87 9f       	mul	r24, r23
 2e4:	30 0d       	add	r19, r0
 2e6:	96 9f       	mul	r25, r22
 2e8:	30 0d       	add	r19, r0
 2ea:	11 24       	eor	r1, r1
 2ec:	ca 01       	movw	r24, r20
 2ee:	82 1b       	sub	r24, r18
 2f0:	93 0b       	sbc	r25, r19
 2f2:	9c 01       	movw	r18, r24
 2f4:	36 95       	lsr	r19
 2f6:	27 95       	ror	r18
 2f8:	36 95       	lsr	r19
 2fa:	27 95       	ror	r18
 2fc:	ab e7       	ldi	r26, 0x7B	; 123
 2fe:	b4 e1       	ldi	r27, 0x14	; 20
 300:	36 d1       	rcall	.+620    	; 0x56e <__umulhisi3>
 302:	96 95       	lsr	r25
 304:	87 95       	ror	r24
 306:	80 5d       	subi	r24, 0xD0	; 208
 308:	89 83       	std	Y+1, r24	; 0x01
	Buff[1] = '0'+((NUM %100)/10);
 30a:	9a 01       	movw	r18, r20
 30c:	36 95       	lsr	r19
 30e:	27 95       	ror	r18
 310:	36 95       	lsr	r19
 312:	27 95       	ror	r18
 314:	2c d1       	rcall	.+600    	; 0x56e <__umulhisi3>
 316:	9c 01       	movw	r18, r24
 318:	36 95       	lsr	r19
 31a:	27 95       	ror	r18
 31c:	64 e6       	ldi	r22, 0x64	; 100
 31e:	62 9f       	mul	r22, r18
 320:	c0 01       	movw	r24, r0
 322:	63 9f       	mul	r22, r19
 324:	90 0d       	add	r25, r0
 326:	11 24       	eor	r1, r1
 328:	9a 01       	movw	r18, r20
 32a:	28 1b       	sub	r18, r24
 32c:	39 0b       	sbc	r19, r25
 32e:	ad ec       	ldi	r26, 0xCD	; 205
 330:	bc ec       	ldi	r27, 0xCC	; 204
 332:	1d d1       	rcall	.+570    	; 0x56e <__umulhisi3>
 334:	96 95       	lsr	r25
 336:	87 95       	ror	r24
 338:	96 95       	lsr	r25
 33a:	87 95       	ror	r24
 33c:	96 95       	lsr	r25
 33e:	87 95       	ror	r24
 340:	80 5d       	subi	r24, 0xD0	; 208
	Buff[2] = '0'+(NUM %10);
 342:	8a 83       	std	Y+2, r24	; 0x02
 344:	9a 01       	movw	r18, r20
 346:	13 d1       	rcall	.+550    	; 0x56e <__umulhisi3>
 348:	96 95       	lsr	r25
 34a:	87 95       	ror	r24
 34c:	96 95       	lsr	r25
 34e:	87 95       	ror	r24
 350:	96 95       	lsr	r25
 352:	87 95       	ror	r24
 354:	9c 01       	movw	r18, r24
 356:	22 0f       	add	r18, r18
 358:	33 1f       	adc	r19, r19
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	82 0f       	add	r24, r18
 368:	93 1f       	adc	r25, r19
 36a:	9a 01       	movw	r18, r20
 36c:	28 1b       	sub	r18, r24
 36e:	39 0b       	sbc	r19, r25
 370:	c9 01       	movw	r24, r18
 372:	80 5d       	subi	r24, 0xD0	; 208
	LCDPuts(Buff);
 374:	8b 83       	std	Y+3, r24	; 0x03
 376:	ce 01       	movw	r24, r28
 378:	01 96       	adiw	r24, 0x01	; 1
 37a:	11 df       	rcall	.-478    	; 0x19e <LCDPuts>
}
 37c:	0f 90       	pop	r0
 37e:	0f 90       	pop	r0
 380:	0f 90       	pop	r0
 382:	0f 90       	pop	r0
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <main>:



int main(void){
	DDRE=0x80;
 38a:	80 e8       	ldi	r24, 0x80	; 128
 38c:	82 b9       	out	0x02, r24	; 2
	PORTE = 0x7f;
 38e:	8f e7       	ldi	r24, 0x7F	; 127
 390:	83 b9       	out	0x03, r24	; 3

	measurement_time_Init();
 392:	7e df       	rcall	.-260    	; 0x290 <measurement_time_Init>
	MCU_Init();					//LCD 사용을 위한 MCU 설정
 394:	aa de       	rcall	.-684    	; 0xea <MCU_Init>
	LCDInit();					//LCD 사용을 위한 초기화 설정
 396:	d0 de       	rcall	.-608    	; 0x138 <LCDInit>
 398:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <measurement>
	
	while(1){
		if (measurement == 1) {
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	09 f0       	breq	.+2      	; 0x3a2 <main+0x18>
 3a0:	49 c0       	rjmp	.+146    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3a2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			check = 0;
 3a6:	87 e0       	ldi	r24, 0x07	; 7
			TCCR0 = 7;
 3a8:	83 bf       	out	0x33, r24	; 51
 3aa:	83 b1       	in	r24, 0x03	; 3
			
			PORTE |= (1<<TRIG);     //Trig=HIGH -> 거리 측정 명령 시작
 3ac:	80 68       	ori	r24, 0x80	; 128
 3ae:	83 b9       	out	0x03, r24	; 3
 3b0:	85 e3       	ldi	r24, 0x35	; 53
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b2:	8a 95       	dec	r24
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <main+0x28>
 3b6:	00 00       	nop
 3b8:	83 b1       	in	r24, 0x03	; 3
			_delay_us(10);			//10us동안 유지
			PORTE &= ~(1<<TRIG);
 3ba:	8f 77       	andi	r24, 0x7F	; 127
 3bc:	83 b9       	out	0x03, r24	; 3
 3be:	08 9b       	sbis	0x01, 0	; 1
			
			while (!(PINE & (1<<0))) {}
 3c0:	fe cf       	rjmp	.-4      	; 0x3be <main+0x34>
 3c2:	12 be       	out	0x32, r1	; 50
			TCNT0 = 0;
 3c4:	28 c0       	rjmp	.+80     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			
			while (TCNT0 < ((interval + 50) / 10.88)){
 3c6:	81 b1       	in	r24, 0x01	; 1
				for (unsigned char a = 0 ; a < 7; a++) {
					if (PINE & (1<<a)) {
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0c 2e       	mov	r0, r28
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <main+0x48>
 3ce:	95 95       	asr	r25
 3d0:	87 95       	ror	r24
 3d2:	0a 94       	dec	r0
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <main+0x44>
 3d6:	80 ff       	sbrs	r24, 0
 3d8:	19 c0       	rjmp	.+50     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3da:	62 b7       	in	r22, 0x32	; 50
						if (TCNT0 > ((interval) / 10.88)) {
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	62 d0       	rcall	.+196    	; 0x4a8 <__floatsisf>
 3e4:	2d e2       	ldi	r18, 0x2D	; 45
 3e6:	3d ea       	ldi	r19, 0xAD	; 173
 3e8:	40 e8       	ldi	r20, 0x80	; 128
 3ea:	52 e4       	ldi	r21, 0x42	; 66
 3ec:	bc d0       	rcall	.+376    	; 0x566 <__gesf2>
 3ee:	18 16       	cp	r1, r24
 3f0:	6c f4       	brge	.+26     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3f2:	81 e0       	ldi	r24, 0x01	; 1
							check |= (1 << a);
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0c 2e       	mov	r0, r28
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <main+0x74>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	0a 94       	dec	r0
 400:	e2 f7       	brpl	.-8      	; 0x3fa <main+0x70>
 402:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 406:	89 2b       	or	r24, r25
 408:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 40c:	cf 5f       	subi	r28, 0xFF	; 255
			
			while (!(PINE & (1<<0))) {}
			TCNT0 = 0;
			
			while (TCNT0 < ((interval + 50) / 10.88)){
				for (unsigned char a = 0 ; a < 7; a++) {
 40e:	01 c0       	rjmp	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 410:	c0 e0       	ldi	r28, 0x00	; 0
 412:	c7 30       	cpi	r28, 0x07	; 7
 414:	c0 f2       	brcs	.-80     	; 0x3c6 <main+0x3c>
			PORTE &= ~(1<<TRIG);
			
			while (!(PINE & (1<<0))) {}
			TCNT0 = 0;
			
			while (TCNT0 < ((interval + 50) / 10.88)){
 416:	62 b7       	in	r22, 0x32	; 50
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	44 d0       	rcall	.+136    	; 0x4a8 <__floatsisf>
 420:	2e e1       	ldi	r18, 0x1E	; 30
 422:	3e ed       	ldi	r19, 0xDE	; 222
 424:	49 e8       	ldi	r20, 0x89	; 137
 426:	52 e4       	ldi	r21, 0x42	; 66
 428:	39 d0       	rcall	.+114    	; 0x49c <__cmpsf2>
 42a:	88 23       	and	r24, r24
 42c:	8c f3       	brlt	.-30     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
							check |= (1 << a);
						}
					}
				}
			}
			TCCR0 = 0;
 42e:	13 be       	out	0x33, r1	; 51
			measurement = 0;
 430:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <measurement>
		}
		
		LCDMove(0,0);
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	be de       	rcall	.-644    	; 0x1b6 <LCDMove>
		tNum(average[0]);
 43a:	c2 e0       	ldi	r28, 0x02	; 2
 43c:	d1 e0       	ldi	r29, 0x01	; 1
 43e:	88 81       	ld	r24, Y
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	32 df       	rcall	.-412    	; 0x2a8 <tNum>
		LCDMove(0,4);
 444:	64 e0       	ldi	r22, 0x04	; 4
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	b6 de       	rcall	.-660    	; 0x1b6 <LCDMove>
		tNum(average[1]);
 44a:	89 81       	ldd	r24, Y+1	; 0x01
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	2c df       	rcall	.-424    	; 0x2a8 <tNum>
		LCDMove(0,8);
 450:	68 e0       	ldi	r22, 0x08	; 8
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	b0 de       	rcall	.-672    	; 0x1b6 <LCDMove>
		tNum(average[2]);
 456:	8a 81       	ldd	r24, Y+2	; 0x02
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	26 df       	rcall	.-436    	; 0x2a8 <tNum>
		LCDMove(0,12);
 45c:	6c e0       	ldi	r22, 0x0C	; 12
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	aa de       	rcall	.-684    	; 0x1b6 <LCDMove>
		tNum(average[3]);
 462:	8b 81       	ldd	r24, Y+3	; 0x03
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	20 df       	rcall	.-448    	; 0x2a8 <tNum>
		
		LCDMove(1,0);
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	a4 de       	rcall	.-696    	; 0x1b6 <LCDMove>
		tNum(average[4]);
 46e:	8c 81       	ldd	r24, Y+4	; 0x04
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	1a df       	rcall	.-460    	; 0x2a8 <tNum>
		LCDMove(1,4);
 474:	64 e0       	ldi	r22, 0x04	; 4
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	9e de       	rcall	.-708    	; 0x1b6 <LCDMove>
		tNum(average[5]);
 47a:	8d 81       	ldd	r24, Y+5	; 0x05
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	14 df       	rcall	.-472    	; 0x2a8 <tNum>
 480:	68 e0       	ldi	r22, 0x08	; 8
		LCDMove(1,8);
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	98 de       	rcall	.-720    	; 0x1b6 <LCDMove>
 486:	8e 81       	ldd	r24, Y+6	; 0x06
 488:	90 e0       	ldi	r25, 0x00	; 0
		tNum(average[6]);
 48a:	0e df       	rcall	.-484    	; 0x2a8 <tNum>
 48c:	6c e0       	ldi	r22, 0x0C	; 12
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	92 de       	rcall	.-732    	; 0x1b6 <LCDMove>
		LCDMove(1,12);
 492:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	07 df       	rcall	.-498    	; 0x2a8 <tNum>
		tNum(check);
 49a:	7e cf       	rjmp	.-260    	; 0x398 <main+0xe>

0000049c <__cmpsf2>:
 49c:	40 d0       	rcall	.+128    	; 0x51e <__fp_cmp>
 49e:	08 f4       	brcc	.+2      	; 0x4a2 <__cmpsf2+0x6>
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	08 95       	ret

000004a4 <__floatunsisf>:
	}
 4a4:	e8 94       	clt
 4a6:	09 c0       	rjmp	.+18     	; 0x4ba <__floatsisf+0x12>

000004a8 <__floatsisf>:
 4a8:	97 fb       	bst	r25, 7
 4aa:	3e f4       	brtc	.+14     	; 0x4ba <__floatsisf+0x12>
 4ac:	90 95       	com	r25
 4ae:	80 95       	com	r24
 4b0:	70 95       	com	r23
 4b2:	61 95       	neg	r22
 4b4:	7f 4f       	sbci	r23, 0xFF	; 255
 4b6:	8f 4f       	sbci	r24, 0xFF	; 255
 4b8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ba:	99 23       	and	r25, r25
 4bc:	a9 f0       	breq	.+42     	; 0x4e8 <__floatsisf+0x40>
 4be:	f9 2f       	mov	r31, r25
 4c0:	96 e9       	ldi	r25, 0x96	; 150
 4c2:	bb 27       	eor	r27, r27
 4c4:	93 95       	inc	r25
 4c6:	f6 95       	lsr	r31
 4c8:	87 95       	ror	r24
 4ca:	77 95       	ror	r23
 4cc:	67 95       	ror	r22
 4ce:	b7 95       	ror	r27
 4d0:	f1 11       	cpse	r31, r1
 4d2:	f8 cf       	rjmp	.-16     	; 0x4c4 <__floatsisf+0x1c>
 4d4:	fa f4       	brpl	.+62     	; 0x514 <__floatsisf+0x6c>
 4d6:	bb 0f       	add	r27, r27
 4d8:	11 f4       	brne	.+4      	; 0x4de <__floatsisf+0x36>
 4da:	60 ff       	sbrs	r22, 0
 4dc:	1b c0       	rjmp	.+54     	; 0x514 <__floatsisf+0x6c>
 4de:	6f 5f       	subi	r22, 0xFF	; 255
 4e0:	7f 4f       	sbci	r23, 0xFF	; 255
 4e2:	8f 4f       	sbci	r24, 0xFF	; 255
 4e4:	9f 4f       	sbci	r25, 0xFF	; 255
 4e6:	16 c0       	rjmp	.+44     	; 0x514 <__floatsisf+0x6c>
 4e8:	88 23       	and	r24, r24
 4ea:	11 f0       	breq	.+4      	; 0x4f0 <__floatsisf+0x48>
 4ec:	96 e9       	ldi	r25, 0x96	; 150
 4ee:	11 c0       	rjmp	.+34     	; 0x512 <__floatsisf+0x6a>
 4f0:	77 23       	and	r23, r23
 4f2:	21 f0       	breq	.+8      	; 0x4fc <__floatsisf+0x54>
 4f4:	9e e8       	ldi	r25, 0x8E	; 142
 4f6:	87 2f       	mov	r24, r23
 4f8:	76 2f       	mov	r23, r22
 4fa:	05 c0       	rjmp	.+10     	; 0x506 <__floatsisf+0x5e>
 4fc:	66 23       	and	r22, r22
 4fe:	71 f0       	breq	.+28     	; 0x51c <__floatsisf+0x74>
 500:	96 e8       	ldi	r25, 0x86	; 134
 502:	86 2f       	mov	r24, r22
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	2a f0       	brmi	.+10     	; 0x514 <__floatsisf+0x6c>
 50a:	9a 95       	dec	r25
 50c:	66 0f       	add	r22, r22
 50e:	77 1f       	adc	r23, r23
 510:	88 1f       	adc	r24, r24
 512:	da f7       	brpl	.-10     	; 0x50a <__floatsisf+0x62>
 514:	88 0f       	add	r24, r24
 516:	96 95       	lsr	r25
 518:	87 95       	ror	r24
 51a:	97 f9       	bld	r25, 7
 51c:	08 95       	ret

0000051e <__fp_cmp>:
 51e:	99 0f       	add	r25, r25
 520:	00 08       	sbc	r0, r0
 522:	55 0f       	add	r21, r21
 524:	aa 0b       	sbc	r26, r26
 526:	e0 e8       	ldi	r30, 0x80	; 128
 528:	fe ef       	ldi	r31, 0xFE	; 254
 52a:	16 16       	cp	r1, r22
 52c:	17 06       	cpc	r1, r23
 52e:	e8 07       	cpc	r30, r24
 530:	f9 07       	cpc	r31, r25
 532:	c0 f0       	brcs	.+48     	; 0x564 <__fp_cmp+0x46>
 534:	12 16       	cp	r1, r18
 536:	13 06       	cpc	r1, r19
 538:	e4 07       	cpc	r30, r20
 53a:	f5 07       	cpc	r31, r21
 53c:	98 f0       	brcs	.+38     	; 0x564 <__fp_cmp+0x46>
 53e:	62 1b       	sub	r22, r18
 540:	73 0b       	sbc	r23, r19
 542:	84 0b       	sbc	r24, r20
 544:	95 0b       	sbc	r25, r21
 546:	39 f4       	brne	.+14     	; 0x556 <__fp_cmp+0x38>
 548:	0a 26       	eor	r0, r26
 54a:	61 f0       	breq	.+24     	; 0x564 <__fp_cmp+0x46>
 54c:	23 2b       	or	r18, r19
 54e:	24 2b       	or	r18, r20
 550:	25 2b       	or	r18, r21
 552:	21 f4       	brne	.+8      	; 0x55c <__fp_cmp+0x3e>
 554:	08 95       	ret
 556:	0a 26       	eor	r0, r26
 558:	09 f4       	brne	.+2      	; 0x55c <__fp_cmp+0x3e>
 55a:	a1 40       	sbci	r26, 0x01	; 1
 55c:	a6 95       	lsr	r26
 55e:	8f ef       	ldi	r24, 0xFF	; 255
 560:	81 1d       	adc	r24, r1
 562:	81 1d       	adc	r24, r1
 564:	08 95       	ret

00000566 <__gesf2>:
 566:	db df       	rcall	.-74     	; 0x51e <__fp_cmp>
 568:	08 f4       	brcc	.+2      	; 0x56c <__gesf2+0x6>
 56a:	8f ef       	ldi	r24, 0xFF	; 255
 56c:	08 95       	ret

0000056e <__umulhisi3>:
 56e:	a2 9f       	mul	r26, r18
 570:	b0 01       	movw	r22, r0
 572:	b3 9f       	mul	r27, r19
 574:	c0 01       	movw	r24, r0
 576:	a3 9f       	mul	r26, r19
 578:	70 0d       	add	r23, r0
 57a:	81 1d       	adc	r24, r1
 57c:	11 24       	eor	r1, r1
 57e:	91 1d       	adc	r25, r1
 580:	b2 9f       	mul	r27, r18
 582:	70 0d       	add	r23, r0
 584:	81 1d       	adc	r24, r1
 586:	11 24       	eor	r1, r1
 588:	91 1d       	adc	r25, r1
 58a:	08 95       	ret

0000058c <_exit>:
 58c:	f8 94       	cli

0000058e <__stop_program>:
 58e:	ff cf       	rjmp	.-2      	; 0x58e <__stop_program>
