
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000938  000009cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000938  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800118  00800118  000009e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001311  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad2  00000000  00000000  00001e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009dd  00000000  00000000  000028e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  000032c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000570  00000000  00000000  000034c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e8  00000000  00000000  00003a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004318  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	d7 c0       	rjmp	.+430    	; 0x1e0 <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2c c1       	rjmp	.+600    	; 0x2c2 <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e3       	ldi	r30, 0x38	; 56
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 33       	cpi	r26, 0x3B	; 59
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	50 d2       	rcall	.+1184   	; 0x564 <main>
  c4:	37 c4       	rjmp	.+2158   	; 0x934 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <checkbusy>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	8f e8       	ldi	r24, 0x8F	; 143
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <checkbusy+0x4>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <checkbusy+0xa>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <write_data>:
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	18 2f       	mov	r17, r24
  de:	c0 e0       	ldi	r28, 0x00	; 0
  e0:	d1 e2       	ldi	r29, 0x21	; 33
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	88 83       	st	Y, r24
  e6:	f0 df       	rcall	.-32     	; 0xc8 <checkbusy>
  e8:	10 93 00 20 	sts	0x2000, r17	; 0x802000 <__bss_end+0x1ec5>
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	88 83       	st	Y, r24
  f0:	87 ec       	ldi	r24, 0xC7	; 199
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <write_data+0x1e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <write_data+0x24>
  fa:	00 00       	nop
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	1f 91       	pop	r17
 102:	08 95       	ret

00000104 <MCU_Init>:
 104:	80 e8       	ldi	r24, 0x80	; 128
 106:	85 bf       	out	0x35, r24	; 53
 108:	94 e4       	ldi	r25, 0x44	; 68
 10a:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
 10e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
 112:	10 92 00 21 	sts	0x2100, r1	; 0x802100 <__bss_end+0x1fc5>
 116:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__bss_end+0x1ec5>
 11a:	08 95       	ret

0000011c <LCDCommand>:
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	c8 2f       	mov	r28, r24
 124:	00 e0       	ldi	r16, 0x00	; 0
 126:	11 e2       	ldi	r17, 0x21	; 33
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	f8 01       	movw	r30, r16
 12c:	80 83       	st	Z, r24
 12e:	cc df       	rcall	.-104    	; 0xc8 <checkbusy>
 130:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__bss_end+0x1ec5>
 134:	f8 01       	movw	r30, r16
 136:	10 82       	st	Z, r1
 138:	c1 50       	subi	r28, 0x01	; 1
 13a:	c2 30       	cpi	r28, 0x02	; 2
 13c:	30 f4       	brcc	.+12     	; 0x14a <LCDCommand+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	8f e3       	ldi	r24, 0x3F	; 63
 140:	9f e1       	ldi	r25, 0x1F	; 31
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCDCommand+0x26>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCDCommand+0x2c>
 148:	00 00       	nop
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	08 95       	ret

00000152 <LCDInit>:
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	80 93 00 21 	sts	0x2100, r24	; 0x802100 <__bss_end+0x1fc5>
 158:	8f e3       	ldi	r24, 0x3F	; 63
 15a:	9f e1       	ldi	r25, 0x1F	; 31
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCDInit+0xa>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCDInit+0x10>
 162:	00 00       	nop
 164:	8f e5       	ldi	r24, 0x5F	; 95
 166:	9a ee       	ldi	r25, 0xEA	; 234
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCDInit+0x16>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCDInit+0x1c>
 16e:	00 00       	nop
 170:	80 e3       	ldi	r24, 0x30	; 48
 172:	d4 df       	rcall	.-88     	; 0x11c <LCDCommand>
 174:	8f e1       	ldi	r24, 0x1F	; 31
 176:	9e e4       	ldi	r25, 0x4E	; 78
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCDInit+0x26>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCDInit+0x2c>
 17e:	00 00       	nop
 180:	80 e3       	ldi	r24, 0x30	; 48
 182:	cc df       	rcall	.-104    	; 0x11c <LCDCommand>
 184:	8f e9       	ldi	r24, 0x9F	; 159
 186:	9f e0       	ldi	r25, 0x0F	; 15
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCDInit+0x36>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCDInit+0x3c>
 18e:	00 00       	nop
 190:	82 e3       	ldi	r24, 0x32	; 50
 192:	c4 df       	rcall	.-120    	; 0x11c <LCDCommand>
 194:	88 e3       	ldi	r24, 0x38	; 56
 196:	c2 df       	rcall	.-124    	; 0x11c <LCDCommand>
 198:	88 e0       	ldi	r24, 0x08	; 8
 19a:	c0 df       	rcall	.-128    	; 0x11c <LCDCommand>
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	be df       	rcall	.-132    	; 0x11c <LCDCommand>
 1a0:	86 e0       	ldi	r24, 0x06	; 6
 1a2:	bc df       	rcall	.-136    	; 0x11c <LCDCommand>
 1a4:	8c e0       	ldi	r24, 0x0C	; 12
 1a6:	ba cf       	rjmp	.-140    	; 0x11c <LCDCommand>
 1a8:	08 95       	ret

000001aa <LCDPutchar>:
 1aa:	cf 93       	push	r28
 1ac:	c8 2f       	mov	r28, r24
 1ae:	8c df       	rcall	.-232    	; 0xc8 <checkbusy>
 1b0:	8c 2f       	mov	r24, r28
 1b2:	91 df       	rcall	.-222    	; 0xd6 <write_data>
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <LCDPuts>:
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	ec 01       	movw	r28, r24
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <LCDPuts+0xc>
 1c0:	f4 df       	rcall	.-24     	; 0x1aa <LCDPutchar>
 1c2:	21 96       	adiw	r28, 0x01	; 1
 1c4:	88 81       	ld	r24, Y
 1c6:	81 11       	cpse	r24, r1
 1c8:	fb cf       	rjmp	.-10     	; 0x1c0 <LCDPuts+0x8>
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <LCDMove>:
 1d0:	90 e4       	ldi	r25, 0x40	; 64
 1d2:	89 9f       	mul	r24, r25
 1d4:	60 0d       	add	r22, r0
 1d6:	11 24       	eor	r1, r1
 1d8:	86 2f       	mov	r24, r22
 1da:	80 68       	ori	r24, 0x80	; 128
 1dc:	9f cf       	rjmp	.-194    	; 0x11c <LCDCommand>
 1de:	08 95       	ret

000001e0 <__vector_12>:
unsigned char av = 0;
unsigned char measurement;
// sensor
unsigned char check = 0;

ISR(TIMER1_COMPA_vect) {
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	0b b6       	in	r0, 0x3b	; 59
 1ec:	0f 92       	push	r0
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	4f 93       	push	r20
 1f4:	5f 93       	push	r21
 1f6:	6f 93       	push	r22
 1f8:	7f 93       	push	r23
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31
	unsigned char temp = time_average[count];
 202:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <count>
 206:	e7 2f       	mov	r30, r23
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	ef 5c       	subi	r30, 0xCF	; 207
 20c:	fe 4f       	sbci	r31, 0xFE	; 254
 20e:	90 81       	ld	r25, Z
	time_average[count] = check;
 210:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <check>
 214:	60 83       	st	Z, r22
	for (av = 0; av < 8; av++) {
 216:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <av>
 21a:	27 c0       	rjmp	.+78     	; 0x26a <__vector_12+0x8a>
		if (((temp ^ time_average[count]) >> av) & 0x01) {
 21c:	29 2f       	mov	r18, r25
 21e:	26 27       	eor	r18, r22
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	48 2f       	mov	r20, r24
 224:	50 e0       	ldi	r21, 0x00	; 0
 226:	08 2e       	mov	r0, r24
 228:	02 c0       	rjmp	.+4      	; 0x22e <__vector_12+0x4e>
 22a:	35 95       	asr	r19
 22c:	27 95       	ror	r18
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <__vector_12+0x4a>
 232:	20 ff       	sbrs	r18, 0
 234:	17 c0       	rjmp	.+46     	; 0x264 <__vector_12+0x84>
			if ((temp >> av) & 0x01) {
 236:	29 2f       	mov	r18, r25
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	08 2e       	mov	r0, r24
 23c:	02 c0       	rjmp	.+4      	; 0x242 <__vector_12+0x62>
 23e:	35 95       	asr	r19
 240:	27 95       	ror	r18
 242:	0a 94       	dec	r0
 244:	e2 f7       	brpl	.-8      	; 0x23e <__vector_12+0x5e>
 246:	20 ff       	sbrs	r18, 0
 248:	07 c0       	rjmp	.+14     	; 0x258 <__vector_12+0x78>
				average[av] --;
 24a:	fa 01       	movw	r30, r20
 24c:	e8 5d       	subi	r30, 0xD8	; 216
 24e:	fe 4f       	sbci	r31, 0xFE	; 254
 250:	20 81       	ld	r18, Z
 252:	21 50       	subi	r18, 0x01	; 1
 254:	20 83       	st	Z, r18
 256:	06 c0       	rjmp	.+12     	; 0x264 <__vector_12+0x84>
			}
			else {
				average[av] ++;
 258:	fa 01       	movw	r30, r20
 25a:	e8 5d       	subi	r30, 0xD8	; 216
 25c:	fe 4f       	sbci	r31, 0xFE	; 254
 25e:	20 81       	ld	r18, Z
 260:	2f 5f       	subi	r18, 0xFF	; 255
 262:	20 83       	st	Z, r18
unsigned char check = 0;

ISR(TIMER1_COMPA_vect) {
	unsigned char temp = time_average[count];
	time_average[count] = check;
	for (av = 0; av < 8; av++) {
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <av>
 26a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <av>
 26e:	88 30       	cpi	r24, 0x08	; 8
 270:	a8 f2       	brcs	.-86     	; 0x21c <__vector_12+0x3c>
				average[av] ++;
			}
		}
	}
	
	count ++;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	87 0f       	add	r24, r23
 276:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <count>
	if (count == average_count) {
 27a:	8a 30       	cpi	r24, 0x0A	; 10
 27c:	11 f4       	brne	.+4      	; 0x282 <__vector_12+0xa2>
		count = 0;
 27e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <count>
	}
	measurement = 1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <measurement>
}
 288:	ff 91       	pop	r31
 28a:	ef 91       	pop	r30
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	7f 91       	pop	r23
 292:	6f 91       	pop	r22
 294:	5f 91       	pop	r21
 296:	4f 91       	pop	r20
 298:	3f 91       	pop	r19
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0b be       	out	0x3b, r0	; 59
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <measurement_time_Init>:
void measurement_time_Init() {						// 초음파 계측 주기 타이머
	TCCR1A = (0<<WGM11) | (0<<WGM10);
 2aa:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
 2ac:	8d e0       	ldi	r24, 0x0D	; 13
 2ae:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
 2b0:	87 b7       	in	r24, 0x37	; 55
 2b2:	80 61       	ori	r24, 0x10	; 16
 2b4:	87 bf       	out	0x37, r24	; 55
	OCR1A = 15624 * measurement_time;
 2b6:	84 e3       	ldi	r24, 0x34	; 52
 2b8:	9c e0       	ldi	r25, 0x0C	; 12
 2ba:	9b bd       	out	0x2b, r25	; 43
 2bc:	8a bd       	out	0x2a, r24	; 42
	sei();
 2be:	78 94       	sei
 2c0:	08 95       	ret

000002c2 <__vector_26>:
}

int h = 12, m = 30, s = 30;
unsigned int front[7] = {0};
ISR(TIMER3_COMPA_vect) {
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	0b b6       	in	r0, 0x3b	; 59
 2ce:	0f 92       	push	r0
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
 2d8:	ef 93       	push	r30
 2da:	ff 93       	push	r31
	// 시계
	s++;
 2dc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <s>
 2e0:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <s+0x1>
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <s+0x1>
 2ea:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <s>
	if (s > 59) {m++, s = 0;}
 2ee:	cc 97       	sbiw	r24, 0x3c	; 60
 2f0:	6c f0       	brlt	.+26     	; 0x30c <__vector_26+0x4a>
 2f2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <m>
 2f6:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <m+0x1>
 2fa:	01 96       	adiw	r24, 0x01	; 1
 2fc:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <m+0x1>
 300:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <m>
 304:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <s+0x1>
 308:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <s>
	if (m > 59) {h++, m = 0;}
 30c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <m>
 310:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <m+0x1>
 314:	cc 97       	sbiw	r24, 0x3c	; 60
 316:	6c f0       	brlt	.+26     	; 0x332 <__vector_26+0x70>
 318:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <h>
 31c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <h+0x1>
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <h+0x1>
 326:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <h>
 32a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <m+0x1>
 32e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <m>
	if (h > 23) {h = 0;}
 332:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <h>
 336:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <h+0x1>
 33a:	48 97       	sbiw	r24, 0x18	; 24
 33c:	24 f0       	brlt	.+8      	; 0x346 <__vector_26+0x84>
 33e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <h+0x1>
 342:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <h>
	sei();
}

int h = 12, m = 30, s = 30;
unsigned int front[7] = {0};
ISR(TIMER3_COMPA_vect) {
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	1b c0       	rjmp	.+54     	; 0x380 <__vector_26+0xbe>
	if (m > 59) {h++, m = 0;}
	if (h > 23) {h = 0;}

	// 경과 시간 측정
	for (char a = 0 ; a < 7 ; a++) {
		if (average[a] <= (average_count * standard / 100)) {
 34a:	82 2f       	mov	r24, r18
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	fc 01       	movw	r30, r24
 350:	e8 5d       	subi	r30, 0xD8	; 216
 352:	fe 4f       	sbci	r31, 0xFE	; 254
 354:	30 81       	ld	r19, Z
 356:	36 30       	cpi	r19, 0x06	; 6
 358:	58 f4       	brcc	.+22     	; 0x370 <__vector_26+0xae>
			front[a]++;
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	fc 01       	movw	r30, r24
 360:	e8 5e       	subi	r30, 0xE8	; 232
 362:	fe 4f       	sbci	r31, 0xFE	; 254
 364:	80 81       	ld	r24, Z
 366:	91 81       	ldd	r25, Z+1	; 0x01
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	91 83       	std	Z+1, r25	; 0x01
 36c:	80 83       	st	Z, r24
 36e:	07 c0       	rjmp	.+14     	; 0x37e <__vector_26+0xbc>
		}
		else {
			front[a] = 0;
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	fc 01       	movw	r30, r24
 376:	e8 5e       	subi	r30, 0xE8	; 232
 378:	fe 4f       	sbci	r31, 0xFE	; 254
 37a:	11 82       	std	Z+1, r1	; 0x01
 37c:	10 82       	st	Z, r1
	if (s > 59) {m++, s = 0;}
	if (m > 59) {h++, m = 0;}
	if (h > 23) {h = 0;}

	// 경과 시간 측정
	for (char a = 0 ; a < 7 ; a++) {
 37e:	2f 5f       	subi	r18, 0xFF	; 255
 380:	27 30       	cpi	r18, 0x07	; 7
 382:	18 f3       	brcs	.-58     	; 0x34a <__vector_26+0x88>
		}
		else {
			front[a] = 0;
		}
	}
}
 384:	ff 91       	pop	r31
 386:	ef 91       	pop	r30
 388:	9f 91       	pop	r25
 38a:	8f 91       	pop	r24
 38c:	3f 91       	pop	r19
 38e:	2f 91       	pop	r18
 390:	0f 90       	pop	r0
 392:	0b be       	out	0x3b, r0	; 59
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <time_Init>:
void time_Init() {									// 시간 타이머
	TCCR3A = (0<<WGM11) | (0<<WGM10);
 39e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
 3a2:	8d e0       	ldi	r24, 0x0D	; 13
 3a4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	ETIMSK |= (1 << OCIE3A);
 3a8:	ed e7       	ldi	r30, 0x7D	; 125
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	80 61       	ori	r24, 0x10	; 16
 3b0:	80 83       	st	Z, r24
	OCR3A = 15624;
 3b2:	88 e0       	ldi	r24, 0x08	; 8
 3b4:	9d e3       	ldi	r25, 0x3D	; 61
 3b6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 3ba:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	sei();
 3be:	78 94       	sei
 3c0:	08 95       	ret

000003c2 <tNum>:
}

int tNum(unsigned int NUM) {
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	00 d0       	rcall	.+0      	; 0x3c8 <tNum+0x6>
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <tNum+0x8>
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	ac 01       	movw	r20, r24
	unsigned char Buff[4] = "0";
 3d0:	1c 82       	std	Y+4, r1	; 0x04
 3d2:	1b 82       	std	Y+3, r1	; 0x03
	Buff[0] = '0'+((NUM %1000)/100);
 3d4:	9c 01       	movw	r18, r24
 3d6:	36 95       	lsr	r19
 3d8:	27 95       	ror	r18
 3da:	36 95       	lsr	r19
 3dc:	27 95       	ror	r18
 3de:	36 95       	lsr	r19
 3e0:	27 95       	ror	r18
 3e2:	a5 ec       	ldi	r26, 0xC5	; 197
 3e4:	b0 e2       	ldi	r27, 0x20	; 32
 3e6:	83 d2       	rcall	.+1286   	; 0x8ee <__umulhisi3>
 3e8:	92 95       	swap	r25
 3ea:	82 95       	swap	r24
 3ec:	8f 70       	andi	r24, 0x0F	; 15
 3ee:	89 27       	eor	r24, r25
 3f0:	9f 70       	andi	r25, 0x0F	; 15
 3f2:	89 27       	eor	r24, r25
 3f4:	68 ee       	ldi	r22, 0xE8	; 232
 3f6:	73 e0       	ldi	r23, 0x03	; 3
 3f8:	86 9f       	mul	r24, r22
 3fa:	90 01       	movw	r18, r0
 3fc:	87 9f       	mul	r24, r23
 3fe:	30 0d       	add	r19, r0
 400:	96 9f       	mul	r25, r22
 402:	30 0d       	add	r19, r0
 404:	11 24       	eor	r1, r1
 406:	ca 01       	movw	r24, r20
 408:	82 1b       	sub	r24, r18
 40a:	93 0b       	sbc	r25, r19
 40c:	9c 01       	movw	r18, r24
 40e:	36 95       	lsr	r19
 410:	27 95       	ror	r18
 412:	36 95       	lsr	r19
 414:	27 95       	ror	r18
 416:	ab e7       	ldi	r26, 0x7B	; 123
 418:	b4 e1       	ldi	r27, 0x14	; 20
 41a:	69 d2       	rcall	.+1234   	; 0x8ee <__umulhisi3>
 41c:	96 95       	lsr	r25
 41e:	87 95       	ror	r24
 420:	80 5d       	subi	r24, 0xD0	; 208
 422:	89 83       	std	Y+1, r24	; 0x01
	Buff[1] = '0'+((NUM %100)/10);
 424:	9a 01       	movw	r18, r20
 426:	36 95       	lsr	r19
 428:	27 95       	ror	r18
 42a:	36 95       	lsr	r19
 42c:	27 95       	ror	r18
 42e:	5f d2       	rcall	.+1214   	; 0x8ee <__umulhisi3>
 430:	9c 01       	movw	r18, r24
 432:	36 95       	lsr	r19
 434:	27 95       	ror	r18
 436:	64 e6       	ldi	r22, 0x64	; 100
 438:	62 9f       	mul	r22, r18
 43a:	c0 01       	movw	r24, r0
 43c:	63 9f       	mul	r22, r19
 43e:	90 0d       	add	r25, r0
 440:	11 24       	eor	r1, r1
 442:	9a 01       	movw	r18, r20
 444:	28 1b       	sub	r18, r24
 446:	39 0b       	sbc	r19, r25
 448:	ad ec       	ldi	r26, 0xCD	; 205
 44a:	bc ec       	ldi	r27, 0xCC	; 204
 44c:	50 d2       	rcall	.+1184   	; 0x8ee <__umulhisi3>
 44e:	96 95       	lsr	r25
 450:	87 95       	ror	r24
 452:	96 95       	lsr	r25
 454:	87 95       	ror	r24
 456:	96 95       	lsr	r25
 458:	87 95       	ror	r24
 45a:	80 5d       	subi	r24, 0xD0	; 208
	Buff[2] = '0'+(NUM %10);
 45c:	8a 83       	std	Y+2, r24	; 0x02
 45e:	9a 01       	movw	r18, r20
 460:	46 d2       	rcall	.+1164   	; 0x8ee <__umulhisi3>
 462:	96 95       	lsr	r25
 464:	87 95       	ror	r24
 466:	96 95       	lsr	r25
 468:	87 95       	ror	r24
 46a:	96 95       	lsr	r25
 46c:	87 95       	ror	r24
 46e:	9c 01       	movw	r18, r24
 470:	22 0f       	add	r18, r18
 472:	33 1f       	adc	r19, r19
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	82 0f       	add	r24, r18
 482:	93 1f       	adc	r25, r19
 484:	9a 01       	movw	r18, r20
 486:	28 1b       	sub	r18, r24
 488:	39 0b       	sbc	r19, r25
 48a:	c9 01       	movw	r24, r18
 48c:	80 5d       	subi	r24, 0xD0	; 208
	LCDPuts(Buff);
 48e:	8b 83       	std	Y+3, r24	; 0x03
 490:	ce 01       	movw	r24, r28
 492:	01 96       	adiw	r24, 0x01	; 1
 494:	91 de       	rcall	.-734    	; 0x1b8 <LCDPuts>
}
 496:	0f 90       	pop	r0
 498:	0f 90       	pop	r0
 49a:	0f 90       	pop	r0
 49c:	0f 90       	pop	r0
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <Watch>:
int Watch(unsigned int y) {
 4a4:	0f 93       	push	r16
 4a6:	1f 93       	push	r17
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62
 4b0:	2d 97       	sbiw	r28, 0x0d	; 13
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	f8 94       	cli
 4b6:	de bf       	out	0x3e, r29	; 62
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	cd bf       	out	0x3d, r28	; 61
	LCDMove(y,0);
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	88 de       	rcall	.-752    	; 0x1d0 <LCDMove>
	unsigned char wc[13] = "0";
 4c0:	fe 01       	movw	r30, r28
 4c2:	33 96       	adiw	r30, 0x03	; 3
 4c4:	8b e0       	ldi	r24, 0x0B	; 11
 4c6:	df 01       	movw	r26, r30
 4c8:	1d 92       	st	X+, r1
 4ca:	8a 95       	dec	r24
 4cc:	e9 f7       	brne	.-6      	; 0x4c8 <Watch+0x24>
	wc[0] = '0'+((h %100)/10);
 4ce:	00 91 15 01 	lds	r16, 0x0115	; 0x800115 <h>
 4d2:	10 91 16 01 	lds	r17, 0x0116	; 0x800116 <h+0x1>
 4d6:	e4 e6       	ldi	r30, 0x64	; 100
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	c8 01       	movw	r24, r16
 4dc:	bf 01       	movw	r22, r30
 4de:	f4 d1       	rcall	.+1000   	; 0x8c8 <__divmodhi4>
 4e0:	2a e0       	ldi	r18, 0x0A	; 10
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	b9 01       	movw	r22, r18
 4e6:	f0 d1       	rcall	.+992    	; 0x8c8 <__divmodhi4>
 4e8:	60 5d       	subi	r22, 0xD0	; 208
 4ea:	69 83       	std	Y+1, r22	; 0x01
	wc[1] = '0'+(h %10);
 4ec:	c8 01       	movw	r24, r16
 4ee:	b9 01       	movw	r22, r18
 4f0:	eb d1       	rcall	.+982    	; 0x8c8 <__divmodhi4>
 4f2:	80 5d       	subi	r24, 0xD0	; 208
 4f4:	8a 83       	std	Y+2, r24	; 0x02
 4f6:	88 e6       	ldi	r24, 0x68	; 104
	wc[2] = 'h';
 4f8:	8b 83       	std	Y+3, r24	; 0x03
 4fa:	40 e2       	ldi	r20, 0x20	; 32
	wc[3] = ' ';
 4fc:	4c 83       	std	Y+4, r20	; 0x04
 4fe:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <m>
	
	wc[4] = '0'+((m %100)/10);
 502:	10 91 14 01 	lds	r17, 0x0114	; 0x800114 <m+0x1>
 506:	c8 01       	movw	r24, r16
 508:	bf 01       	movw	r22, r30
 50a:	de d1       	rcall	.+956    	; 0x8c8 <__divmodhi4>
 50c:	b9 01       	movw	r22, r18
 50e:	dc d1       	rcall	.+952    	; 0x8c8 <__divmodhi4>
 510:	60 5d       	subi	r22, 0xD0	; 208
 512:	6d 83       	std	Y+5, r22	; 0x05
	wc[5] = '0'+(m %10);
 514:	c8 01       	movw	r24, r16
 516:	b9 01       	movw	r22, r18
 518:	d7 d1       	rcall	.+942    	; 0x8c8 <__divmodhi4>
 51a:	80 5d       	subi	r24, 0xD0	; 208
 51c:	8e 83       	std	Y+6, r24	; 0x06
 51e:	8d e6       	ldi	r24, 0x6D	; 109
	wc[6] = 'm';
 520:	8f 83       	std	Y+7, r24	; 0x07
 522:	48 87       	std	Y+8, r20	; 0x08
	wc[7] = ' ';
	
	wc[8] = '0'+((s %100)/10);
 524:	00 91 11 01 	lds	r16, 0x0111	; 0x800111 <s>
 528:	10 91 12 01 	lds	r17, 0x0112	; 0x800112 <s+0x1>
 52c:	c8 01       	movw	r24, r16
 52e:	bf 01       	movw	r22, r30
 530:	cb d1       	rcall	.+918    	; 0x8c8 <__divmodhi4>
 532:	b9 01       	movw	r22, r18
 534:	c9 d1       	rcall	.+914    	; 0x8c8 <__divmodhi4>
 536:	60 5d       	subi	r22, 0xD0	; 208
 538:	69 87       	std	Y+9, r22	; 0x09
	wc[9] = '0'+(s %10);
 53a:	c8 01       	movw	r24, r16
 53c:	b9 01       	movw	r22, r18
 53e:	c4 d1       	rcall	.+904    	; 0x8c8 <__divmodhi4>
 540:	80 5d       	subi	r24, 0xD0	; 208
 542:	8a 87       	std	Y+10, r24	; 0x0a
	wc[10] = 's';
 544:	83 e7       	ldi	r24, 0x73	; 115
 546:	8b 87       	std	Y+11, r24	; 0x0b
	LCDPuts(wc);
 548:	ce 01       	movw	r24, r28
 54a:	01 96       	adiw	r24, 0x01	; 1
 54c:	35 de       	rcall	.-918    	; 0x1b8 <LCDPuts>
 54e:	2d 96       	adiw	r28, 0x0d	; 13
}
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	f8 94       	cli
 554:	de bf       	out	0x3e, r29	; 62
 556:	0f be       	out	0x3f, r0	; 63
 558:	cd bf       	out	0x3d, r28	; 61
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	08 95       	ret

00000564 <main>:
 564:	80 ef       	ldi	r24, 0xF0	; 240




int main(void){
	DDRB=0xf0;
 566:	87 bb       	out	0x17, r24	; 23
	DDRE=0x80;
 568:	80 e8       	ldi	r24, 0x80	; 128
 56a:	82 b9       	out	0x02, r24	; 2
	PORTE = 0x7f;
 56c:	8f e7       	ldi	r24, 0x7F	; 127
 56e:	83 b9       	out	0x03, r24	; 3
	UDR0 |= 0x00;
 570:	8c b1       	in	r24, 0x0c	; 12
 572:	8c b9       	out	0x0c, r24	; 12
	
	MCU_Init();
 574:	c7 dd       	rcall	.-1138   	; 0x104 <MCU_Init>
	LCDInit();
 576:	ed dd       	rcall	.-1062   	; 0x152 <LCDInit>
 578:	c4 e0       	ldi	r28, 0x04	; 4
	
	// 시간 설정
	static char string8[]="set Watch       ";
	unsigned char next = 4;
 57a:	b6 c0       	rjmp	.+364    	; 0x6e8 <main+0x184>
	while (next > 0) {
 57c:	60 e0       	ldi	r22, 0x00	; 0
		// 화면
		LCDMove(0,0);
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	27 de       	rcall	.-946    	; 0x1d0 <LCDMove>
 582:	c2 30       	cpi	r28, 0x02	; 2
		if (next > 1) {
 584:	48 f4       	brcc	.+18     	; 0x598 <main+0x34>
 586:	1b c0       	rjmp	.+54     	; 0x5be <main+0x5a>
 588:	e8 2f       	mov	r30, r24
			for (char a = 12 ; a < 15 ; a++) {string8[a] = ' ';}
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	e0 50       	subi	r30, 0x00	; 0
 58e:	ff 4f       	sbci	r31, 0xFF	; 255
 590:	90 e2       	ldi	r25, 0x20	; 32
 592:	90 83       	st	Z, r25
 594:	8f 5f       	subi	r24, 0xFF	; 255
 596:	01 c0       	rjmp	.+2      	; 0x59a <main+0x36>
 598:	8c e0       	ldi	r24, 0x0C	; 12
 59a:	8f 30       	cpi	r24, 0x0F	; 15
 59c:	a8 f3       	brcs	.-22     	; 0x588 <main+0x24>
 59e:	c4 30       	cpi	r28, 0x04	; 4
			if (next == 4) {string8[15] = 'h';}
 5a0:	21 f4       	brne	.+8      	; 0x5aa <main+0x46>
 5a2:	88 e6       	ldi	r24, 0x68	; 104
 5a4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
 5a8:	14 c0       	rjmp	.+40     	; 0x5d2 <main+0x6e>
 5aa:	c3 30       	cpi	r28, 0x03	; 3
			else if (next == 3) {string8[15] = 'm';}
 5ac:	21 f4       	brne	.+8      	; 0x5b6 <main+0x52>
 5ae:	8d e6       	ldi	r24, 0x6D	; 109
 5b0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
 5b4:	0e c0       	rjmp	.+28     	; 0x5d2 <main+0x6e>
 5b6:	83 e7       	ldi	r24, 0x73	; 115
			else {string8[15] = 's';}
 5b8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
 5bc:	0a c0       	rjmp	.+20     	; 0x5d2 <main+0x6e>
 5be:	e0 e0       	ldi	r30, 0x00	; 0
		}
		else {
			string8[12] = 'n';
 5c0:	f1 e0       	ldi	r31, 0x01	; 1
 5c2:	8e e6       	ldi	r24, 0x6E	; 110
 5c4:	84 87       	std	Z+12, r24	; 0x0c
 5c6:	85 e6       	ldi	r24, 0x65	; 101
			string8[13] = 'e';
 5c8:	85 87       	std	Z+13, r24	; 0x0d
 5ca:	88 e7       	ldi	r24, 0x78	; 120
			string8[14] = 'x';
 5cc:	86 87       	std	Z+14, r24	; 0x0e
 5ce:	84 e7       	ldi	r24, 0x74	; 116
			string8[15] = 't';
 5d0:	87 87       	std	Z+15, r24	; 0x0f
		}
		LCDPuts(string8);
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	91 e0       	ldi	r25, 0x01	; 1
 5d6:	f0 dd       	rcall	.-1056   	; 0x1b8 <LCDPuts>
		Watch(1);
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	63 df       	rcall	.-314    	; 0x4a4 <Watch>
 5de:	86 b3       	in	r24, 0x16	; 22
		
		// 버튼
		if (PINB == 14) {
 5e0:	8e 30       	cpi	r24, 0x0E	; 14
 5e2:	81 f5       	brne	.+96     	; 0x644 <main+0xe0>
 5e4:	c4 30       	cpi	r28, 0x04	; 4
			if (next == 4 && h != 0) {h--;}
 5e6:	59 f4       	brne	.+22     	; 0x5fe <main+0x9a>
 5e8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <h>
 5ec:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <h+0x1>
 5f0:	00 97       	sbiw	r24, 0x00	; 0
 5f2:	29 f0       	breq	.+10     	; 0x5fe <main+0x9a>
 5f4:	01 97       	sbiw	r24, 0x01	; 1
 5f6:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <h+0x1>
 5fa:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <h>
 5fe:	c3 30       	cpi	r28, 0x03	; 3
			if (next == 3 && m != 0) {m--;}
 600:	59 f4       	brne	.+22     	; 0x618 <main+0xb4>
 602:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <m>
 606:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <m+0x1>
 60a:	00 97       	sbiw	r24, 0x00	; 0
 60c:	29 f0       	breq	.+10     	; 0x618 <main+0xb4>
 60e:	01 97       	sbiw	r24, 0x01	; 1
 610:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <m+0x1>
 614:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <m>
 618:	c2 30       	cpi	r28, 0x02	; 2
			if (next == 2 && s != 0) {s--;}
 61a:	59 f4       	brne	.+22     	; 0x632 <main+0xce>
 61c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <s>
 620:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <s+0x1>
 624:	00 97       	sbiw	r24, 0x00	; 0
 626:	29 f0       	breq	.+10     	; 0x632 <main+0xce>
 628:	01 97       	sbiw	r24, 0x01	; 1
 62a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <s+0x1>
 62e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <s>
 632:	2f ef       	ldi	r18, 0xFF	; 255
 634:	83 ec       	ldi	r24, 0xC3	; 195
 636:	99 e0       	ldi	r25, 0x09	; 9
 638:	21 50       	subi	r18, 0x01	; 1
 63a:	80 40       	sbci	r24, 0x00	; 0
 63c:	90 40       	sbci	r25, 0x00	; 0
 63e:	e1 f7       	brne	.-8      	; 0x638 <main+0xd4>
 640:	00 c0       	rjmp	.+0      	; 0x642 <main+0xde>
 642:	00 00       	nop
 644:	86 b3       	in	r24, 0x16	; 22
			_delay_ms(200);
		}
		if (PINB == 13) {
 646:	8d 30       	cpi	r24, 0x0D	; 13
 648:	99 f5       	brne	.+102    	; 0x6b0 <main+0x14c>
 64a:	c4 30       	cpi	r28, 0x04	; 4
			if (next == 4 && h != 23) {h++;}
 64c:	61 f4       	brne	.+24     	; 0x666 <main+0x102>
 64e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <h>
 652:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <h+0x1>
 656:	87 31       	cpi	r24, 0x17	; 23
 658:	91 05       	cpc	r25, r1
 65a:	29 f0       	breq	.+10     	; 0x666 <main+0x102>
 65c:	01 96       	adiw	r24, 0x01	; 1
 65e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <h+0x1>
 662:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <h>
 666:	c3 30       	cpi	r28, 0x03	; 3
			if (next == 3 && m != 59) {m++;}
 668:	61 f4       	brne	.+24     	; 0x682 <main+0x11e>
 66a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <m>
 66e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <m+0x1>
 672:	8b 33       	cpi	r24, 0x3B	; 59
 674:	91 05       	cpc	r25, r1
 676:	29 f0       	breq	.+10     	; 0x682 <main+0x11e>
 678:	01 96       	adiw	r24, 0x01	; 1
 67a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <m+0x1>
 67e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <m>
 682:	c2 30       	cpi	r28, 0x02	; 2
			if (next == 2 && s != 59) {s++;}
 684:	61 f4       	brne	.+24     	; 0x69e <main+0x13a>
 686:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <s>
 68a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <s+0x1>
 68e:	8b 33       	cpi	r24, 0x3B	; 59
 690:	91 05       	cpc	r25, r1
 692:	29 f0       	breq	.+10     	; 0x69e <main+0x13a>
 694:	01 96       	adiw	r24, 0x01	; 1
 696:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <s+0x1>
 69a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <s>
 69e:	2f ef       	ldi	r18, 0xFF	; 255
 6a0:	83 ec       	ldi	r24, 0xC3	; 195
 6a2:	99 e0       	ldi	r25, 0x09	; 9
 6a4:	21 50       	subi	r18, 0x01	; 1
 6a6:	80 40       	sbci	r24, 0x00	; 0
 6a8:	90 40       	sbci	r25, 0x00	; 0
 6aa:	e1 f7       	brne	.-8      	; 0x6a4 <main+0x140>
 6ac:	00 c0       	rjmp	.+0      	; 0x6ae <main+0x14a>
 6ae:	00 00       	nop
 6b0:	86 b3       	in	r24, 0x16	; 22
			_delay_ms(200);
		}
		if (PINB == 11 && next != 4) {
 6b2:	8b 30       	cpi	r24, 0x0B	; 11
 6b4:	61 f4       	brne	.+24     	; 0x6ce <main+0x16a>
 6b6:	c4 30       	cpi	r28, 0x04	; 4
 6b8:	51 f0       	breq	.+20     	; 0x6ce <main+0x16a>
 6ba:	cf 5f       	subi	r28, 0xFF	; 255
			next ++;
 6bc:	2f ef       	ldi	r18, 0xFF	; 255
 6be:	83 ec       	ldi	r24, 0xC3	; 195
 6c0:	99 e0       	ldi	r25, 0x09	; 9
 6c2:	21 50       	subi	r18, 0x01	; 1
 6c4:	80 40       	sbci	r24, 0x00	; 0
 6c6:	90 40       	sbci	r25, 0x00	; 0
 6c8:	e1 f7       	brne	.-8      	; 0x6c2 <main+0x15e>
 6ca:	00 c0       	rjmp	.+0      	; 0x6cc <main+0x168>
 6cc:	00 00       	nop
 6ce:	86 b3       	in	r24, 0x16	; 22
			_delay_ms(200);
		}
		if (PINB == 7) {
 6d0:	87 30       	cpi	r24, 0x07	; 7
 6d2:	51 f4       	brne	.+20     	; 0x6e8 <main+0x184>
 6d4:	c1 50       	subi	r28, 0x01	; 1
			next --;
 6d6:	2f ef       	ldi	r18, 0xFF	; 255
 6d8:	83 ec       	ldi	r24, 0xC3	; 195
 6da:	99 e0       	ldi	r25, 0x09	; 9
 6dc:	21 50       	subi	r18, 0x01	; 1
 6de:	80 40       	sbci	r24, 0x00	; 0
 6e0:	90 40       	sbci	r25, 0x00	; 0
 6e2:	e1 f7       	brne	.-8      	; 0x6dc <main+0x178>
 6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <main+0x182>
	LCDInit();
	
	// 시간 설정
	static char string8[]="set Watch       ";
	unsigned char next = 4;
	while (next > 0) {
 6e6:	00 00       	nop
 6e8:	c1 11       	cpse	r28, r1
		if (PINB == 7) {
			next --;
			_delay_ms(200);
		}
	}
	time_Init();
 6ea:	48 cf       	rjmp	.-368    	; 0x57c <main+0x18>
 6ec:	58 de       	rcall	.-848    	; 0x39e <time_Init>
	measurement_time_Init();
 6ee:	dd dd       	rcall	.-1094   	; 0x2aa <measurement_time_Init>
 6f0:	30 dd       	rcall	.-1440   	; 0x152 <LCDInit>
	LCDInit();
 6f2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <measurement>
	
	// main
	while(1){
		// 초음파 측정
		if (measurement == 1) {
 6f6:	81 30       	cpi	r24, 0x01	; 1
 6f8:	09 f0       	breq	.+2      	; 0x6fc <main+0x198>
 6fa:	49 c0       	rjmp	.+146    	; 0x78e <main+0x22a>
 6fc:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <check>
			check = 0;
 700:	87 e0       	ldi	r24, 0x07	; 7
 702:	83 bf       	out	0x33, r24	; 51
			TCCR0 = 7;
 704:	83 b1       	in	r24, 0x03	; 3
 706:	80 68       	ori	r24, 0x80	; 128
			
			PORTE |= (1<<TRIG);
 708:	83 b9       	out	0x03, r24	; 3
 70a:	25 e3       	ldi	r18, 0x35	; 53
 70c:	2a 95       	dec	r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 70e:	f1 f7       	brne	.-4      	; 0x70c <main+0x1a8>
 710:	00 00       	nop
 712:	83 b1       	in	r24, 0x03	; 3
 714:	8f 77       	andi	r24, 0x7F	; 127
			_delay_us(10);
			PORTE &= ~(1<<TRIG);
 716:	83 b9       	out	0x03, r24	; 3
 718:	08 9b       	sbis	0x01, 0	; 1
 71a:	fe cf       	rjmp	.-4      	; 0x718 <main+0x1b4>
			
			while (!(PINE & (1<<0))) {}
 71c:	12 be       	out	0x32, r1	; 50
 71e:	28 c0       	rjmp	.+80     	; 0x770 <main+0x20c>
			TCNT0 = 0;
 720:	81 b1       	in	r24, 0x01	; 1
			
			while (TCNT0 < ((interval + 50) / 10.88)){
 722:	90 e0       	ldi	r25, 0x00	; 0
				for (unsigned char a = 0 ; a < 7; a++) {
					if (PINE & (1<<a)) {
 724:	0c 2e       	mov	r0, r28
 726:	02 c0       	rjmp	.+4      	; 0x72c <main+0x1c8>
 728:	95 95       	asr	r25
 72a:	87 95       	ror	r24
 72c:	0a 94       	dec	r0
 72e:	e2 f7       	brpl	.-8      	; 0x728 <main+0x1c4>
 730:	80 ff       	sbrs	r24, 0
 732:	19 c0       	rjmp	.+50     	; 0x766 <main+0x202>
 734:	62 b7       	in	r22, 0x32	; 50
						if (TCNT0 > ((interval) / 10.88)) {
 736:	70 e0       	ldi	r23, 0x00	; 0
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	62 d0       	rcall	.+196    	; 0x802 <__floatsisf>
 73e:	2d e2       	ldi	r18, 0x2D	; 45
 740:	3d ea       	ldi	r19, 0xAD	; 173
 742:	40 e8       	ldi	r20, 0x80	; 128
 744:	52 e4       	ldi	r21, 0x42	; 66
 746:	bc d0       	rcall	.+376    	; 0x8c0 <__gesf2>
 748:	18 16       	cp	r1, r24
 74a:	6c f4       	brge	.+26     	; 0x766 <main+0x202>
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	90 e0       	ldi	r25, 0x00	; 0
							check |= (1 << a);
 750:	0c 2e       	mov	r0, r28
 752:	02 c0       	rjmp	.+4      	; 0x758 <main+0x1f4>
 754:	88 0f       	add	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	0a 94       	dec	r0
 75a:	e2 f7       	brpl	.-8      	; 0x754 <main+0x1f0>
 75c:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <check>
 760:	89 2b       	or	r24, r25
 762:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <check>
 766:	cf 5f       	subi	r28, 0xFF	; 255
			
			while (!(PINE & (1<<0))) {}
			TCNT0 = 0;
			
			while (TCNT0 < ((interval + 50) / 10.88)){
				for (unsigned char a = 0 ; a < 7; a++) {
 768:	01 c0       	rjmp	.+2      	; 0x76c <main+0x208>
 76a:	c0 e0       	ldi	r28, 0x00	; 0
 76c:	c7 30       	cpi	r28, 0x07	; 7
 76e:	c0 f2       	brcs	.-80     	; 0x720 <main+0x1bc>
			PORTE &= ~(1<<TRIG);
			
			while (!(PINE & (1<<0))) {}
			TCNT0 = 0;
			
			while (TCNT0 < ((interval + 50) / 10.88)){
 770:	62 b7       	in	r22, 0x32	; 50
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	44 d0       	rcall	.+136    	; 0x802 <__floatsisf>
 77a:	2e e1       	ldi	r18, 0x1E	; 30
 77c:	3e ed       	ldi	r19, 0xDE	; 222
 77e:	49 e8       	ldi	r20, 0x89	; 137
 780:	52 e4       	ldi	r21, 0x42	; 66
 782:	39 d0       	rcall	.+114    	; 0x7f6 <__cmpsf2>
 784:	88 23       	and	r24, r24
 786:	8c f3       	brlt	.-30     	; 0x76a <main+0x206>
							check |= (1 << a);
						}
					}
				}
			}
			TCCR0 = 0;
 788:	13 be       	out	0x33, r1	; 51
			measurement = 0;
 78a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <measurement>
		}

		LCDMove(0,0);
 78e:	60 e0       	ldi	r22, 0x00	; 0
 790:	80 e0       	ldi	r24, 0x00	; 0
		tNum(front[0]);
 792:	1e dd       	rcall	.-1476   	; 0x1d0 <LCDMove>
 794:	c8 e1       	ldi	r28, 0x18	; 24
 796:	d1 e0       	ldi	r29, 0x01	; 1
 798:	88 81       	ld	r24, Y
		LCDMove(0,4);
 79a:	99 81       	ldd	r25, Y+1	; 0x01
 79c:	12 de       	rcall	.-988    	; 0x3c2 <tNum>
 79e:	64 e0       	ldi	r22, 0x04	; 4
		tNum(front[1]);
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	16 dd       	rcall	.-1492   	; 0x1d0 <LCDMove>
 7a4:	8a 81       	ldd	r24, Y+2	; 0x02
		LCDMove(0,8);
 7a6:	9b 81       	ldd	r25, Y+3	; 0x03
 7a8:	0c de       	rcall	.-1000   	; 0x3c2 <tNum>
 7aa:	68 e0       	ldi	r22, 0x08	; 8
		tNum(front[2]);
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	10 dd       	rcall	.-1504   	; 0x1d0 <LCDMove>
 7b0:	8c 81       	ldd	r24, Y+4	; 0x04
		LCDMove(0,12);
 7b2:	9d 81       	ldd	r25, Y+5	; 0x05
 7b4:	06 de       	rcall	.-1012   	; 0x3c2 <tNum>
 7b6:	6c e0       	ldi	r22, 0x0C	; 12
		tNum(front[3]);
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	0a dd       	rcall	.-1516   	; 0x1d0 <LCDMove>
 7bc:	8e 81       	ldd	r24, Y+6	; 0x06
		
		
		LCDMove(1,0);
 7be:	9f 81       	ldd	r25, Y+7	; 0x07
 7c0:	00 de       	rcall	.-1024   	; 0x3c2 <tNum>
 7c2:	60 e0       	ldi	r22, 0x00	; 0
		tNum(front[4]);
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	04 dd       	rcall	.-1528   	; 0x1d0 <LCDMove>
 7c8:	88 85       	ldd	r24, Y+8	; 0x08
		LCDMove(1,4);
 7ca:	99 85       	ldd	r25, Y+9	; 0x09
 7cc:	fa dd       	rcall	.-1036   	; 0x3c2 <tNum>
 7ce:	64 e0       	ldi	r22, 0x04	; 4
 7d0:	81 e0       	ldi	r24, 0x01	; 1
		tNum(front[5]);
 7d2:	fe dc       	rcall	.-1540   	; 0x1d0 <LCDMove>
 7d4:	8a 85       	ldd	r24, Y+10	; 0x0a
 7d6:	9b 85       	ldd	r25, Y+11	; 0x0b
 7d8:	f4 dd       	rcall	.-1048   	; 0x3c2 <tNum>
		LCDMove(1,8);
 7da:	68 e0       	ldi	r22, 0x08	; 8
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	f8 dc       	rcall	.-1552   	; 0x1d0 <LCDMove>
 7e0:	8c 85       	ldd	r24, Y+12	; 0x0c
		tNum(front[6]);
 7e2:	9d 85       	ldd	r25, Y+13	; 0x0d
 7e4:	ee dd       	rcall	.-1060   	; 0x3c2 <tNum>
 7e6:	6c e0       	ldi	r22, 0x0C	; 12
 7e8:	81 e0       	ldi	r24, 0x01	; 1
		LCDMove(1,12);
 7ea:	f2 dc       	rcall	.-1564   	; 0x1d0 <LCDMove>
 7ec:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <check>
 7f0:	90 e0       	ldi	r25, 0x00	; 0
		tNum(check);	
 7f2:	e7 dd       	rcall	.-1074   	; 0x3c2 <tNum>
 7f4:	7e cf       	rjmp	.-260    	; 0x6f2 <main+0x18e>

000007f6 <__cmpsf2>:
 7f6:	40 d0       	rcall	.+128    	; 0x878 <__fp_cmp>
 7f8:	08 f4       	brcc	.+2      	; 0x7fc <__cmpsf2+0x6>
 7fa:	81 e0       	ldi	r24, 0x01	; 1
	}
 7fc:	08 95       	ret

000007fe <__floatunsisf>:
 7fe:	e8 94       	clt
 800:	09 c0       	rjmp	.+18     	; 0x814 <__floatsisf+0x12>

00000802 <__floatsisf>:
 802:	97 fb       	bst	r25, 7
 804:	3e f4       	brtc	.+14     	; 0x814 <__floatsisf+0x12>
 806:	90 95       	com	r25
 808:	80 95       	com	r24
 80a:	70 95       	com	r23
 80c:	61 95       	neg	r22
 80e:	7f 4f       	sbci	r23, 0xFF	; 255
 810:	8f 4f       	sbci	r24, 0xFF	; 255
 812:	9f 4f       	sbci	r25, 0xFF	; 255
 814:	99 23       	and	r25, r25
 816:	a9 f0       	breq	.+42     	; 0x842 <__floatsisf+0x40>
 818:	f9 2f       	mov	r31, r25
 81a:	96 e9       	ldi	r25, 0x96	; 150
 81c:	bb 27       	eor	r27, r27
 81e:	93 95       	inc	r25
 820:	f6 95       	lsr	r31
 822:	87 95       	ror	r24
 824:	77 95       	ror	r23
 826:	67 95       	ror	r22
 828:	b7 95       	ror	r27
 82a:	f1 11       	cpse	r31, r1
 82c:	f8 cf       	rjmp	.-16     	; 0x81e <__floatsisf+0x1c>
 82e:	fa f4       	brpl	.+62     	; 0x86e <__floatsisf+0x6c>
 830:	bb 0f       	add	r27, r27
 832:	11 f4       	brne	.+4      	; 0x838 <__floatsisf+0x36>
 834:	60 ff       	sbrs	r22, 0
 836:	1b c0       	rjmp	.+54     	; 0x86e <__floatsisf+0x6c>
 838:	6f 5f       	subi	r22, 0xFF	; 255
 83a:	7f 4f       	sbci	r23, 0xFF	; 255
 83c:	8f 4f       	sbci	r24, 0xFF	; 255
 83e:	9f 4f       	sbci	r25, 0xFF	; 255
 840:	16 c0       	rjmp	.+44     	; 0x86e <__floatsisf+0x6c>
 842:	88 23       	and	r24, r24
 844:	11 f0       	breq	.+4      	; 0x84a <__floatsisf+0x48>
 846:	96 e9       	ldi	r25, 0x96	; 150
 848:	11 c0       	rjmp	.+34     	; 0x86c <__floatsisf+0x6a>
 84a:	77 23       	and	r23, r23
 84c:	21 f0       	breq	.+8      	; 0x856 <__floatsisf+0x54>
 84e:	9e e8       	ldi	r25, 0x8E	; 142
 850:	87 2f       	mov	r24, r23
 852:	76 2f       	mov	r23, r22
 854:	05 c0       	rjmp	.+10     	; 0x860 <__floatsisf+0x5e>
 856:	66 23       	and	r22, r22
 858:	71 f0       	breq	.+28     	; 0x876 <__floatsisf+0x74>
 85a:	96 e8       	ldi	r25, 0x86	; 134
 85c:	86 2f       	mov	r24, r22
 85e:	70 e0       	ldi	r23, 0x00	; 0
 860:	60 e0       	ldi	r22, 0x00	; 0
 862:	2a f0       	brmi	.+10     	; 0x86e <__floatsisf+0x6c>
 864:	9a 95       	dec	r25
 866:	66 0f       	add	r22, r22
 868:	77 1f       	adc	r23, r23
 86a:	88 1f       	adc	r24, r24
 86c:	da f7       	brpl	.-10     	; 0x864 <__floatsisf+0x62>
 86e:	88 0f       	add	r24, r24
 870:	96 95       	lsr	r25
 872:	87 95       	ror	r24
 874:	97 f9       	bld	r25, 7
 876:	08 95       	ret

00000878 <__fp_cmp>:
 878:	99 0f       	add	r25, r25
 87a:	00 08       	sbc	r0, r0
 87c:	55 0f       	add	r21, r21
 87e:	aa 0b       	sbc	r26, r26
 880:	e0 e8       	ldi	r30, 0x80	; 128
 882:	fe ef       	ldi	r31, 0xFE	; 254
 884:	16 16       	cp	r1, r22
 886:	17 06       	cpc	r1, r23
 888:	e8 07       	cpc	r30, r24
 88a:	f9 07       	cpc	r31, r25
 88c:	c0 f0       	brcs	.+48     	; 0x8be <__fp_cmp+0x46>
 88e:	12 16       	cp	r1, r18
 890:	13 06       	cpc	r1, r19
 892:	e4 07       	cpc	r30, r20
 894:	f5 07       	cpc	r31, r21
 896:	98 f0       	brcs	.+38     	; 0x8be <__fp_cmp+0x46>
 898:	62 1b       	sub	r22, r18
 89a:	73 0b       	sbc	r23, r19
 89c:	84 0b       	sbc	r24, r20
 89e:	95 0b       	sbc	r25, r21
 8a0:	39 f4       	brne	.+14     	; 0x8b0 <__fp_cmp+0x38>
 8a2:	0a 26       	eor	r0, r26
 8a4:	61 f0       	breq	.+24     	; 0x8be <__fp_cmp+0x46>
 8a6:	23 2b       	or	r18, r19
 8a8:	24 2b       	or	r18, r20
 8aa:	25 2b       	or	r18, r21
 8ac:	21 f4       	brne	.+8      	; 0x8b6 <__fp_cmp+0x3e>
 8ae:	08 95       	ret
 8b0:	0a 26       	eor	r0, r26
 8b2:	09 f4       	brne	.+2      	; 0x8b6 <__fp_cmp+0x3e>
 8b4:	a1 40       	sbci	r26, 0x01	; 1
 8b6:	a6 95       	lsr	r26
 8b8:	8f ef       	ldi	r24, 0xFF	; 255
 8ba:	81 1d       	adc	r24, r1
 8bc:	81 1d       	adc	r24, r1
 8be:	08 95       	ret

000008c0 <__gesf2>:
 8c0:	db df       	rcall	.-74     	; 0x878 <__fp_cmp>
 8c2:	08 f4       	brcc	.+2      	; 0x8c6 <__gesf2+0x6>
 8c4:	8f ef       	ldi	r24, 0xFF	; 255
 8c6:	08 95       	ret

000008c8 <__divmodhi4>:
 8c8:	97 fb       	bst	r25, 7
 8ca:	07 2e       	mov	r0, r23
 8cc:	16 f4       	brtc	.+4      	; 0x8d2 <__divmodhi4+0xa>
 8ce:	00 94       	com	r0
 8d0:	06 d0       	rcall	.+12     	; 0x8de <__divmodhi4_neg1>
 8d2:	77 fd       	sbrc	r23, 7
 8d4:	08 d0       	rcall	.+16     	; 0x8e6 <__divmodhi4_neg2>
 8d6:	1a d0       	rcall	.+52     	; 0x90c <__udivmodhi4>
 8d8:	07 fc       	sbrc	r0, 7
 8da:	05 d0       	rcall	.+10     	; 0x8e6 <__divmodhi4_neg2>
 8dc:	3e f4       	brtc	.+14     	; 0x8ec <__divmodhi4_exit>

000008de <__divmodhi4_neg1>:
 8de:	90 95       	com	r25
 8e0:	81 95       	neg	r24
 8e2:	9f 4f       	sbci	r25, 0xFF	; 255
 8e4:	08 95       	ret

000008e6 <__divmodhi4_neg2>:
 8e6:	70 95       	com	r23
 8e8:	61 95       	neg	r22
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255

000008ec <__divmodhi4_exit>:
 8ec:	08 95       	ret

000008ee <__umulhisi3>:
 8ee:	a2 9f       	mul	r26, r18
 8f0:	b0 01       	movw	r22, r0
 8f2:	b3 9f       	mul	r27, r19
 8f4:	c0 01       	movw	r24, r0
 8f6:	a3 9f       	mul	r26, r19
 8f8:	70 0d       	add	r23, r0
 8fa:	81 1d       	adc	r24, r1
 8fc:	11 24       	eor	r1, r1
 8fe:	91 1d       	adc	r25, r1
 900:	b2 9f       	mul	r27, r18
 902:	70 0d       	add	r23, r0
 904:	81 1d       	adc	r24, r1
 906:	11 24       	eor	r1, r1
 908:	91 1d       	adc	r25, r1
 90a:	08 95       	ret

0000090c <__udivmodhi4>:
 90c:	aa 1b       	sub	r26, r26
 90e:	bb 1b       	sub	r27, r27
 910:	51 e1       	ldi	r21, 0x11	; 17
 912:	07 c0       	rjmp	.+14     	; 0x922 <__udivmodhi4_ep>

00000914 <__udivmodhi4_loop>:
 914:	aa 1f       	adc	r26, r26
 916:	bb 1f       	adc	r27, r27
 918:	a6 17       	cp	r26, r22
 91a:	b7 07       	cpc	r27, r23
 91c:	10 f0       	brcs	.+4      	; 0x922 <__udivmodhi4_ep>
 91e:	a6 1b       	sub	r26, r22
 920:	b7 0b       	sbc	r27, r23

00000922 <__udivmodhi4_ep>:
 922:	88 1f       	adc	r24, r24
 924:	99 1f       	adc	r25, r25
 926:	5a 95       	dec	r21
 928:	a9 f7       	brne	.-22     	; 0x914 <__udivmodhi4_loop>
 92a:	80 95       	com	r24
 92c:	90 95       	com	r25
 92e:	bc 01       	movw	r22, r24
 930:	cd 01       	movw	r24, r26
 932:	08 95       	ret

00000934 <_exit>:
 934:	f8 94       	cli

00000936 <__stop_program>:
 936:	ff cf       	rjmp	.-2      	; 0x936 <__stop_program>
